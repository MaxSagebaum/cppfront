
//  Copyright (c) Herb Sutter
//  SPDX-License-Identifier: CC-BY-NC-ND-4.0

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

cpp2: namespace = {

regex: namespace = {

view: <CharT> type == std::basic_string_view<CharT>;
bstring: <CharT> type == std::basic_string<CharT>;

//-----------------------------------------------------------------------
//
//  Helper structures for the expression matching.
//
//-----------------------------------------------------------------------
//

match_group: @struct <Iter> type = {
    start: Iter = ();
    end: Iter = ();

    matched: bool = false;
}

match_return: @struct <Iter> type = {
    matched: bool = false;
    pos: Iter = ();
}

match_context: <CharT, Iter, max_groups: size_t> type =
{
    public begin: Iter;
    public end: Iter;

    private groups: std::array<match_group<Iter>, max_groups> = ();

    operator=: (out this, begin_: Iter, end_: Iter) = {
        begin = begin_;
        end = end_;
    }

    operator=: (out this) = { // TODO: Remove
        begin = ();
        end = ();
    }

    // Getter and setter for groups
    //
    get_group: (in this, group) groups[group];

    set_group_end: (inout this, group, pos) = {
        groups[group].end = pos;
        groups[group].matched = true;
    }

    set_group_invalid: (inout this, group) = {
        groups[group].matched = false;
    }

    set_group_start: (inout this, group, pos) = {
        groups[group].start = pos;
    }

    size: (in this) max_groups;

    // Misc functions
    //
    print_ranges: (in this, begin_) -> bstring<CharT> = { // TODO: Remove Argument
        r: bstring<CharT> = "";
        for groups do (cur) {
            if cur.matched {
                r += "((std::distance(begin, cur.start))$,(std::distance(begin, cur.end))$)";
            }
            else {
                r += "(?,?)";
            }
        }

        return r;
    }
}

//  Represents the remainder of the regular expression.
//
//  A matcher can ask this remainder if it would match. If yes a full match of the regular expression is found.
//  Otherwise the matcher can try a different alternative.
//
match_tail: <CharT, List...> type = {
    match: <Iter> (cur: Iter, inout ctx) match_select<Iter, List...>(cur, ctx);

    match_combine: <Iter, OtherList...> (cur: Iter, inout ctx, _: match_tail<CharT, OtherList...>)
        match_select<Iter, List..., OtherList...>(cur, ctx);

    private match_select: <Iter, First, Other...> (cur: Iter, inout ctx)
        First::match(cur, ctx, match_tail<CharT, Other...>());
    private match_select: <Iter> (cur: Iter, inout ctx) match_return<Iter>(true, cur);

    reset_ranges: ( inout ctx) = (List::reset_ranges(ctx), ...);
    to_string: () (bstring<CharT>() + ... + List::to_string());
}

no_match_tail: <CharT> type == match_tail<CharT>;

// TODO
regular_expression: <CharT, groups: size_t, Matcher> type = {

    Iter: type == view<CharT>::const_iterator;
    context: type == match_context<CharT, Iter, groups>;

    search: (in this, str: view<CharT>, inout ctx: context) -> bool = {
        ctx.begin = str.begin();
        ctx.end = str.end();
        cur := str.begin();
        while true next (cur++) {
            if Matcher::match(cur, ctx).matched {
                return true;
            }

            if cur == ctx.end {
                break;
            }
        }

        return false;
    }

    to_string: (in this) -> _ = Matcher::to_string();
}

//  Regex syntax: |
//  Example: ab|ba
//
//  Non greedy implementation. First alternative that matches is chosen. 
alternative_matcher_logic: <CharT, List ...> type = {

    match: <Iter> (cur: Iter, inout ctx, tail) 
            match_all<Iter, List...>(cur, ctx, tail);

    private match_all: <Iter, First, Next ...> (cur: Iter, inout ctx, tail) -> match_return<Iter> = {
        r := First::match(cur, ctx, tail);
        if r.matched {
            return r;
        } else {
            First::reset_ranges(ctx);

            if constexpr 0 != sizeof...(Next) {
                return match_all<Iter, Next...>(cur, ctx, tail);
            } else {
                return match_return<Iter>(false, ctx.end);
            }
        }
    }

    reset_ranges: (inout ctx) = (List::reset_ranges(ctx) , ...);

    to_string: () (bstring<CharT>() + ... + ("|" + List::to_string())).substr(1); // substr: Remove first '|'.
}

any_matcher_logic: <CharT> type =
{
    match: <Iter, Other> (cur: Iter, inout ctx, _ : Other) -> match_return<Iter> = {
        if cur != ctx.end {
            return Other::match(cur + 1, ctx);
        } else {
            return match_return<Iter>(false, ctx.end);
        }
    }

    reset_ranges: (inout ctx) = {}

    to_string: () bstring<CharT>(1, '.');
}

char_matcher_logic: <CharT, C: CharT> type =
{
    match: <Iter, Other> (cur: Iter, inout ctx, _ : Other) -> match_return<Iter> = {
        if cur != ctx.end && cur* == C {
            return Other::match(cur + 1, ctx);
        } else {
            return match_return<Iter>(false, ctx.end);
        }
    }
    reset_ranges: (inout ctx) = {}
    to_string: () bstring<CharT>(1, C);
}

single_class_entry: <CharT, C: CharT> type =
{
    includes: (c: CharT) -> _ = c == C;
    to_string: () -> _ = bstring<CharT>(1, C);
}

range_class_entry: <CharT, Start: CharT, End: CharT> type =
{
    includes: (c: CharT) -> _ = Start <= c <= End;
    to_string: () -> _ = "(Start)$-(End)$";
}

and_class_entry: <CharT, List ...> type = {
    includes: (c: CharT) (false || ... || List::includes(c));
    to_string: () ("" + ... + List::to_string());
}

list_class_entry: <CharT, List ... : CharT> type = {
    includes: (c: CharT) (false || ... || (List == c));
    to_string: () ("" + ... + List);
}

named_class_entry: <CharT, Name: fixed_string, Inner> type = {
    includes: (c: CharT) Inner::includes(c);
    to_string: () "[:(Name.data())$:]";
}


// Named character classes.
digits_class  : <CharT> type == named_class_entry<CharT, "digits", range_class_entry<CharT, '0', '9'>>;
lower_class   : <CharT> type == named_class_entry<CharT, "lower", range_class_entry<CharT, 'a', 'z'>>;
upper_class   : <CharT> type == named_class_entry<CharT, "upper", range_class_entry<CharT, 'A', 'Z'>>;

// Named classes.
alnum_class   : <CharT> type == named_class_entry<CharT, "alnum", and_class_entry<CharT, lower_class<CharT>, upper_class<CharT>, digits_class<CharT>>>;
alpha_class   : <CharT> type == named_class_entry<CharT, "alpha", and_class_entry<CharT, lower_class<CharT>, upper_class<CharT>>>;
ascii_class   : <CharT> type == named_class_entry<CharT, "ascii", range_class_entry<CharT, '\x00', '\x7F'>>;
blank_class   : <CharT> type == named_class_entry<CharT, "blank", list_class_entry<CharT, ' ', '\t'>>;
cntrl_class   : <CharT> type == named_class_entry<CharT, "cntrl", and_class_entry<CharT, range_class_entry<CharT, '\x00', '\x1F'>, single_class_entry<CharT, '\x7F'>>>;
graph_class   : <CharT> type == named_class_entry<CharT, "graph", range_class_entry<CharT, '\x21', '\x7E'>>;
print_class   : <CharT> type == named_class_entry<CharT, "print", range_class_entry<CharT, '\x20', '\x7E'>>;
punct_class   : <CharT> type == named_class_entry<CharT, "punct", list_class_entry<CharT, '[','!','"','#','$','%','&','\'','(',')','*','+',',','-','.','/',':',';','<','=','>','?','@','[','\\',']','^','_','`','{','|','}','~',']'>>;
space_class   : <CharT> type == named_class_entry<CharT, "space", list_class_entry<CharT, ' ', '\t', '\r', '\n', '\v', '\f'>>;
word_class    : <CharT> type == named_class_entry<CharT, "word", and_class_entry<CharT, alnum_class<CharT>, single_class_entry<CharT, '_'>>>;
xdigit_class  : <CharT> type == named_class_entry<CharT, "xdigit", and_class_entry<CharT, range_class_entry<CharT, 'A', 'F'>, range_class_entry<CharT, 'a', 'f'>, digits_class<CharT>>>;

class_matcher_logic: <CharT, negate: bool, List ...> type =
{
    match: <Iter, Other> (cur: Iter, inout ctx, _ : Other) -> match_return<Iter> = {
        if cur != ctx.end && negate != match_any<List...>(cur*) {
            return Other::match(cur + 1, ctx);
        } else {
            return match_return<Iter>(false, ctx.end);
        }
    }

    private match_any: <First, Other ...> (c: CharT) -> bool = {
        r: bool = First::includes(c);

        if !r {
            if constexpr 0 != sizeof...(Other) {
                r = match_any<Other...>(c);
            }
        }

        return r;
    }

    reset_ranges: (inout ctx) = {}
    to_string: () -> bstring<CharT> = {
        r: bstring<CharT> = "[";
        if negate {
            r += "^";
        }
        r += (bstring<CharT>() + ... + List::to_string());
        r += "]";

        return r;
    }
}

escaped_char_matcher_logic: <CharT, C: CharT> type =
{
    this : char_matcher_logic<CharT, C> = ();
    to_string: () "\\(C)$";
}

group_matcher_start_logic: <CharT, group: int> type = {
    match: <Iter, Other> (cur: Iter, inout ctx, _ : Other) -> match_return<Iter> = {
        r := Other::match(cur, ctx);
        if r.matched {
            ctx.set_group_start(group, cur);
        } else {
            ctx.set_group_invalid(group);
        }
        return r;
    }
    reset_ranges: (inout ctx) = { ctx.set_group_invalid(group); }
    to_string: () -> _ = {
        if group != 0 {
            return "(";
        }
        else {
            return "";
        }
    }
}

group_matcher_end_logic: <CharT, group: int> type = {
    match: <Iter, Other> (cur: Iter, inout ctx, _ : Other) -> match_return<Iter> = {
        r := Other::match(cur, ctx);
        if r.matched {
            ctx.set_group_end(group, cur);
        }
        return r;
    }
    reset_ranges: (inout ctx) = {}
    to_string: () -> _ = {
        if group != 0 {
            return ")";
        }
        else {
            return "";
        }
    }
}

group_ref_matcher_logic: <CharT, group: int> type = {
    match: <Iter, Other> (cur: Iter, inout ctx, _ : Other) -> match_return<Iter> = {
        g := ctx.get_group(group);

        while g.start != g.end && cur != ctx.end next (g.start++, cur++) {
            if g.start* != cur* {
                return match_return<Iter>(false, ctx.end);
            }
        }

        return Other::match(cur, ctx);
    }
    reset_ranges: (inout ctx) = {}
    to_string: () -> bstring<CharT> = "\\((group)$)";
}

line_end_matcher_logic: <CharT> type =
{
    match: <Iter, Other> (cur: Iter, inout ctx, _ : Other) -> match_return<Iter> = {
        if cur == ctx.end || cur* == '\n' {
            return Other::match(cur, ctx);
        }
        else {
            return match_return<Iter>(false, ctx.end);
        }

    }
    reset_ranges: (inout ctx) = {}
    to_string: () -> bstring<CharT> = "\\$";
}

line_start_matcher_logic: <CharT> type =
{
    match: <Iter, Other> (cur: Iter, inout ctx, _ : Other) -> match_return<Iter> = {
        if cur == ctx.begin || (cur - 1)* == '\n' {
            return Other::match(cur, ctx);
        }
        else {
            return match_return<Iter>(false, ctx.end);
        }

    }
    reset_ranges: (inout ctx) = {}
    to_string: () -> _ = bstring<CharT>(1, '^');
}

list_matcher_logic: <CharT, List> type =
{
    match: <Iter, Other> (cur: Iter, inout ctx, _ : Other) -> match_return<Iter> = {
        return List::match_combine(cur, ctx, Other());
    }
    reset_ranges: (inout ctx) = { List::reset_ranges(ctx); }
    to_string: () List::to_string();
}

range_matcher_logic: <CharT, M, min_count: int, max_count: int> type = {


    match: <Iter, Other> (cur: Iter, inout ctx, _ : Other)
        match_greedy(0, cur, cur, ctx, Other());

    private is_below_upper_bound: (count: int) -> bool = {
        if -1 == max_count { return true; }
        else { return count < max_count; }
    }

    private is_below_lower_bound: (count: int) -> bool = {
        if -1 == min_count { return false; }
        else { return count < min_count; }
    }

    private is_in_range: (count: int) -> bool = {
        if -1 != min_count && count < min_count { return false; }
        if -1 != max_count && count > max_count { return false; }
        return true;
    }
    private match_greedy: <Iter, Other> (count: int, cur: Iter, last_valid: Iter, inout ctx, _ : Other) -> match_return<Iter> = {
        r:= M::match(cur, ctx, no_match_tail<CharT>());
        if  is_below_upper_bound(count) && r.matched &&
            (is_below_lower_bound(count) || r.pos != cur)
        {
            inner := match_greedy(count + 1, r.pos, cur, ctx, Other());

            if inner.matched {
                return inner;
            }
        }

        // No match from the recursion. Try to match our tail.
        if is_in_range(count) {
            o:= Other::match(cur, ctx);

            if o.matched {
                // Rematch M to set the groups.
                M::reset_ranges(ctx);
                _ = M::match(last_valid, ctx, no_match_tail<CharT>());
            }

            return o;
        }
        else {
            return match_return<Iter>(false, ctx.end);
        }
    }
    reset_ranges: (inout ctx) = { M::reset_ranges(ctx); }
    to_string: () -> bstring<CharT> = {
      r: std::string = M::to_string();

      if min_count == max_count {
        r += "{(min_count)$}";
      }
      else if min_count == -1 {
        r += "{,(max_count)$}";
      }
      else if max_count == -1 {
        r += "{(min_count)$,}";
      }
      else {
        r += "{(min_count)$,(max_count)$}";
      }

      return r;
    }
}

special_range_matcher_logic: <CharT, M, min_count: int, max_count: int, symbol: CharT> type = {
    this: range_matcher_logic<CharT, M, min_count, max_count> = ();
    to_string: () M::to_string() + symbol;
}


regex_parser_state: @struct type = {
    cur_match_list: std::vector<std::string> = ();
    alternate_match_lists: std::vector<std::vector<std::string>> = ();

    start_new_list: (inout this) = {
        new_list: std::vector<std::string> = ();
        std::swap(new_list, cur_match_list);
        _ = alternate_match_lists.insert(alternate_match_lists.begin(), new_list);
    }

    swap: (inout this, inout t: regex_parser_state) = {
        std::swap(cur_match_list, t.cur_match_list);
        std::swap(alternate_match_lists, t.alternate_match_lists);
    }

    add: (inout this, matcher: _) = {
        cur_match_list.push_back(matcher);
    }

    wrap_last: (inout this, matcher) = {
        last: std::string = cur_match_list.back();
        cur_match_list.back() = matcher(last);
        _ = matcher;
        _ = last;
    }

    empty: (this) -> bool = cur_match_list.empty();
}


regex_parser: <Error_out> type = {

    regex: std::string_view;
    cur_state: regex_parser_state = ();
    pos: size_t = 0;

    named_groups: int = 1; // Global capture group.

    error_out: Error_out;

    supported_classes: std::vector<std::string> = ("alnum", "alpha", "ascii", "blank", "cntrl", "digits", "graph", "lower", "print", "punct", "space", "upper", "word", "xdigit");

    operator=: (out this, r: std::string_view, e: Error_out) = {
        this.regex = r;
        this.error_out = e;
    }

    new_state: (inout this) -> regex_parser_state = {
        old_state: regex_parser_state = ();
        old_state.swap(cur_state);
        return old_state;
    }

    restore_state: (inout this, old_state: regex_parser_state) = {
        cur_state = old_state;
    }

    error:(inout this, message: std::string) = {
        error_out("Error during parsing of regex '(regex)$' at position '(pos)$': (message)$");
    }

    is_alternative: (inout this, c: char) -> bool = {
        if c != '|' { return false; }

        cur_state.start_new_list();
        return true;
    }

    is_anchor: (inout this, c: char) -> bool = {
        r := false;
        if c == '^' {
            cur_state.add("::cpp2::regex::line_start_matcher_logic<char>");
            r = true;
        }
        else if c == '$' {
            cur_state.add("::cpp2::regex::line_end_matcher_logic<char>");
            r = true;
        }

        return r;
    }

    is_any: (inout this, c: char) -> bool = {
        if c == '.' {
            cur_state.add("::cpp2::regex::any_matcher_logic<char>");
            return true;
        }
        return false;
    }

    is_class: (inout this, c: char) -> bool = {
        if c != '[' { return false; }

        classes: std::vector<std::string> = ();

        c_cur: char = regex[pos];
        next_item:= :() -> bool = {
            pos&$* += 1;
            if pos&$* >= regex$.size() { return false; }

            c_cur&$* = regex$[pos&$*];
            return true;

        };

        peek_item:= :() -> char = {
            if (pos$ + 1) >= regex$.size() { return '\0'; }
            else { return regex[pos + 1]; }
        };

        negate:= false;

        first:= true;
        range:= false;
        while next_item() & (c_cur != ']' || first) {
            if c_cur == '^' {
                negate = true;
                continue; // Skip rest of the loop. Also the first update.
            }
            if c_cur == '[' && peek_item() == ':' {
                // We have a character class.
                pos += 2; // Skip ':]'

                end := regex.find(":]", pos);
                if end == std::string::npos { error_out("Could not find end of character class."); }

                name := regex.substr(pos, end - pos);
                if supported_classes.end() == std::find(supported_classes.begin(), supported_classes.end(), name) {
                    error_out("Unsupported character class. Supported ones are: (join(supported_classes))$");
                }

                classes.push_back("[:(name)$:]");

                end += 1; // Skip ':' pointing to the ending ']'.
                pos = end;

            }
            else if c_cur == '-' {
                if first { // Literal if first entry.
                    classes.push_back("(c_cur)$");
                } else {
                    range = true;
                }
            }
            else {
                if range { // Modify last element to be a range.
                    classes.back() += "-(c_cur)$";
                    range = false;
                }
                else {
                    classes.push_back("(c_cur)$");
                }
            }

            first = false;
        }

        _ = next_item; // TODO: Use in while is not recognized.

        if c_cur != ']' {
            error_out("Error end of character class definition before terminating ']'.");
        }

        if range { // If '-' is last entry treat it as a literal char.
            classes.push_back("-");
        }

        for classes do (inout cur) {
            if cur.starts_with("[:") {
                name := cur.substr(2, cur.size() - 4);
                cur = "::cpp2::regex::(name)$_class<char>";
            }
            else if 1 != cur.size() {
                cur = "::cpp2::regex::range_class_entry<char, '(cur[0])$', '(cur[2])$'>";
            }
            else {
                cur = "::cpp2::regex::single_class_entry<char, '(cur)$'>";
            }
        }

        inner := join(classes);
        cur_state.add("::cpp2::regex::class_matcher_logic<char, (negate)$, (inner)$>");
        return true;
    }

    is_escape: (inout this, c: char) -> bool = {
        if c != '\\' { return false; }

        pos += 1;

        if pos >= regex.size() { error("Escape without a following character."); }

        c_next: char = regex[pos];

        if '1' <= c_next <= '9' {
            group_id: int = c_next - '0';

            if group_id >= named_groups { error("Group reference is used before the group is declared."); }

            cur_state.add("::cpp2::regex::group_ref_matcher_logic<char, (group_id)$>");
        }
        else if std::string::npos != std::string("^.[]$()*{}?+|").find(c_next) {
            if c_next == '$' {
                // TODO: Provide proper escape for cppfront capture .
                cur_state.add("::cpp2::regex::line_end_matcher_logic<char>");
            }
            else {
                cur_state.add("::cpp2::regex::escaped_char_matcher_logic<char, '(c_next)$'>");
            }
        }
        else if '\\' == c_next {
            cur_state.add("::cpp2::regex::escaped_char_matcher_logic<char, '\\\\'>");
        }
        else {
            error("Unknown escape.");
        }

        return true;
    }

    is_group: (inout this, c: char) -> bool = {
        if c != '(' { return false; }

        group_number := named_groups;
        named_groups += 1;

        old_state: _ = new_state();

        pos += 1;  // Skip the '('
        parse_until(')');

        inner:= create_matcher_from_state();
        restore_state(old_state);

        v: std::vector<std::string> = (
            "::cpp2::regex::group_matcher_start_logic<char, (group_number)$>",
            inner,
            "::cpp2::regex::group_matcher_end_logic<char, (group_number)$>");
        cur_state.add(create_matcher_from_list(v));

        return true;
    }

    is_handle_special: (inout this, c: char) -> bool = {
        if c == '\'' {
            cur_state.add("::cpp2::regex::char_matcher_logic<char, '\\(c)$'>");
            return true;
        }

        return false;
    }

    is_range: (inout this, c: char) -> bool = {

        if c != '{' { return false; }
        if cur_state.empty() { error("'{' without previous element."); }

        end: size_t = regex.find("}", pos);
        if end == std::string::npos { error("Missing closing bracket."); }

        inner: std::string = trim_copy(regex.substr(pos + 1, end - pos - 1));
        if inner.empty() { error("Empty range specifier. Either '{n}', '{n,}', '{,m}' '{n,m}'"); }

        min_count: std::string = "-1";
        max_count: std::string = "-1";

        sep: size_t = inner.find(",");
        if sep == std::string::npos {
            min_count = inner;
            max_count = inner;
        }
        else {
            inner_first: std::string = trim_copy(inner.substr(0, sep));
            inner_last: std::string = trim_copy(inner.substr(sep + 1));

            if (inner_first.empty() && inner_last.empty()) {
                error("Empty range specifier. Either '{n}', '{n,}', '{,m}' '{n,m}'");
            }

            if !inner_first.empty() {
                min_count = inner_first;
            }
            if !inner_last.empty() {
                max_count = inner_last;
            }
        }

        // TODO: Check 0 <=n <= m
        cur_state.wrap_last( :(inner) -> _ == "::cpp2::regex::range_matcher_logic<char, (inner)$, (min_count$)$, (max_count$)$>");
        pos = end;

        return true;
    }

    is_special_range: (inout this, c: char) -> bool = {
        min_range: std::string = "0";
        max_range: std::string = "-1";
        if c == '*' {
            min_range = "0";
        }
        else if c == '+' {
            min_range = "1";
        }
        else if c == '?' {
            min_range = "0";
            max_range = "1";
        }
        else {
            return false;
        }

        if cur_state.empty() {
            error("'(c)$' without previous element.");
        }

        cur_state.wrap_last(:(inner) -> _ == "::cpp2::regex::special_range_matcher_logic<char, (inner)$, (min_range$)$, (max_range$)$, '(c$)$'>");
        return true;
    }

    parse_until:(inout this, term: char) = {
        while pos != regex.size() next pos += 1 {
            c: char = regex[pos];

            if c == term { return; }

            if is_alternative(c) { continue; }
            if is_any(c) { continue; }
            if is_class(c) { continue; }
            if is_escape(c) { continue; }
            if is_anchor(c) { continue; }
            if is_group(c) { continue; }
            if is_handle_special(c) { continue; }
            if is_range(c) { continue; }
            if is_special_range(c) { continue; }

            // No special char push a character match
            cur_state.add("::cpp2::regex::char_matcher_logic<char, '(c)$'>");
        }
    }

    private join: (list: std::vector<std::string>) -> std::string = {
        r: std::string = "";

        seperator: std::string = "";
        for list do (cur) {
            r += seperator + cur;
            seperator = ", ";
        }

        return r;
    }

    create_matcher_from_list: (inout this, list)
            "::cpp2::regex::list_matcher_logic<char, ::cpp2::regex::match_tail<char, (join(list))$>>"

    create_matcher_from_state: (inout this) -> std::string = {
        if 0 == cur_state.alternate_match_lists.size() { return create_matcher_from_list(cur_state.cur_match_list); }

        matcher: std::string = "::cpp2::regex::alternative_matcher_logic<char, ";

        seperator: std::string = "";
        add := :(list) = {
            matcher&$* += seperator&$* + create_matcher_from_list(list);
            seperator&$* = ", ";
        };

        cur := cur_state.alternate_match_lists.rbegin();
        while cur != cur_state.alternate_match_lists.rend() next( cur++ ) {
            add(cur*);
        }
        if 0 != cur_state.cur_match_list.size() { add(cur_state.cur_match_list); }
        matcher += ">";

        return matcher;
    }

    parse:(inout this) -> std::string = {

        parse_until('\0');

        inner := create_matcher_from_state();
        inner = "::cpp2::regex::group_matcher_start_logic<char, 0>, (inner)$, ::cpp2::regex::group_matcher_end_logic<char, 0>";
        return "::cpp2::regex::regular_expression<char, (named_groups)$, ::cpp2::regex::match_tail<char, (inner)$>>";
    }

}

generate_template: <Err> (regex: std::string_view, err: Err) -> std::string = {
    parser: regex_parser<Err> = (regex, err);
    r := parser.parse();
    _ = parser;
    return r;
}

}
}
