Running perl_tests:
0_y: OK regex: abc parsed_regex: abc str: abc result_expr: $& expected_results abc
1_y: OK regex: abc parsed_regex: abc str: abc result_expr: $-[0] expected_results 0
2_y: OK regex: abc parsed_regex: abc str: abc result_expr: $+[0] expected_results 3
3_n: OK regex: abc parsed_regex: abc str: xbc result_expr: - expected_results -
4_n: OK regex: abc parsed_regex: abc str: axc result_expr: - expected_results -
5_n: OK regex: abc parsed_regex: abc str: abx result_expr: - expected_results -
6_y: OK regex: abc parsed_regex: abc str: xabcy result_expr: $& expected_results abc
7_y: OK regex: abc parsed_regex: abc str: xabcy result_expr: $-[0] expected_results 1
8_y: OK regex: abc parsed_regex: abc str: xabcy result_expr: $+[0] expected_results 4
9_y: OK regex: abc parsed_regex: abc str: ababc result_expr: $& expected_results abc
10_y: OK regex: abc parsed_regex: abc str: ababc result_expr: $-[0] expected_results 2
11_y: OK regex: abc parsed_regex: abc str: ababc result_expr: $+[0] expected_results 5
12_y: OK regex: ab*c parsed_regex: ab*c str: abc result_expr: $& expected_results abc
13_y: OK regex: ab*c parsed_regex: ab*c str: abc result_expr: $-[0] expected_results 0
14_y: OK regex: ab*c parsed_regex: ab*c str: abc result_expr: $+[0] expected_results 3
15_y: OK regex: ab*bc parsed_regex: ab*bc str: abc result_expr: $& expected_results abc
16_y: OK regex: ab*bc parsed_regex: ab*bc str: abc result_expr: $-[0] expected_results 0
17_y: OK regex: ab*bc parsed_regex: ab*bc str: abc result_expr: $+[0] expected_results 3
18_y: OK regex: ab*bc parsed_regex: ab*bc str: abbc result_expr: $& expected_results abbc
19_y: OK regex: ab*bc parsed_regex: ab*bc str: abbc result_expr: $-[0] expected_results 0
20_y: OK regex: ab*bc parsed_regex: ab*bc str: abbc result_expr: $+[0] expected_results 4
21_y: OK regex: ab*bc parsed_regex: ab*bc str: abbbbc result_expr: $& expected_results abbbbc
22_y: OK regex: ab*bc parsed_regex: ab*bc str: abbbbc result_expr: $-[0] expected_results 0
23_y: OK regex: ab*bc parsed_regex: ab*bc str: abbbbc result_expr: $+[0] expected_results 6
24_y: OK regex: .{1} parsed_regex: .{1} str: abbbbc result_expr: $& expected_results a
25_y: OK regex: .{1} parsed_regex: .{1} str: abbbbc result_expr: $-[0] expected_results 0
26_y: OK regex: .{1} parsed_regex: .{1} str: abbbbc result_expr: $+[0] expected_results 1
27_y: OK regex: .{3,4} parsed_regex: .{3,4} str: abbbbc result_expr: $& expected_results abbb
28_y: OK regex: .{3,4} parsed_regex: .{3,4} str: abbbbc result_expr: $-[0] expected_results 0
29_y: OK regex: .{3,4} parsed_regex: .{3,4} str: abbbbc result_expr: $+[0] expected_results 4
30_y: OK regex: \\N{1} parsed_regex: \\N{1} str: abbbbc result_expr: $& expected_results a
31_y: OK regex: \\N{1} parsed_regex: \\N{1} str: abbbbc result_expr: $-[0] expected_results 0
32_y: OK regex: \\N{1} parsed_regex: \\N{1} str: abbbbc result_expr: $+[0] expected_results 1
33_y: OK regex: \\N{3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $& expected_results abbb
34_y: OK regex: \\N{3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $-[0] expected_results 0
35_y: OK regex: \\N{3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $+[0] expected_results 4
36_y: OK Warning: Parsed regex does not match. regex: \\N{ 3 , 4 } parsed_regex: \\N{3,4} str: abbbbc result_expr: $+[0] expected_results 4
37_y: OK regex: ab{0,}bc parsed_regex: ab{0,}bc str: abbbbc result_expr: $& expected_results abbbbc
38_y: OK regex: ab{0,}bc parsed_regex: ab{0,}bc str: abbbbc result_expr: $-[0] expected_results 0
39_y: OK regex: ab{0,}bc parsed_regex: ab{0,}bc str: abbbbc result_expr: $+[0] expected_results 6
40_y: OK regex: ab+bc parsed_regex: ab+bc str: abbc result_expr: $& expected_results abbc
41_y: OK regex: ab+bc parsed_regex: ab+bc str: abbc result_expr: $-[0] expected_results 0
42_y: OK regex: ab+bc parsed_regex: ab+bc str: abbc result_expr: $+[0] expected_results 4
43_n: OK regex: ab+bc parsed_regex: ab+bc str: abc result_expr: - expected_results -
44_n: OK regex: ab+bc parsed_regex: ab+bc str: abq result_expr: - expected_results -
45_n: OK regex: ab{1,}bc parsed_regex: ab{1,}bc str: abq result_expr: - expected_results -
46_y: OK regex: ab+bc parsed_regex: ab+bc str: abbbbc result_expr: $& expected_results abbbbc
47_y: OK regex: ab+bc parsed_regex: ab+bc str: abbbbc result_expr: $-[0] expected_results 0
48_y: OK regex: ab+bc parsed_regex: ab+bc str: abbbbc result_expr: $+[0] expected_results 6
49_y: OK regex: ab{1,}bc parsed_regex: ab{1,}bc str: abbbbc result_expr: $& expected_results abbbbc
50_y: OK regex: ab{1,}bc parsed_regex: ab{1,}bc str: abbbbc result_expr: $-[0] expected_results 0
51_y: OK regex: ab{1,}bc parsed_regex: ab{1,}bc str: abbbbc result_expr: $+[0] expected_results 6
52_y: OK regex: ab{1,3}bc parsed_regex: ab{1,3}bc str: abbbbc result_expr: $& expected_results abbbbc
53_y: OK regex: ab{1,3}bc parsed_regex: ab{1,3}bc str: abbbbc result_expr: $-[0] expected_results 0
54_y: OK regex: ab{1,3}bc parsed_regex: ab{1,3}bc str: abbbbc result_expr: $+[0] expected_results 6
55_y: OK regex: ab{3,4}bc parsed_regex: ab{3,4}bc str: abbbbc result_expr: $& expected_results abbbbc
56_y: OK regex: ab{3,4}bc parsed_regex: ab{3,4}bc str: abbbbc result_expr: $-[0] expected_results 0
57_y: OK regex: ab{3,4}bc parsed_regex: ab{3,4}bc str: abbbbc result_expr: $+[0] expected_results 6
58_n: OK regex: ab{4,5}bc parsed_regex: ab{4,5}bc str: abbbbc result_expr: - expected_results -
59_y: OK regex: ab?bc parsed_regex: ab?bc str: abbc result_expr: $& expected_results abbc
60_y: OK regex: ab?bc parsed_regex: ab?bc str: abc result_expr: $& expected_results abc
61_y: OK regex: ab{0,1}bc parsed_regex: ab{0,1}bc str: abc result_expr: $& expected_results abc
62_n: OK regex: ab?bc parsed_regex: ab?bc str: abbbbc result_expr: - expected_results -
63_y: OK regex: ab?c parsed_regex: ab?c str: abc result_expr: $& expected_results abc
64_y: OK regex: ab{0,1}c parsed_regex: ab{0,1}c str: abc result_expr: $& expected_results abc
65_y: OK regex: ^abc\$ parsed_regex: ^abc\$ str: abc result_expr: $& expected_results abc
66_n: OK regex: ^abc\$ parsed_regex: ^abc\$ str: abcc result_expr: - expected_results -
67_y: OK regex: ^abc parsed_regex: ^abc str: abcc result_expr: $& expected_results abc
68_n: OK regex: ^abc\$ parsed_regex: ^abc\$ str: aabc result_expr: - expected_results -
69_y: OK regex: abc\$ parsed_regex: abc\$ str: aabc result_expr: $& expected_results abc
70_n: OK regex: abc\$ parsed_regex: abc\$ str: aabcd result_expr: - expected_results -
71_y: OK regex: ^ parsed_regex: ^ str: abc result_expr: $& expected_results 
72_y: OK regex: \$ parsed_regex: \$ str: abc result_expr: $& expected_results 
73_y: OK regex: a.c parsed_regex: a.c str: abc result_expr: $& expected_results abc
74_y: OK regex: a.c parsed_regex: a.c str: axc result_expr: $& expected_results axc
75_y: OK regex: a\\Nc parsed_regex: a\\Nc str: abc result_expr: $& expected_results abc
76_y: OK regex: a.*c parsed_regex: a.*c str: axyzc result_expr: $& expected_results axyzc
77_y: OK regex: a\\N*c parsed_regex: a\\N*c str: axyzc result_expr: $& expected_results axyzc
78_n: OK regex: a.*c parsed_regex: a.*c str: axyzd result_expr: - expected_results -
79_n: OK regex: a\\N*c parsed_regex: a\\N*c str: axyzd result_expr: - expected_results -
80_n: OK regex: a[bc]d parsed_regex: a[bc]d str: abc result_expr: - expected_results -
81_y: OK regex: a[bc]d parsed_regex: a[bc]d str: abd result_expr: $& expected_results abd
82_y: OK regex: a[b]d parsed_regex: a[b]d str: abd result_expr: $& expected_results abd
83_y: OK regex: [a][b][d] parsed_regex: [a][b][d] str: abd result_expr: $& expected_results abd
84_y: OK regex: .[b]. parsed_regex: .[b]. str: abd result_expr: $& expected_results abd
85_n: OK regex: .[b]. parsed_regex: .[b]. str: aBd result_expr: - expected_results -
86_n: OK regex: a[b-d]e parsed_regex: a[b-d]e str: abd result_expr: - expected_results -
87_y: OK regex: a[b-d]e parsed_regex: a[b-d]e str: ace result_expr: $& expected_results ace
88_y: OK regex: a[b-d] parsed_regex: a[b-d] str: aac result_expr: $& expected_results ac
89_y: OK regex: a[-b] parsed_regex: a[-b] str: a- result_expr: $& expected_results a-
90_y: OK regex: a[b-] parsed_regex: a[b-] str: a- result_expr: $& expected_results a-
91_y: OK regex: a] parsed_regex: a] str: a] result_expr: $& expected_results a]
92_y: OK regex: a[]]b parsed_regex: a[]]b str: a]b result_expr: $& expected_results a]b
93_y: OK regex: a[^bc]d parsed_regex: a[^bc]d str: aed result_expr: $& expected_results aed
94_n: OK regex: a[^bc]d parsed_regex: a[^bc]d str: abd result_expr: - expected_results -
95_y: OK regex: a[^-b]c parsed_regex: a[^-b]c str: adc result_expr: $& expected_results adc
96_n: OK regex: a[^-b]c parsed_regex: a[^-b]c str: a-c result_expr: - expected_results -
97_n: OK regex: a[^]b]c parsed_regex: a[^]b]c str: a]c result_expr: - expected_results -
98_y: OK regex: a[^]b]c parsed_regex: a[^]b]c str: adc result_expr: $& expected_results adc
99_y: OK regex: \ba\b parsed_regex: \ba\b str: a- result_expr: - expected_results -
100_y: OK regex: \ba\b parsed_regex: \ba\b str: -a result_expr: - expected_results -
101_y: OK regex: \ba\b parsed_regex: \ba\b str: -a- result_expr: - expected_results -
102_n: OK regex: \by\b parsed_regex: \by\b str: xy result_expr: - expected_results -
103_n: OK regex: \by\b parsed_regex: \by\b str: yz result_expr: - expected_results -
104_n: OK regex: \by\b parsed_regex: \by\b str: xyz result_expr: - expected_results -
105_n: OK regex: \Ba\B parsed_regex: \Ba\B str: a- result_expr: - expected_results -
106_n: OK regex: \Ba\B parsed_regex: \Ba\B str: -a result_expr: - expected_results -
107_n: OK regex: \Ba\B parsed_regex: \Ba\B str: -a- result_expr: - expected_results -
108_y: OK regex: \By\b parsed_regex: \By\b str: xy result_expr: - expected_results -
109_y: OK regex: \By\b parsed_regex: \By\b str: xy result_expr: $-[0] expected_results 1
110_y: OK regex: \By\b parsed_regex: \By\b str: xy result_expr: $+[0] expected_results 2
111_y: OK regex: \By\b parsed_regex: \By\b str: xy result_expr: - expected_results -
112_y: OK regex: \by\B parsed_regex: \by\B str: yz result_expr: - expected_results -
113_y: OK regex: \By\B parsed_regex: \By\B str: xyz result_expr: - expected_results -
114_n: OK regex: \b parsed_regex: \b str:  result_expr: - expected_results -
115_y: OK regex: \B parsed_regex: \B str:  result_expr: - expected_results -
116_y: OK regex: \w parsed_regex: \w str: a result_expr: - expected_results -
117_n: OK regex: \w parsed_regex: \w str: - result_expr: - expected_results -
118_n: OK regex: \W parsed_regex: \W str: a result_expr: - expected_results -
119_y: OK regex: \W parsed_regex: \W str: - result_expr: - expected_results -
120_y: OK regex: a\sb parsed_regex: a\sb str: a b result_expr: - expected_results -
121_n: OK regex: a\sb parsed_regex: a\sb str: a-b result_expr: - expected_results -
122_n: OK regex: a\Sb parsed_regex: a\Sb str: a b result_expr: - expected_results -
123_y: OK regex: a\Sb parsed_regex: a\Sb str: a-b result_expr: - expected_results -
124_y: OK regex: \d parsed_regex: \d str: 1 result_expr: - expected_results -
125_n: OK regex: \d parsed_regex: \d str: - result_expr: - expected_results -
126_n: OK regex: \D parsed_regex: \D str: 1 result_expr: - expected_results -
127_y: OK regex: \D parsed_regex: \D str: - result_expr: - expected_results -
128_y: OK regex: [\w] parsed_regex: [\w] str: a result_expr: - expected_results -
129_n: OK regex: [\w] parsed_regex: [\w] str: - result_expr: - expected_results -
130_n: OK regex: [\W] parsed_regex: [\W] str: a result_expr: - expected_results -
131_y: OK regex: [\W] parsed_regex: [\W] str: - result_expr: - expected_results -
132_y: OK regex: a[\s]b parsed_regex: a[\s]b str: a b result_expr: - expected_results -
133_n: OK regex: a[\s]b parsed_regex: a[\s]b str: a-b result_expr: - expected_results -
134_n: OK regex: a[\S]b parsed_regex: a[\S]b str: a b result_expr: - expected_results -
135_y: OK regex: a[\S]b parsed_regex: a[\S]b str: a-b result_expr: - expected_results -
136_y: OK regex: [\d] parsed_regex: [\d] str: 1 result_expr: - expected_results -
137_n: OK regex: [\d] parsed_regex: [\d] str: - result_expr: - expected_results -
138_n: OK regex: [\D] parsed_regex: [\D] str: 1 result_expr: - expected_results -
139_y: OK regex: [\D] parsed_regex: [\D] str: - result_expr: - expected_results -
140_y: OK regex: ab|cd parsed_regex: ab|cd str: abc result_expr: $& expected_results ab
141_y: OK regex: ab|cd parsed_regex: ab|cd str: abcd result_expr: $& expected_results ab
142_y: OK regex: ()ef parsed_regex: ()ef str: def result_expr: $&-$1 expected_results ef-
143_y: OK regex: ()ef parsed_regex: ()ef str: def result_expr: $-[0] expected_results 1
144_y: OK regex: ()ef parsed_regex: ()ef str: def result_expr: $+[0] expected_results 3
145_y: OK regex: ()ef parsed_regex: ()ef str: def result_expr: $-[1] expected_results 1
146_y: OK regex: ()ef parsed_regex: ()ef str: def result_expr: $+[1] expected_results 1
147_n: OK regex: \$b parsed_regex: \$b str: b result_expr: - expected_results -
148_y: OK regex: a\(b parsed_regex: a\(b str: a(b result_expr: $&-$1 expected_results a(b-
149_y: OK regex: a\(*b parsed_regex: a\(*b str: ab result_expr: $& expected_results ab
150_y: OK regex: a\(*b parsed_regex: a\(*b str: a((b result_expr: $& expected_results a((b
151_y: OK regex: a\\b parsed_regex: a\\b str: a\b result_expr: $& expected_results a\b
152_y: OK regex: ((a)) parsed_regex: ((a)) str: abc result_expr: $&-$1-$2 expected_results a-a-a
153_y: OK regex: ((a)) parsed_regex: ((a)) str: abc result_expr: $-[0]-$-[1]-$-[2] expected_results 0-0-0
154_y: OK regex: ((a)) parsed_regex: ((a)) str: abc result_expr: $+[0]-$+[1]-$+[2] expected_results 1-1-1
155_y: OK regex: (foo)(\g-2) parsed_regex: (foo)(\g-2) str: foofoo result_expr: $1-$2 expected_results foo-foo
156_y: OK regex: (foo)(\g-2)(foo)(\g-2) parsed_regex: (foo)(\g-2)(foo)(\g-2) str: foofoofoofoo result_expr: $1-$2-$3-$4 expected_results foo-foo-foo-foo
157_y: OK regex: (([abc]+) \g-1)(([abc]+) \g{-1}) parsed_regex: (([abc]+) \g-1)(([abc]+) \g{-1}) str: abc abccba cba result_expr: $2-$4 expected_results abc-cba
158_y: OK regex: (a)(b)(c)\g1\g2\g3 parsed_regex: (a)(b)(c)\g1\g2\g3 str: abcabc result_expr: $1$2$3 expected_results abc
159_y: OK regex: abc parsed_regex: abc str: ABC result_expr: $& expected_results ABC
160_n: OK regex: abc parsed_regex: abc str: XBC result_expr: - expected_results -
161_n: OK regex: abc parsed_regex: abc str: AXC result_expr: - expected_results -
162_n: OK regex: abc parsed_regex: abc str: ABX result_expr: - expected_results -
163_y: OK regex: abc parsed_regex: abc str: XABCY result_expr: $& expected_results ABC
164_y: OK regex: abc parsed_regex: abc str: ABABC result_expr: $& expected_results ABC
165_y: OK regex: ab*c parsed_regex: ab*c str: ABC result_expr: $& expected_results ABC
166_y: OK regex: ab*bc parsed_regex: ab*bc str: ABC result_expr: $& expected_results ABC
167_y: OK regex: ab*bc parsed_regex: ab*bc str: ABBC result_expr: $& expected_results ABBC
168_y: OK regex: ab*?bc parsed_regex: ab*?bc str: ABBBBC result_expr: $& expected_results ABBBBC
169_y: Failure: Regex should apply. regex: ab{0,}?bc parsed_regex: ab{0,}?bc str: ABBBBC result_expr: $& expected_results ABBBBC
170_y: OK regex: ab+?bc parsed_regex: ab+?bc str: ABBC result_expr: $& expected_results ABBC
171_n: OK regex: ab+bc parsed_regex: ab+bc str: ABC result_expr: - expected_results -
172_n: OK regex: ab+bc parsed_regex: ab+bc str: ABQ result_expr: - expected_results -
173_n: OK regex: ab{1,}bc parsed_regex: ab{1,}bc str: ABQ result_expr: - expected_results -
174_y: OK regex: ab+bc parsed_regex: ab+bc str: ABBBBC result_expr: $& expected_results ABBBBC
175_y: Failure: Regex should apply. regex: ab{1,}?bc parsed_regex: ab{1,}?bc str: ABBBBC result_expr: $& expected_results ABBBBC
176_y: OK regex: ab{1,3}?bc parsed_regex: ab{1,3}?bc str: ABBBBC result_expr: $& expected_results ABBBBC
177_y: Failure: Regex should apply. regex: ab{3,4}?bc parsed_regex: ab{3,4}?bc str: ABBBBC result_expr: $& expected_results ABBBBC
178_n: OK regex: ab{4,5}?bc parsed_regex: ab{4,5}?bc str: ABBBBC result_expr: - expected_results -
179_y: OK regex: ab??bc parsed_regex: ab??bc str: ABBC result_expr: $& expected_results ABBC
180_y: OK regex: ab??bc parsed_regex: ab??bc str: ABC result_expr: $& expected_results ABC
181_y: OK regex: ab{0,1}?bc parsed_regex: ab{0,1}?bc str: ABC result_expr: $& expected_results ABC
182_n: OK regex: ab??bc parsed_regex: ab??bc str: ABBBBC result_expr: - expected_results -
183_y: OK regex: ab??c parsed_regex: ab??c str: ABC result_expr: $& expected_results ABC
184_y: OK regex: ab{0,1}?c parsed_regex: ab{0,1}?c str: ABC result_expr: $& expected_results ABC
185_y: OK regex: ^abc\$ parsed_regex: ^abc\$ str: ABC result_expr: $& expected_results ABC
186_n: OK regex: ^abc\$ parsed_regex: ^abc\$ str: ABCC result_expr: - expected_results -
187_y: OK regex: ^abc parsed_regex: ^abc str: ABCC result_expr: $& expected_results ABC
188_n: OK regex: ^abc\$ parsed_regex: ^abc\$ str: AABC result_expr: - expected_results -
189_y: OK regex: abc\$ parsed_regex: abc\$ str: AABC result_expr: $& expected_results ABC
190_y: OK regex: ^ parsed_regex: ^ str: ABC result_expr: $& expected_results 
191_y: OK regex: \$ parsed_regex: \$ str: ABC result_expr: $& expected_results 
192_y: OK regex: a.c parsed_regex: a.c str: ABC result_expr: $& expected_results ABC
193_y: OK regex: a.c parsed_regex: a.c str: AXC result_expr: $& expected_results AXC
194_y: OK regex: a\\Nc parsed_regex: a\\Nc str: ABC result_expr: $& expected_results ABC
195_y: OK regex: a.*?c parsed_regex: a.*?c str: AXYZC result_expr: $& expected_results AXYZC
196_n: OK regex: a.*c parsed_regex: a.*c str: AXYZD result_expr: - expected_results -
197_n: OK regex: a[bc]d parsed_regex: a[bc]d str: ABC result_expr: - expected_results -
198_y: OK regex: a[bc]d parsed_regex: a[bc]d str: ABD result_expr: $& expected_results ABD
199_n: OK regex: a[b-d]e parsed_regex: a[b-d]e str: ABD result_expr: - expected_results -
200_y: OK regex: a[b-d]e parsed_regex: a[b-d]e str: ACE result_expr: $& expected_results ACE
201_y: OK regex: a[b-d] parsed_regex: a[b-d] str: AAC result_expr: $& expected_results AC
202_y: OK regex: a[-b] parsed_regex: a[-b] str: A- result_expr: $& expected_results A-
203_y: OK regex: a[b-] parsed_regex: a[b-] str: A- result_expr: $& expected_results A-
204_y: OK regex: a] parsed_regex: a] str: A] result_expr: $& expected_results A]
205_y: OK regex: a[]]b parsed_regex: a[]]b str: A]B result_expr: $& expected_results A]B
206_y: OK regex: a[^bc]d parsed_regex: a[^bc]d str: AED result_expr: $& expected_results AED
207_n: OK regex: a[^bc]d parsed_regex: a[^bc]d str: ABD result_expr: - expected_results -
208_y: OK regex: a[^-b]c parsed_regex: a[^-b]c str: ADC result_expr: $& expected_results ADC
209_n: OK regex: a[^-b]c parsed_regex: a[^-b]c str: A-C result_expr: - expected_results -
210_n: OK regex: a[^]b]c parsed_regex: a[^]b]c str: A]C result_expr: - expected_results -
211_y: OK regex: a[^]b]c parsed_regex: a[^]b]c str: ADC result_expr: $& expected_results ADC
212_y: OK regex: ab|cd parsed_regex: ab|cd str: ABC result_expr: $& expected_results AB
213_y: OK regex: ab|cd parsed_regex: ab|cd str: ABCD result_expr: $& expected_results AB
214_y: OK regex: ()ef parsed_regex: ()ef str: DEF result_expr: $&-$1 expected_results EF-
215_n: OK regex: \$b parsed_regex: \$b str: B result_expr: - expected_results -
216_y: OK regex: a\(b parsed_regex: a\(b str: A(B result_expr: $&-$1 expected_results A(B-
217_y: OK regex: a\(*b parsed_regex: a\(*b str: AB result_expr: $& expected_results AB
218_y: OK regex: a\(*b parsed_regex: a\(*b str: A((B result_expr: $& expected_results A((B
219_y: OK regex: a\\b parsed_regex: a\\b str: A\B result_expr: $& expected_results A\B
220_y: OK regex: ((a)) parsed_regex: ((a)) str: ABC result_expr: $&-$1-$2 expected_results A-A-A
221_y: OK regex: (a)b(c) parsed_regex: (a)b(c) str: ABC result_expr: $&-$1-$2 expected_results ABC-A-C
222_y: OK regex: a+b+c parsed_regex: a+b+c str: AABBABC result_expr: $& expected_results ABC
223_y: OK regex: a{1,}b{1,}c parsed_regex: a{1,}b{1,}c str: AABBABC result_expr: $& expected_results ABC
224_y: OK regex: a.+?c parsed_regex: a.+?c str: ABCABC result_expr: $& expected_results ABC
225_y: OK regex: a.*?c parsed_regex: a.*?c str: ABCABC result_expr: $& expected_results ABC
226_y: Failure: Regex should apply. regex: a.{0,5}?c parsed_regex: a.{0,5}?c str: ABCABC result_expr: $& expected_results ABC
227_y: OK regex: (a+|b)* parsed_regex: (a+|b)* str: AB result_expr: $&-$1 expected_results AB-B
228_y: OK regex: (a+|b){0,} parsed_regex: (a+|b){0,} str: AB result_expr: $&-$1 expected_results AB-B
229_y: OK regex: (a+|b)+ parsed_regex: (a+|b)+ str: AB result_expr: $&-$1 expected_results AB-B
230_y: OK regex: (a+|b){1,} parsed_regex: (a+|b){1,} str: AB result_expr: $&-$1 expected_results AB-B
231_y: OK regex: (a+|b)? parsed_regex: (a+|b)? str: AB result_expr: $&-$1 expected_results A-A
232_y: OK regex: (a+|b){0,1} parsed_regex: (a+|b){0,1} str: AB result_expr: $&-$1 expected_results A-A
233_y: Failure: Result is wrong. (is: A-A) regex: (a+|b){0,1}? parsed_regex: (a+|b){0,1}? str: AB result_expr: $&-$1 expected_results -
234_y: OK regex: [^ab]* parsed_regex: [^ab]* str: CDE result_expr: $& expected_results CDE
235_n: OK regex: abc parsed_regex: abc str:  result_expr: - expected_results -
236_y: OK regex: a* parsed_regex: a* str:  result_expr: $& expected_results 
237_y: OK regex: ([abc])*d parsed_regex: ([abc])*d str: ABBBCD result_expr: $&-$1 expected_results ABBBCD-C
238_y: OK regex: ([abc])*bcd parsed_regex: ([abc])*bcd str: ABCD result_expr: $&-$1 expected_results ABCD-A
239_y: OK regex: a|b|c|d|e parsed_regex: a|b|c|d|e str: E result_expr: $& expected_results E
240_y: OK regex: (a|b|c|d|e)f parsed_regex: (a|b|c|d|e)f str: EF result_expr: $&-$1 expected_results EF-E
241_y: OK regex: abcd*efg parsed_regex: abcd*efg str: ABCDEFG result_expr: $& expected_results ABCDEFG
242_y: OK regex: ab* parsed_regex: ab* str: XABYABBBZ result_expr: $& expected_results AB
243_y: OK regex: ab* parsed_regex: ab* str: XAYABBBZ result_expr: $& expected_results A
244_y: OK regex: (ab|cd)e parsed_regex: (ab|cd)e str: ABCDE result_expr: $&-$1 expected_results CDE-CD
245_y: OK regex: [abhgefdc]ij parsed_regex: [abhgefdc]ij str: HIJ result_expr: $& expected_results HIJ
246_n: OK regex: ^(ab|cd)e parsed_regex: ^(ab|cd)e str: ABCDE result_expr: x$1y expected_results XY
247_y: OK regex: (abc|)ef parsed_regex: (abc|)ef str: ABCDEF result_expr: $&-$1 expected_results EF-
248_y: OK regex: (a|b)c*d parsed_regex: (a|b)c*d str: ABCD result_expr: $&-$1 expected_results BCD-B
249_y: OK regex: (ab|ab*)bc parsed_regex: (ab|ab*)bc str: ABC result_expr: $&-$1 expected_results ABC-A
250_y: OK regex: a([bc]*)c* parsed_regex: a([bc]*)c* str: ABC result_expr: $&-$1 expected_results ABC-BC
251_y: OK regex: a([bc]*)(c*d) parsed_regex: a([bc]*)(c*d) str: ABCD result_expr: $&-$1-$2 expected_results ABCD-BC-D
252_y: OK regex: a([bc]+)(c*d) parsed_regex: a([bc]+)(c*d) str: ABCD result_expr: $&-$1-$2 expected_results ABCD-BC-D
253_y: OK regex: a([bc]*)(c+d) parsed_regex: a([bc]*)(c+d) str: ABCD result_expr: $&-$1-$2 expected_results ABCD-B-CD
254_y: OK regex: a[bcd]*dcdcde parsed_regex: a[bcd]*dcdcde str: ADCDCDE result_expr: $& expected_results ADCDCDE
255_n: OK regex: a[bcd]+dcdcde parsed_regex: a[bcd]+dcdcde str: ADCDCDE result_expr: - expected_results -
256_y: OK regex: (ab|a)b*c parsed_regex: (ab|a)b*c str: ABC result_expr: $&-$1 expected_results ABC-AB
257_y: OK regex: ((a)(b)c)(d) parsed_regex: ((a)(b)c)(d) str: ABCD result_expr: $1-$2-$3-$4 expected_results ABC-A-B-D
258_y: OK regex: [a-zA-Z_][a-zA-Z0-9_]* parsed_regex: [a-zA-Z_][a-zA-Z0-9_]* str: ALPHA result_expr: $& expected_results ALPHA
259_y: Failure: Result is wrong. (is: BH-BH) regex: ^a(bc+|b[eh])g|.h\$ parsed_regex: ^a(bc+|b[eh])g|.h\$ str: ABH result_expr: $&-$1 expected_results BH-
260_y: OK regex: (bc+d\$|ef*g.|h?i(j|k)) parsed_regex: (bc+d\$|ef*g.|h?i(j|k)) str: EFFGZ result_expr: $&-$1-$2 expected_results EFFGZ-EFFGZ-
261_y: OK regex: (bc+d\$|ef*g.|h?i(j|k)) parsed_regex: (bc+d\$|ef*g.|h?i(j|k)) str: IJ result_expr: $&-$1-$2 expected_results IJ-IJ-J
262_n: OK regex: (bc+d\$|ef*g.|h?i(j|k)) parsed_regex: (bc+d\$|ef*g.|h?i(j|k)) str: EFFG result_expr: - expected_results -
263_n: OK regex: (bc+d\$|ef*g.|h?i(j|k)) parsed_regex: (bc+d\$|ef*g.|h?i(j|k)) str: BCDD result_expr: - expected_results -
264_y: OK regex: (bc+d\$|ef*g.|h?i(j|k)) parsed_regex: (bc+d\$|ef*g.|h?i(j|k)) str: REFFGZ result_expr: $&-$1-$2 expected_results EFFGZ-EFFGZ-
265_y: OK regex: ((((((((((a)))))))))) parsed_regex: ((((((((((a)))))))))) str: A result_expr: $10 expected_results A
266_y: OK regex: ((((((((((a))))))))))\10 parsed_regex: ((((((((((a))))))))))\10 str: AA result_expr: $& expected_results AA
267_y: OK regex: (((((((((a))))))))) parsed_regex: (((((((((a))))))))) str: A result_expr: $& expected_results A
268_n: OK regex: multiple words of text parsed_regex: multiple words of text str: UH-UH result_expr: - expected_results -
269_y: OK regex: multiple words parsed_regex: multiple words str: MULTIPLE WORDS, YEAH result_expr: $& expected_results MULTIPLE WORDS
270_y: OK regex: (.*)c(.*) parsed_regex: (.*)c(.*) str: ABCDE result_expr: $&-$1-$2 expected_results ABCDE-AB-DE
271_y: OK regex: \((.*), (.*)\) parsed_regex: \((.*), (.*)\) str: (A, B) result_expr: ($2, $1) expected_results (B, A)
272_n: OK regex: [k] parsed_regex: [k] str: AB result_expr: - expected_results -
273_y: OK regex: abcd parsed_regex: abcd str: ABCD result_expr: $& expected_results ABCD
274_y: OK regex: a(bc)d parsed_regex: a(bc)d str: ABCD result_expr: $1 expected_results BC
275_y: OK regex: a[-]?c parsed_regex: a[-]?c str: AC result_expr: $& expected_results AC
276_y: OK regex: (abc)\1 parsed_regex: (abc)\1 str: ABCABC result_expr: $1 expected_results ABC
277_y: OK regex: ([a-c]*)\1 parsed_regex: ([a-c]*)\1 str: ABCABC result_expr: $1 expected_results ABC
278_n: OK regex: a++a parsed_regex: a++a str: aaaaa result_expr: - expected_results -
279_n: OK regex: a*+a parsed_regex: a*+a str: aaaaa result_expr: - expected_results -
280_n: OK regex: a{1,5}+a parsed_regex: a{1,5}+a str: aaaaa result_expr: - expected_results -
281_n: OK regex: a?+a parsed_regex: a?+a str: ab result_expr: - expected_results -
282_y: OK regex: a++b parsed_regex: a++b str: aaaaab result_expr: $& expected_results aaaaab
283_y: OK regex: a*+b parsed_regex: a*+b str: aaaaab result_expr: $& expected_results aaaaab
284_y: OK regex: a{1,5}+b parsed_regex: a{1,5}+b str: aaaaab result_expr: $& expected_results aaaaab
285_y: OK regex: a?+b parsed_regex: a?+b str: ab result_expr: $& expected_results ab
286_n: OK regex: fooa++a parsed_regex: fooa++a str: fooaaaaa result_expr: - expected_results -
287_n: OK regex: fooa*+a parsed_regex: fooa*+a str: fooaaaaa result_expr: - expected_results -
288_n: OK regex: fooa{1,5}+a parsed_regex: fooa{1,5}+a str: fooaaaaa result_expr: - expected_results -
289_n: OK regex: fooa?+a parsed_regex: fooa?+a str: fooab result_expr: - expected_results -
290_y: OK regex: fooa++b parsed_regex: fooa++b str: fooaaaaab result_expr: $& expected_results fooaaaaab
291_y: OK regex: fooa*+b parsed_regex: fooa*+b str: fooaaaaab result_expr: $& expected_results fooaaaaab
292_y: OK regex: fooa{1,5}+b parsed_regex: fooa{1,5}+b str: fooaaaaab result_expr: $& expected_results fooaaaaab
293_y: OK regex: fooa?+b parsed_regex: fooa?+b str: fooab result_expr: $& expected_results fooab
294_n: OK regex: (aA)++(aA) parsed_regex: (aA)++(aA) str: aAaAaAaAaA result_expr: - expected_results aAaAaAaAaA
295_n: OK regex: (aA|bB)++(aA|bB) parsed_regex: (aA|bB)++(aA|bB) str: aAaAbBaAbB result_expr: - expected_results aAaAbBaAbB
296_n: OK regex: (aA)*+(aA) parsed_regex: (aA)*+(aA) str: aAaAaAaAaA result_expr: - expected_results aAaAaAaAaA
297_n: OK regex: (aA|bB)*+(aA|bB) parsed_regex: (aA|bB)*+(aA|bB) str: aAaAbBaAaA result_expr: - expected_results aAaAbBaAaA
298_n: OK regex: (aA){1,5}+(aA) parsed_regex: (aA){1,5}+(aA) str: aAaAaAaAaA result_expr: - expected_results aAaAaAaAaA
299_n: OK regex: (aA|bB){1,5}+(aA|bB) parsed_regex: (aA|bB){1,5}+(aA|bB) str: aAaAbBaAaA result_expr: - expected_results aAaAbBaAaA
300_n: OK regex: (aA)?+(aA) parsed_regex: (aA)?+(aA) str: aAb result_expr: - expected_results aAb
301_n: OK regex: (aA|bB)?+(aA|bB) parsed_regex: (aA|bB)?+(aA|bB) str: bBb result_expr: - expected_results bBb
302_y: OK regex: (aA)++b parsed_regex: (aA)++b str: aAaAaAaAaAb result_expr: $& expected_results aAaAaAaAaAb
303_y: OK regex: (aA|bB)++b parsed_regex: (aA|bB)++b str: aAbBaAaAbBb result_expr: $& expected_results aAbBaAaAbBb
304_y: OK regex: (aA)*+b parsed_regex: (aA)*+b str: aAaAaAaAaAb result_expr: $& expected_results aAaAaAaAaAb
305_y: OK regex: (aA|bB)*+b parsed_regex: (aA|bB)*+b str: bBbBbBbBbBb result_expr: $& expected_results bBbBbBbBbBb
306_y: OK regex: (aA){1,5}+b parsed_regex: (aA){1,5}+b str: aAaAaAaAaAb result_expr: $& expected_results aAaAaAaAaAb
307_y: OK regex: (aA|bB){1,5}+b parsed_regex: (aA|bB){1,5}+b str: bBaAbBaAbBb result_expr: $& expected_results bBaAbBaAbBb
308_y: OK regex: (aA)?+b parsed_regex: (aA)?+b str: aAb result_expr: $& expected_results aAb
309_y: OK regex: (aA|bB)?+b parsed_regex: (aA|bB)?+b str: bBb result_expr: $& expected_results bBb
310_n: OK regex: foo(aA)++(aA) parsed_regex: foo(aA)++(aA) str: fooaAaAaAaAaA result_expr: - expected_results fooaAaAaAaAaA
311_n: OK regex: foo(aA|bB)++(aA|bB) parsed_regex: foo(aA|bB)++(aA|bB) str: foobBbBbBaAaA result_expr: - expected_results foobBbBbBaAaA
312_n: OK regex: foo(aA)*+(aA) parsed_regex: foo(aA)*+(aA) str: fooaAaAaAaAaA result_expr: - expected_results fooaAaAaAaAaA
313_n: OK regex: foo(aA|bB)*+(aA|bB) parsed_regex: foo(aA|bB)*+(aA|bB) str: foobBaAbBaAaA result_expr: - expected_results foobBaAbBaAaA
314_n: OK regex: foo(aA){1,5}+(aA) parsed_regex: foo(aA){1,5}+(aA) str: fooaAaAaAaAaA result_expr: - expected_results fooaAaAaAaAaA
315_n: OK regex: foo(aA|bB){1,5}+(aA|bB) parsed_regex: foo(aA|bB){1,5}+(aA|bB) str: fooaAbBbBaAaA result_expr: - expected_results fooaAbBbBaAaA
316_n: OK regex: foo(aA)?+(aA) parsed_regex: foo(aA)?+(aA) str: fooaAb result_expr: - expected_results fooaAb
317_n: OK regex: foo(aA|bB)?+(aA|bB) parsed_regex: foo(aA|bB)?+(aA|bB) str: foobBb result_expr: - expected_results foobBb
318_y: OK regex: foo(aA)++b parsed_regex: foo(aA)++b str: fooaAaAaAaAaAb result_expr: $& expected_results fooaAaAaAaAaAb
319_y: OK regex: foo(aA|bB)++b parsed_regex: foo(aA|bB)++b str: foobBaAbBaAbBb result_expr: $& expected_results foobBaAbBaAbBb
320_y: OK regex: foo(aA)*+b parsed_regex: foo(aA)*+b str: fooaAaAaAaAaAb result_expr: $& expected_results fooaAaAaAaAaAb
321_y: OK regex: foo(aA|bB)*+b parsed_regex: foo(aA|bB)*+b str: foobBbBaAaAaAb result_expr: $& expected_results foobBbBaAaAaAb
322_y: OK regex: foo(aA){1,5}+b parsed_regex: foo(aA){1,5}+b str: fooaAaAaAaAaAb result_expr: $& expected_results fooaAaAaAaAaAb
323_y: OK regex: foo(aA|bB){1,5}+b parsed_regex: foo(aA|bB){1,5}+b str: foobBaAaAaAaAb result_expr: $& expected_results foobBaAaAaAaAb
324_y: OK regex: foo(aA)?+b parsed_regex: foo(aA)?+b str: fooaAb result_expr: $& expected_results fooaAb
325_y: OK regex: foo(aA|bB)?+b parsed_regex: foo(aA|bB)?+b str: foobBb result_expr: $& expected_results foobBb
326_y: OK regex: foo(\h+)bar parsed_regex: foo(\h+)bar str: foo	bar result_expr: $1 expected_results 	
327_y: OK regex: (\H+)(\h) parsed_regex: (\H+)(\h) str: foo	bar result_expr: $1-$2 expected_results foo-	
328_y: OK regex: (\h+)(\H) parsed_regex: (\h+)(\H) str: foo	bar result_expr: $1-$2 expected_results 	-b
329_y: OK regex: foo(\h)bar parsed_regex: foo(\h)bar str: foo	bar result_expr: $1 expected_results 	
330_y: OK regex: (\H)(\h) parsed_regex: (\H)(\h) str: foo	bar result_expr: $1-$2 expected_results o-	
331_y: OK regex: (\h)(\H) parsed_regex: (\h)(\H) str: foo	bar result_expr: $1-$2 expected_results 	-b
332_y: OK regex: foo(\v+)bar parsed_regex: foo(\v+)bar str: foo


bar result_expr: $1 expected_results 



333_y: OK regex: (\V+)(\v) parsed_regex: (\V+)(\v) str: foo


bar result_expr: $1-$2 expected_results foo-
334_y: OK regex: (\v+)(\V) parsed_regex: (\v+)(\V) str: foo


bar result_expr: $1-$2 expected_results 


-b
335_y: OK regex: foo(\v)bar parsed_regex: foo(\v)bar str: foobar result_expr: $1 expected_results 
336_y: OK regex: (\V)(\v) parsed_regex: (\V)(\v) str: foobar result_expr: $1-$2 expected_results o-
337_y: OK regex: (\v)(\V) parsed_regex: (\v)(\V) str: foobar result_expr: $1-$2 expected_results -b
338_y: OK regex: foo\Kbar parsed_regex: foo\Kbar str: foobar result_expr: $& expected_results bar
339_y: OK regex: foo\t\n\r\f\a\ebar parsed_regex: foo\t\n\r\f\a\ebar str: foo	
bar result_expr: $& expected_results foo	
bar

