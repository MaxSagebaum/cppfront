Running perl_tests_general:
0_y: OK regex: abc parsed_regex: abc str: abc result_expr: $& expected_results abc
1_y: OK regex: abc parsed_regex: abc str: abc result_expr: $-[0] expected_results 0
2_y: OK regex: abc parsed_regex: abc str: abc result_expr: $+[0] expected_results 3
3_n: OK regex: abc parsed_regex: abc str: xbc result_expr: - expected_results -
4_n: OK regex: abc parsed_regex: abc str: axc result_expr: - expected_results -
5_n: OK regex: abc parsed_regex: abc str: abx result_expr: - expected_results -
6_y: OK regex: abc parsed_regex: abc str: xabcy result_expr: $& expected_results abc
7_y: OK regex: abc parsed_regex: abc str: xabcy result_expr: $-[0] expected_results 1
8_y: OK regex: abc parsed_regex: abc str: xabcy result_expr: $+[0] expected_results 4
9_y: OK regex: abc parsed_regex: abc str: ababc result_expr: $& expected_results abc
10_y: OK regex: abc parsed_regex: abc str: ababc result_expr: $-[0] expected_results 2
11_y: OK regex: abc parsed_regex: abc str: ababc result_expr: $+[0] expected_results 5
12_y: OK regex: ab*c parsed_regex: ab*c str: abc result_expr: $& expected_results abc
13_y: OK regex: ab*c parsed_regex: ab*c str: abc result_expr: $-[0] expected_results 0
14_y: OK regex: ab*c parsed_regex: ab*c str: abc result_expr: $+[0] expected_results 3
15_y: OK regex: ab*bc parsed_regex: ab*bc str: abc result_expr: $& expected_results abc
16_y: OK regex: ab*bc parsed_regex: ab*bc str: abc result_expr: $-[0] expected_results 0
17_y: OK regex: ab*bc parsed_regex: ab*bc str: abc result_expr: $+[0] expected_results 3
18_y: OK regex: ab*bc parsed_regex: ab*bc str: abbc result_expr: $& expected_results abbc
19_y: OK regex: ab*bc parsed_regex: ab*bc str: abbc result_expr: $-[0] expected_results 0
20_y: OK regex: ab*bc parsed_regex: ab*bc str: abbc result_expr: $+[0] expected_results 4
21_y: OK regex: ab*bc parsed_regex: ab*bc str: abbbbc result_expr: $& expected_results abbbbc
22_y: OK regex: ab*bc parsed_regex: ab*bc str: abbbbc result_expr: $-[0] expected_results 0
23_y: OK regex: ab*bc parsed_regex: ab*bc str: abbbbc result_expr: $+[0] expected_results 6
24_y: OK regex: .{1} parsed_regex: .{1} str: abbbbc result_expr: $& expected_results a
25_y: OK regex: .{1} parsed_regex: .{1} str: abbbbc result_expr: $-[0] expected_results 0
26_y: OK regex: .{1} parsed_regex: .{1} str: abbbbc result_expr: $+[0] expected_results 1
27_y: OK regex: .{3,4} parsed_regex: .{3,4} str: abbbbc result_expr: $& expected_results abbb
28_y: OK regex: .{3,4} parsed_regex: .{3,4} str: abbbbc result_expr: $-[0] expected_results 0
29_y: OK regex: .{3,4} parsed_regex: .{3,4} str: abbbbc result_expr: $+[0] expected_results 4
30_y: OK regex: \\N{1} parsed_regex: \\N{1} str: abbbbc result_expr: $& expected_results a
31_y: OK regex: \\N{1} parsed_regex: \\N{1} str: abbbbc result_expr: $-[0] expected_results 0
32_y: OK regex: \\N{1} parsed_regex: \\N{1} str: abbbbc result_expr: $+[0] expected_results 1
33_y: OK regex: \\N{3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $& expected_results abbb
34_y: OK regex: \\N{3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $-[0] expected_results 0
35_y: OK regex: \\N{3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $+[0] expected_results 4
36_y: OK Warning: Parsed regex does not match. regex: \\N{ 3 , 4 } parsed_regex: \\N{3,4} str: abbbbc result_expr: $+[0] expected_results 4
37_y: OK regex: ab{0,}bc parsed_regex: ab{0,}bc str: abbbbc result_expr: $& expected_results abbbbc
38_y: OK regex: ab{0,}bc parsed_regex: ab{0,}bc str: abbbbc result_expr: $-[0] expected_results 0
39_y: OK regex: ab{0,}bc parsed_regex: ab{0,}bc str: abbbbc result_expr: $+[0] expected_results 6
40_y: OK regex: ab+bc parsed_regex: ab+bc str: abbc result_expr: $& expected_results abbc
41_y: OK regex: ab+bc parsed_regex: ab+bc str: abbc result_expr: $-[0] expected_results 0
42_y: OK regex: ab+bc parsed_regex: ab+bc str: abbc result_expr: $+[0] expected_results 4
43_n: OK regex: ab+bc parsed_regex: ab+bc str: abc result_expr: - expected_results -
44_n: OK regex: ab+bc parsed_regex: ab+bc str: abq result_expr: - expected_results -
45_n: OK regex: ab{1,}bc parsed_regex: ab{1,}bc str: abq result_expr: - expected_results -
46_y: OK regex: ab+bc parsed_regex: ab+bc str: abbbbc result_expr: $& expected_results abbbbc
47_y: OK regex: ab+bc parsed_regex: ab+bc str: abbbbc result_expr: $-[0] expected_results 0
48_y: OK regex: ab+bc parsed_regex: ab+bc str: abbbbc result_expr: $+[0] expected_results 6
49_y: OK regex: ab{1,}bc parsed_regex: ab{1,}bc str: abbbbc result_expr: $& expected_results abbbbc
50_y: OK regex: ab{1,}bc parsed_regex: ab{1,}bc str: abbbbc result_expr: $-[0] expected_results 0
51_y: OK regex: ab{1,}bc parsed_regex: ab{1,}bc str: abbbbc result_expr: $+[0] expected_results 6
52_y: OK regex: ab{1,3}bc parsed_regex: ab{1,3}bc str: abbbbc result_expr: $& expected_results abbbbc
53_y: OK regex: ab{1,3}bc parsed_regex: ab{1,3}bc str: abbbbc result_expr: $-[0] expected_results 0
54_y: OK regex: ab{1,3}bc parsed_regex: ab{1,3}bc str: abbbbc result_expr: $+[0] expected_results 6
55_y: OK regex: ab{3,4}bc parsed_regex: ab{3,4}bc str: abbbbc result_expr: $& expected_results abbbbc
56_y: OK regex: ab{3,4}bc parsed_regex: ab{3,4}bc str: abbbbc result_expr: $-[0] expected_results 0
57_y: OK regex: ab{3,4}bc parsed_regex: ab{3,4}bc str: abbbbc result_expr: $+[0] expected_results 6
58_n: OK regex: ab{4,5}bc parsed_regex: ab{4,5}bc str: abbbbc result_expr: - expected_results -
59_y: OK regex: ab?bc parsed_regex: ab?bc str: abbc result_expr: $& expected_results abbc
60_y: OK regex: ab?bc parsed_regex: ab?bc str: abc result_expr: $& expected_results abc
61_y: OK regex: ab{0,1}bc parsed_regex: ab{0,1}bc str: abc result_expr: $& expected_results abc
62_n: OK regex: ab?bc parsed_regex: ab?bc str: abbbbc result_expr: - expected_results -
63_y: OK regex: ab?c parsed_regex: ab?c str: abc result_expr: $& expected_results abc
64_y: OK regex: ab{0,1}c parsed_regex: ab{0,1}c str: abc result_expr: $& expected_results abc
65_y: OK regex: ^abc\$ parsed_regex: ^abc\$ str: abc result_expr: $& expected_results abc
66_n: OK regex: ^abc\$ parsed_regex: ^abc\$ str: abcc result_expr: - expected_results -
67_y: OK regex: ^abc parsed_regex: ^abc str: abcc result_expr: $& expected_results abc
68_n: OK regex: ^abc\$ parsed_regex: ^abc\$ str: aabc result_expr: - expected_results -
69_y: OK regex: abc\$ parsed_regex: abc\$ str: aabc result_expr: $& expected_results abc
70_n: OK regex: abc\$ parsed_regex: abc\$ str: aabcd result_expr: - expected_results -
71_y: OK regex: ^ parsed_regex: ^ str: abc result_expr: $& expected_results 
72_y: OK regex: \$ parsed_regex: \$ str: abc result_expr: $& expected_results 
73_y: OK regex: a.c parsed_regex: a.c str: abc result_expr: $& expected_results abc
74_y: OK regex: a.c parsed_regex: a.c str: axc result_expr: $& expected_results axc
75_y: OK regex: a\\Nc parsed_regex: a\\Nc str: abc result_expr: $& expected_results abc
76_y: OK regex: a.*c parsed_regex: a.*c str: axyzc result_expr: $& expected_results axyzc
77_y: OK regex: a\\N*c parsed_regex: a\\N*c str: axyzc result_expr: $& expected_results axyzc
78_n: OK regex: a.*c parsed_regex: a.*c str: axyzd result_expr: - expected_results -
79_n: OK regex: a\\N*c parsed_regex: a\\N*c str: axyzd result_expr: - expected_results -
80_n: OK regex: a[bc]d parsed_regex: a[bc]d str: abc result_expr: - expected_results -
81_y: OK regex: a[bc]d parsed_regex: a[bc]d str: abd result_expr: $& expected_results abd
82_y: OK regex: a[b]d parsed_regex: a[b]d str: abd result_expr: $& expected_results abd
83_y: OK regex: [a][b][d] parsed_regex: [a][b][d] str: abd result_expr: $& expected_results abd
84_y: OK regex: .[b]. parsed_regex: .[b]. str: abd result_expr: $& expected_results abd
85_n: OK regex: .[b]. parsed_regex: .[b]. str: aBd result_expr: - expected_results -
86_n: OK regex: a[b-d]e parsed_regex: a[b-d]e str: abd result_expr: - expected_results -
87_y: OK regex: a[b-d]e parsed_regex: a[b-d]e str: ace result_expr: $& expected_results ace
88_y: OK regex: a[b-d] parsed_regex: a[b-d] str: aac result_expr: $& expected_results ac
89_y: OK regex: a[-b] parsed_regex: a[-b] str: a- result_expr: $& expected_results a-
90_y: OK regex: a[b-] parsed_regex: a[b-] str: a- result_expr: $& expected_results a-
91_y: OK regex: a] parsed_regex: a] str: a] result_expr: $& expected_results a]
92_y: OK regex: a[]]b parsed_regex: a[]]b str: a]b result_expr: $& expected_results a]b
93_y: OK regex: a[^bc]d parsed_regex: a[^bc]d str: aed result_expr: $& expected_results aed
94_n: OK regex: a[^bc]d parsed_regex: a[^bc]d str: abd result_expr: - expected_results -
95_y: OK regex: a[^-b]c parsed_regex: a[^-b]c str: adc result_expr: $& expected_results adc
96_n: OK regex: a[^-b]c parsed_regex: a[^-b]c str: a-c result_expr: - expected_results -
97_n: OK regex: a[^]b]c parsed_regex: a[^]b]c str: a]c result_expr: - expected_results -
98_y: OK regex: a[^]b]c parsed_regex: a[^]b]c str: adc result_expr: $& expected_results adc
99_y: OK regex: \ba\b parsed_regex: \ba\b str: a- result_expr: - expected_results -
100_y: OK regex: \ba\b parsed_regex: \ba\b str: -a result_expr: - expected_results -
101_y: OK regex: \ba\b parsed_regex: \ba\b str: -a- result_expr: - expected_results -
102_n: OK regex: \by\b parsed_regex: \by\b str: xy result_expr: - expected_results -
103_n: OK regex: \by\b parsed_regex: \by\b str: yz result_expr: - expected_results -
104_n: OK regex: \by\b parsed_regex: \by\b str: xyz result_expr: - expected_results -
105_n: OK regex: \Ba\B parsed_regex: \Ba\B str: a- result_expr: - expected_results -
106_n: OK regex: \Ba\B parsed_regex: \Ba\B str: -a result_expr: - expected_results -
107_n: OK regex: \Ba\B parsed_regex: \Ba\B str: -a- result_expr: - expected_results -
108_y: OK regex: \By\b parsed_regex: \By\b str: xy result_expr: - expected_results -
109_y: OK regex: \By\b parsed_regex: \By\b str: xy result_expr: $-[0] expected_results 1
110_y: OK regex: \By\b parsed_regex: \By\b str: xy result_expr: $+[0] expected_results 2
111_y: OK regex: \By\b parsed_regex: \By\b str: xy result_expr: - expected_results -
112_y: OK regex: \by\B parsed_regex: \by\B str: yz result_expr: - expected_results -
113_y: OK regex: \By\B parsed_regex: \By\B str: xyz result_expr: - expected_results -
114_n: OK regex: \b parsed_regex: \b str:  result_expr: - expected_results -
115_y: OK regex: \B parsed_regex: \B str:  result_expr: - expected_results -
116_y: OK regex: \w parsed_regex: \w str: a result_expr: - expected_results -
117_n: OK regex: \w parsed_regex: \w str: - result_expr: - expected_results -
118_n: OK regex: \W parsed_regex: \W str: a result_expr: - expected_results -
119_y: OK regex: \W parsed_regex: \W str: - result_expr: - expected_results -
120_y: OK regex: a\sb parsed_regex: a\sb str: a b result_expr: - expected_results -
121_n: OK regex: a\sb parsed_regex: a\sb str: a-b result_expr: - expected_results -
122_n: OK regex: a\Sb parsed_regex: a\Sb str: a b result_expr: - expected_results -
123_y: OK regex: a\Sb parsed_regex: a\Sb str: a-b result_expr: - expected_results -
124_y: OK regex: \d parsed_regex: \d str: 1 result_expr: - expected_results -
125_n: OK regex: \d parsed_regex: \d str: - result_expr: - expected_results -
126_n: OK regex: \D parsed_regex: \D str: 1 result_expr: - expected_results -
127_y: OK regex: \D parsed_regex: \D str: - result_expr: - expected_results -
128_y: OK regex: [\w] parsed_regex: [\w] str: a result_expr: - expected_results -
129_n: OK regex: [\w] parsed_regex: [\w] str: - result_expr: - expected_results -
130_n: OK regex: [\W] parsed_regex: [\W] str: a result_expr: - expected_results -
131_y: OK regex: [\W] parsed_regex: [\W] str: - result_expr: - expected_results -
132_y: OK regex: a[\s]b parsed_regex: a[\s]b str: a b result_expr: - expected_results -
133_n: OK regex: a[\s]b parsed_regex: a[\s]b str: a-b result_expr: - expected_results -
134_n: OK regex: a[\S]b parsed_regex: a[\S]b str: a b result_expr: - expected_results -
135_y: OK regex: a[\S]b parsed_regex: a[\S]b str: a-b result_expr: - expected_results -
136_y: OK regex: [\d] parsed_regex: [\d] str: 1 result_expr: - expected_results -
137_n: OK regex: [\d] parsed_regex: [\d] str: - result_expr: - expected_results -
138_n: OK regex: [\D] parsed_regex: [\D] str: 1 result_expr: - expected_results -
139_y: OK regex: [\D] parsed_regex: [\D] str: - result_expr: - expected_results -
140_y: OK regex: ab|cd parsed_regex: ab|cd str: abc result_expr: $& expected_results ab
141_y: OK regex: ab|cd parsed_regex: ab|cd str: abcd result_expr: $& expected_results ab
142_y: OK regex: ()ef parsed_regex: ()ef str: def result_expr: $&-$1 expected_results ef-
143_y: OK regex: ()ef parsed_regex: ()ef str: def result_expr: $-[0] expected_results 1
144_y: OK regex: ()ef parsed_regex: ()ef str: def result_expr: $+[0] expected_results 3
145_y: OK regex: ()ef parsed_regex: ()ef str: def result_expr: $-[1] expected_results 1
146_y: OK regex: ()ef parsed_regex: ()ef str: def result_expr: $+[1] expected_results 1
147_n: OK regex: \$b parsed_regex: \$b str: b result_expr: - expected_results -
148_y: OK regex: a\(b parsed_regex: a\(b str: a(b result_expr: $&-$1 expected_results a(b-
149_y: OK regex: a\(*b parsed_regex: a\(*b str: ab result_expr: $& expected_results ab
150_y: OK regex: a\(*b parsed_regex: a\(*b str: a((b result_expr: $& expected_results a((b
151_y: OK regex: a\\b parsed_regex: a\\b str: a\b result_expr: $& expected_results a\b
152_y: OK regex: ((a)) parsed_regex: ((a)) str: abc result_expr: $&-$1-$2 expected_results a-a-a
153_y: OK regex: ((a)) parsed_regex: ((a)) str: abc result_expr: $-[0]-$-[1]-$-[2] expected_results 0-0-0
154_y: OK regex: ((a)) parsed_regex: ((a)) str: abc result_expr: $+[0]-$+[1]-$+[2] expected_results 1-1-1
155_y: OK regex: (foo)(\g-2) parsed_regex: (foo)(\g-2) str: foofoo result_expr: $1-$2 expected_results foo-foo
156_y: OK regex: (foo)(\g-2)(foo)(\g-2) parsed_regex: (foo)(\g-2)(foo)(\g-2) str: foofoofoofoo result_expr: $1-$2-$3-$4 expected_results foo-foo-foo-foo
157_y: OK regex: (([abc]+) \g-1)(([abc]+) \g{-1}) parsed_regex: (([abc]+) \g-1)(([abc]+) \g{-1}) str: abc abccba cba result_expr: $2-$4 expected_results abc-cba
158_y: OK regex: (a)(b)(c)\g1\g2\g3 parsed_regex: (a)(b)(c)\g1\g2\g3 str: abcabc result_expr: $1$2$3 expected_results abc
159_y: OK regex: abc parsed_regex: abc str: ABC result_expr: $& expected_results ABC
160_n: OK regex: abc parsed_regex: abc str: XBC result_expr: - expected_results -
161_n: OK regex: abc parsed_regex: abc str: AXC result_expr: - expected_results -
162_n: OK regex: abc parsed_regex: abc str: ABX result_expr: - expected_results -
163_y: OK regex: abc parsed_regex: abc str: XABCY result_expr: $& expected_results ABC
164_y: OK regex: abc parsed_regex: abc str: ABABC result_expr: $& expected_results ABC
165_y: OK regex: ab*c parsed_regex: ab*c str: ABC result_expr: $& expected_results ABC
166_y: OK regex: ab*bc parsed_regex: ab*bc str: ABC result_expr: $& expected_results ABC
167_y: OK regex: ab*bc parsed_regex: ab*bc str: ABBC result_expr: $& expected_results ABBC
168_y: OK regex: ab*?bc parsed_regex: ab*?bc str: ABBBBC result_expr: $& expected_results ABBBBC
169_y: OK regex: ab{0,}?bc parsed_regex: ab{0,}?bc str: ABBBBC result_expr: $& expected_results ABBBBC
170_y: OK regex: ab+?bc parsed_regex: ab+?bc str: ABBC result_expr: $& expected_results ABBC
171_n: OK regex: ab+bc parsed_regex: ab+bc str: ABC result_expr: - expected_results -
172_n: OK regex: ab+bc parsed_regex: ab+bc str: ABQ result_expr: - expected_results -
173_n: OK regex: ab{1,}bc parsed_regex: ab{1,}bc str: ABQ result_expr: - expected_results -
174_y: OK regex: ab+bc parsed_regex: ab+bc str: ABBBBC result_expr: $& expected_results ABBBBC
175_y: OK regex: ab{1,}?bc parsed_regex: ab{1,}?bc str: ABBBBC result_expr: $& expected_results ABBBBC
176_y: OK regex: ab{1,3}?bc parsed_regex: ab{1,3}?bc str: ABBBBC result_expr: $& expected_results ABBBBC
177_y: OK regex: ab{3,4}?bc parsed_regex: ab{3,4}?bc str: ABBBBC result_expr: $& expected_results ABBBBC
178_n: OK regex: ab{4,5}?bc parsed_regex: ab{4,5}?bc str: ABBBBC result_expr: - expected_results -
179_y: OK regex: ab??bc parsed_regex: ab??bc str: ABBC result_expr: $& expected_results ABBC
180_y: OK regex: ab??bc parsed_regex: ab??bc str: ABC result_expr: $& expected_results ABC
181_y: OK regex: ab{0,1}?bc parsed_regex: ab{0,1}?bc str: ABC result_expr: $& expected_results ABC
182_n: OK regex: ab??bc parsed_regex: ab??bc str: ABBBBC result_expr: - expected_results -
183_y: OK regex: ab??c parsed_regex: ab??c str: ABC result_expr: $& expected_results ABC
184_y: OK regex: ab{0,1}?c parsed_regex: ab{0,1}?c str: ABC result_expr: $& expected_results ABC
185_y: OK regex: ^abc\$ parsed_regex: ^abc\$ str: ABC result_expr: $& expected_results ABC
186_n: OK regex: ^abc\$ parsed_regex: ^abc\$ str: ABCC result_expr: - expected_results -
187_y: OK regex: ^abc parsed_regex: ^abc str: ABCC result_expr: $& expected_results ABC
188_n: OK regex: ^abc\$ parsed_regex: ^abc\$ str: AABC result_expr: - expected_results -
189_y: OK regex: abc\$ parsed_regex: abc\$ str: AABC result_expr: $& expected_results ABC
190_y: OK regex: ^ parsed_regex: ^ str: ABC result_expr: $& expected_results 
191_y: OK regex: \$ parsed_regex: \$ str: ABC result_expr: $& expected_results 
192_y: OK regex: a.c parsed_regex: a.c str: ABC result_expr: $& expected_results ABC
193_y: OK regex: a.c parsed_regex: a.c str: AXC result_expr: $& expected_results AXC
194_y: OK regex: a\\Nc parsed_regex: a\\Nc str: ABC result_expr: $& expected_results ABC
195_y: OK regex: a.*?c parsed_regex: a.*?c str: AXYZC result_expr: $& expected_results AXYZC
196_n: OK regex: a.*c parsed_regex: a.*c str: AXYZD result_expr: - expected_results -
197_n: OK regex: a[bc]d parsed_regex: a[bc]d str: ABC result_expr: - expected_results -
198_y: OK regex: a[bc]d parsed_regex: a[bc]d str: ABD result_expr: $& expected_results ABD
199_n: OK regex: a[b-d]e parsed_regex: a[b-d]e str: ABD result_expr: - expected_results -
200_y: OK regex: a[b-d]e parsed_regex: a[b-d]e str: ACE result_expr: $& expected_results ACE
201_y: OK regex: a[b-d] parsed_regex: a[b-d] str: AAC result_expr: $& expected_results AC
202_y: OK regex: a[-b] parsed_regex: a[-b] str: A- result_expr: $& expected_results A-
203_y: OK regex: a[b-] parsed_regex: a[b-] str: A- result_expr: $& expected_results A-
204_y: OK regex: a] parsed_regex: a] str: A] result_expr: $& expected_results A]
205_y: OK regex: a[]]b parsed_regex: a[]]b str: A]B result_expr: $& expected_results A]B
206_y: OK regex: a[^bc]d parsed_regex: a[^bc]d str: AED result_expr: $& expected_results AED
207_n: OK regex: a[^bc]d parsed_regex: a[^bc]d str: ABD result_expr: - expected_results -
208_y: OK regex: a[^-b]c parsed_regex: a[^-b]c str: ADC result_expr: $& expected_results ADC
209_n: OK regex: a[^-b]c parsed_regex: a[^-b]c str: A-C result_expr: - expected_results -
210_n: OK regex: a[^]b]c parsed_regex: a[^]b]c str: A]C result_expr: - expected_results -
211_y: OK regex: a[^]b]c parsed_regex: a[^]b]c str: ADC result_expr: $& expected_results ADC
212_y: OK regex: ab|cd parsed_regex: ab|cd str: ABC result_expr: $& expected_results AB
213_y: OK regex: ab|cd parsed_regex: ab|cd str: ABCD result_expr: $& expected_results AB
214_y: OK regex: ()ef parsed_regex: ()ef str: DEF result_expr: $&-$1 expected_results EF-
215_n: OK regex: \$b parsed_regex: \$b str: B result_expr: - expected_results -
216_y: OK regex: a\(b parsed_regex: a\(b str: A(B result_expr: $&-$1 expected_results A(B-
217_y: OK regex: a\(*b parsed_regex: a\(*b str: AB result_expr: $& expected_results AB
218_y: OK regex: a\(*b parsed_regex: a\(*b str: A((B result_expr: $& expected_results A((B
219_y: OK regex: a\\b parsed_regex: a\\b str: A\B result_expr: $& expected_results A\B
220_y: OK regex: ((a)) parsed_regex: ((a)) str: ABC result_expr: $&-$1-$2 expected_results A-A-A
221_y: OK regex: (a)b(c) parsed_regex: (a)b(c) str: ABC result_expr: $&-$1-$2 expected_results ABC-A-C
222_y: OK regex: a+b+c parsed_regex: a+b+c str: AABBABC result_expr: $& expected_results ABC
223_y: OK regex: a{1,}b{1,}c parsed_regex: a{1,}b{1,}c str: AABBABC result_expr: $& expected_results ABC
224_y: OK regex: a.+?c parsed_regex: a.+?c str: ABCABC result_expr: $& expected_results ABC
225_y: OK regex: a.*?c parsed_regex: a.*?c str: ABCABC result_expr: $& expected_results ABC
226_y: OK regex: a.{0,5}?c parsed_regex: a.{0,5}?c str: ABCABC result_expr: $& expected_results ABC
227_y: OK regex: (a+|b)* parsed_regex: (a+|b)* str: AB result_expr: $&-$1 expected_results AB-B
228_y: OK regex: (a+|b){0,} parsed_regex: (a+|b){0,} str: AB result_expr: $&-$1 expected_results AB-B
229_y: OK regex: (a+|b)+ parsed_regex: (a+|b)+ str: AB result_expr: $&-$1 expected_results AB-B
230_y: OK regex: (a+|b){1,} parsed_regex: (a+|b){1,} str: AB result_expr: $&-$1 expected_results AB-B
231_y: OK regex: (a+|b)? parsed_regex: (a+|b)? str: AB result_expr: $&-$1 expected_results A-A
232_y: OK regex: (a+|b){0,1} parsed_regex: (a+|b){0,1} str: AB result_expr: $&-$1 expected_results A-A
233_y: OK regex: (a+|b){0,1}? parsed_regex: (a+|b){0,1}? str: AB result_expr: $&-$1 expected_results -
234_y: OK regex: [^ab]* parsed_regex: [^ab]* str: CDE result_expr: $& expected_results CDE
235_n: OK regex: abc parsed_regex: abc str:  result_expr: - expected_results -
236_y: OK regex: a* parsed_regex: a* str:  result_expr: $& expected_results 
237_y: OK regex: ([abc])*d parsed_regex: ([abc])*d str: ABBBCD result_expr: $&-$1 expected_results ABBBCD-C
238_y: OK regex: ([abc])*bcd parsed_regex: ([abc])*bcd str: ABCD result_expr: $&-$1 expected_results ABCD-A
239_y: OK regex: a|b|c|d|e parsed_regex: a|b|c|d|e str: E result_expr: $& expected_results E
240_y: OK regex: (a|b|c|d|e)f parsed_regex: (a|b|c|d|e)f str: EF result_expr: $&-$1 expected_results EF-E
241_y: OK regex: abcd*efg parsed_regex: abcd*efg str: ABCDEFG result_expr: $& expected_results ABCDEFG
242_y: OK regex: ab* parsed_regex: ab* str: XABYABBBZ result_expr: $& expected_results AB
243_y: OK regex: ab* parsed_regex: ab* str: XAYABBBZ result_expr: $& expected_results A
244_y: OK regex: (ab|cd)e parsed_regex: (ab|cd)e str: ABCDE result_expr: $&-$1 expected_results CDE-CD
245_y: OK regex: [abhgefdc]ij parsed_regex: [abhgefdc]ij str: HIJ result_expr: $& expected_results HIJ
246_n: OK regex: ^(ab|cd)e parsed_regex: ^(ab|cd)e str: ABCDE result_expr: x$1y expected_results XY
247_y: OK regex: (abc|)ef parsed_regex: (abc|)ef str: ABCDEF result_expr: $&-$1 expected_results EF-
248_y: OK regex: (a|b)c*d parsed_regex: (a|b)c*d str: ABCD result_expr: $&-$1 expected_results BCD-B
249_y: OK regex: (ab|ab*)bc parsed_regex: (ab|ab*)bc str: ABC result_expr: $&-$1 expected_results ABC-A
250_y: OK regex: a([bc]*)c* parsed_regex: a([bc]*)c* str: ABC result_expr: $&-$1 expected_results ABC-BC
251_y: OK regex: a([bc]*)(c*d) parsed_regex: a([bc]*)(c*d) str: ABCD result_expr: $&-$1-$2 expected_results ABCD-BC-D
252_y: OK regex: a([bc]+)(c*d) parsed_regex: a([bc]+)(c*d) str: ABCD result_expr: $&-$1-$2 expected_results ABCD-BC-D
253_y: OK regex: a([bc]*)(c+d) parsed_regex: a([bc]*)(c+d) str: ABCD result_expr: $&-$1-$2 expected_results ABCD-B-CD
254_y: OK regex: a[bcd]*dcdcde parsed_regex: a[bcd]*dcdcde str: ADCDCDE result_expr: $& expected_results ADCDCDE
255_n: OK regex: a[bcd]+dcdcde parsed_regex: a[bcd]+dcdcde str: ADCDCDE result_expr: - expected_results -
256_y: OK regex: (ab|a)b*c parsed_regex: (ab|a)b*c str: ABC result_expr: $&-$1 expected_results ABC-AB
257_y: OK regex: ((a)(b)c)(d) parsed_regex: ((a)(b)c)(d) str: ABCD result_expr: $1-$2-$3-$4 expected_results ABC-A-B-D
258_y: OK regex: [a-zA-Z_][a-zA-Z0-9_]* parsed_regex: [a-zA-Z_][a-zA-Z0-9_]* str: ALPHA result_expr: $& expected_results ALPHA
259_y: OK regex: ^a(bc+|b[eh])g|.h\$ parsed_regex: ^a(bc+|b[eh])g|.h\$ str: ABH result_expr: $&-$1 expected_results BH-
260_y: OK regex: (bc+d\$|ef*g.|h?i(j|k)) parsed_regex: (bc+d\$|ef*g.|h?i(j|k)) str: EFFGZ result_expr: $&-$1-$2 expected_results EFFGZ-EFFGZ-
261_y: OK regex: (bc+d\$|ef*g.|h?i(j|k)) parsed_regex: (bc+d\$|ef*g.|h?i(j|k)) str: IJ result_expr: $&-$1-$2 expected_results IJ-IJ-J
262_n: OK regex: (bc+d\$|ef*g.|h?i(j|k)) parsed_regex: (bc+d\$|ef*g.|h?i(j|k)) str: EFFG result_expr: - expected_results -
263_n: OK regex: (bc+d\$|ef*g.|h?i(j|k)) parsed_regex: (bc+d\$|ef*g.|h?i(j|k)) str: BCDD result_expr: - expected_results -
264_y: OK regex: (bc+d\$|ef*g.|h?i(j|k)) parsed_regex: (bc+d\$|ef*g.|h?i(j|k)) str: REFFGZ result_expr: $&-$1-$2 expected_results EFFGZ-EFFGZ-
265_y: OK regex: ((((((((((a)))))))))) parsed_regex: ((((((((((a)))))))))) str: A result_expr: $10 expected_results A
266_y: OK regex: ((((((((((a))))))))))\10 parsed_regex: ((((((((((a))))))))))\10 str: AA result_expr: $& expected_results AA
267_y: OK regex: (((((((((a))))))))) parsed_regex: (((((((((a))))))))) str: A result_expr: $& expected_results A
268_n: OK regex: multiple words of text parsed_regex: multiple words of text str: UH-UH result_expr: - expected_results -
269_y: OK regex: multiple words parsed_regex: multiple words str: MULTIPLE WORDS, YEAH result_expr: $& expected_results MULTIPLE WORDS
270_y: OK regex: (.*)c(.*) parsed_regex: (.*)c(.*) str: ABCDE result_expr: $&-$1-$2 expected_results ABCDE-AB-DE
271_y: OK regex: \((.*), (.*)\) parsed_regex: \((.*), (.*)\) str: (A, B) result_expr: ($2, $1) expected_results (B, A)
272_n: OK regex: [k] parsed_regex: [k] str: AB result_expr: - expected_results -
273_y: OK regex: abcd parsed_regex: abcd str: ABCD result_expr: $& expected_results ABCD
274_y: OK regex: a(bc)d parsed_regex: a(bc)d str: ABCD result_expr: $1 expected_results BC
275_y: OK regex: a[-]?c parsed_regex: a[-]?c str: AC result_expr: $& expected_results AC
276_y: OK regex: (abc)\1 parsed_regex: (abc)\1 str: ABCABC result_expr: $1 expected_results ABC
277_y: OK regex: ([a-c]*)\1 parsed_regex: ([a-c]*)\1 str: ABCABC result_expr: $1 expected_results ABC
278_n: OK regex: a++a parsed_regex: a++a str: aaaaa result_expr: - expected_results -
279_n: OK regex: a*+a parsed_regex: a*+a str: aaaaa result_expr: - expected_results -
280_n: OK regex: a{1,5}+a parsed_regex: a{1,5}+a str: aaaaa result_expr: - expected_results -
281_n: OK regex: a?+a parsed_regex: a?+a str: ab result_expr: - expected_results -
282_y: OK regex: a++b parsed_regex: a++b str: aaaaab result_expr: $& expected_results aaaaab
283_y: OK regex: a*+b parsed_regex: a*+b str: aaaaab result_expr: $& expected_results aaaaab
284_y: OK regex: a{1,5}+b parsed_regex: a{1,5}+b str: aaaaab result_expr: $& expected_results aaaaab
285_y: OK regex: a?+b parsed_regex: a?+b str: ab result_expr: $& expected_results ab
286_n: OK regex: fooa++a parsed_regex: fooa++a str: fooaaaaa result_expr: - expected_results -
287_n: OK regex: fooa*+a parsed_regex: fooa*+a str: fooaaaaa result_expr: - expected_results -
288_n: OK regex: fooa{1,5}+a parsed_regex: fooa{1,5}+a str: fooaaaaa result_expr: - expected_results -
289_n: OK regex: fooa?+a parsed_regex: fooa?+a str: fooab result_expr: - expected_results -
290_y: OK regex: fooa++b parsed_regex: fooa++b str: fooaaaaab result_expr: $& expected_results fooaaaaab
291_y: OK regex: fooa*+b parsed_regex: fooa*+b str: fooaaaaab result_expr: $& expected_results fooaaaaab
292_y: OK regex: fooa{1,5}+b parsed_regex: fooa{1,5}+b str: fooaaaaab result_expr: $& expected_results fooaaaaab
293_y: OK regex: fooa?+b parsed_regex: fooa?+b str: fooab result_expr: $& expected_results fooab
294_n: OK regex: (aA)++(aA) parsed_regex: (aA)++(aA) str: aAaAaAaAaA result_expr: - expected_results aAaAaAaAaA
295_n: OK regex: (aA|bB)++(aA|bB) parsed_regex: (aA|bB)++(aA|bB) str: aAaAbBaAbB result_expr: - expected_results aAaAbBaAbB
296_n: OK regex: (aA)*+(aA) parsed_regex: (aA)*+(aA) str: aAaAaAaAaA result_expr: - expected_results aAaAaAaAaA
297_n: OK regex: (aA|bB)*+(aA|bB) parsed_regex: (aA|bB)*+(aA|bB) str: aAaAbBaAaA result_expr: - expected_results aAaAbBaAaA
298_n: OK regex: (aA){1,5}+(aA) parsed_regex: (aA){1,5}+(aA) str: aAaAaAaAaA result_expr: - expected_results aAaAaAaAaA
299_n: OK regex: (aA|bB){1,5}+(aA|bB) parsed_regex: (aA|bB){1,5}+(aA|bB) str: aAaAbBaAaA result_expr: - expected_results aAaAbBaAaA
300_n: OK regex: (aA)?+(aA) parsed_regex: (aA)?+(aA) str: aAb result_expr: - expected_results aAb
301_n: OK regex: (aA|bB)?+(aA|bB) parsed_regex: (aA|bB)?+(aA|bB) str: bBb result_expr: - expected_results bBb
302_y: OK regex: (aA)++b parsed_regex: (aA)++b str: aAaAaAaAaAb result_expr: $& expected_results aAaAaAaAaAb
303_y: OK regex: (aA|bB)++b parsed_regex: (aA|bB)++b str: aAbBaAaAbBb result_expr: $& expected_results aAbBaAaAbBb
304_y: OK regex: (aA)*+b parsed_regex: (aA)*+b str: aAaAaAaAaAb result_expr: $& expected_results aAaAaAaAaAb
305_y: OK regex: (aA|bB)*+b parsed_regex: (aA|bB)*+b str: bBbBbBbBbBb result_expr: $& expected_results bBbBbBbBbBb
306_y: OK regex: (aA){1,5}+b parsed_regex: (aA){1,5}+b str: aAaAaAaAaAb result_expr: $& expected_results aAaAaAaAaAb
307_y: OK regex: (aA|bB){1,5}+b parsed_regex: (aA|bB){1,5}+b str: bBaAbBaAbBb result_expr: $& expected_results bBaAbBaAbBb
308_y: OK regex: (aA)?+b parsed_regex: (aA)?+b str: aAb result_expr: $& expected_results aAb
309_y: OK regex: (aA|bB)?+b parsed_regex: (aA|bB)?+b str: bBb result_expr: $& expected_results bBb
310_n: OK regex: foo(aA)++(aA) parsed_regex: foo(aA)++(aA) str: fooaAaAaAaAaA result_expr: - expected_results fooaAaAaAaAaA
311_n: OK regex: foo(aA|bB)++(aA|bB) parsed_regex: foo(aA|bB)++(aA|bB) str: foobBbBbBaAaA result_expr: - expected_results foobBbBbBaAaA
312_n: OK regex: foo(aA)*+(aA) parsed_regex: foo(aA)*+(aA) str: fooaAaAaAaAaA result_expr: - expected_results fooaAaAaAaAaA
313_n: OK regex: foo(aA|bB)*+(aA|bB) parsed_regex: foo(aA|bB)*+(aA|bB) str: foobBaAbBaAaA result_expr: - expected_results foobBaAbBaAaA
314_n: OK regex: foo(aA){1,5}+(aA) parsed_regex: foo(aA){1,5}+(aA) str: fooaAaAaAaAaA result_expr: - expected_results fooaAaAaAaAaA
315_n: OK regex: foo(aA|bB){1,5}+(aA|bB) parsed_regex: foo(aA|bB){1,5}+(aA|bB) str: fooaAbBbBaAaA result_expr: - expected_results fooaAbBbBaAaA
316_n: OK regex: foo(aA)?+(aA) parsed_regex: foo(aA)?+(aA) str: fooaAb result_expr: - expected_results fooaAb
317_n: OK regex: foo(aA|bB)?+(aA|bB) parsed_regex: foo(aA|bB)?+(aA|bB) str: foobBb result_expr: - expected_results foobBb
318_y: OK regex: foo(aA)++b parsed_regex: foo(aA)++b str: fooaAaAaAaAaAb result_expr: $& expected_results fooaAaAaAaAaAb
319_y: OK regex: foo(aA|bB)++b parsed_regex: foo(aA|bB)++b str: foobBaAbBaAbBb result_expr: $& expected_results foobBaAbBaAbBb
320_y: OK regex: foo(aA)*+b parsed_regex: foo(aA)*+b str: fooaAaAaAaAaAb result_expr: $& expected_results fooaAaAaAaAaAb
321_y: OK regex: foo(aA|bB)*+b parsed_regex: foo(aA|bB)*+b str: foobBbBaAaAaAb result_expr: $& expected_results foobBbBaAaAaAb
322_y: OK regex: foo(aA){1,5}+b parsed_regex: foo(aA){1,5}+b str: fooaAaAaAaAaAb result_expr: $& expected_results fooaAaAaAaAaAb
323_y: OK regex: foo(aA|bB){1,5}+b parsed_regex: foo(aA|bB){1,5}+b str: foobBaAaAaAaAb result_expr: $& expected_results foobBaAaAaAaAb
324_y: OK regex: foo(aA)?+b parsed_regex: foo(aA)?+b str: fooaAb result_expr: $& expected_results fooaAb
325_y: OK regex: foo(aA|bB)?+b parsed_regex: foo(aA|bB)?+b str: foobBb result_expr: $& expected_results foobBb
326_y: OK regex: foo(\h+)bar parsed_regex: foo(\h+)bar str: foo	bar result_expr: $1 expected_results 	
327_y: OK regex: (\H+)(\h) parsed_regex: (\H+)(\h) str: foo	bar result_expr: $1-$2 expected_results foo-	
328_y: OK regex: (\h+)(\H) parsed_regex: (\h+)(\H) str: foo	bar result_expr: $1-$2 expected_results 	-b
329_y: OK regex: foo(\h)bar parsed_regex: foo(\h)bar str: foo	bar result_expr: $1 expected_results 	
330_y: OK regex: (\H)(\h) parsed_regex: (\H)(\h) str: foo	bar result_expr: $1-$2 expected_results o-	
331_y: OK regex: (\h)(\H) parsed_regex: (\h)(\H) str: foo	bar result_expr: $1-$2 expected_results 	-b
332_y: OK regex: foo(\v+)bar parsed_regex: foo(\v+)bar str: foo


bar result_expr: $1 expected_results 



333_y: OK regex: (\V+)(\v) parsed_regex: (\V+)(\v) str: foo


bar result_expr: $1-$2 expected_results foo-
334_y: OK regex: (\v+)(\V) parsed_regex: (\v+)(\V) str: foo


bar result_expr: $1-$2 expected_results 


-b
335_y: OK regex: foo(\v)bar parsed_regex: foo(\v)bar str: foobar result_expr: $1 expected_results 
336_y: OK regex: (\V)(\v) parsed_regex: (\V)(\v) str: foobar result_expr: $1-$2 expected_results o-
337_y: OK regex: (\v)(\V) parsed_regex: (\v)(\V) str: foobar result_expr: $1-$2 expected_results -b
338_y: OK regex: (?:(?i)a)b parsed_regex: (?:(?i)a)b str: ab result_expr: $& expected_results ab
339_y: OK regex: ((?i)a)b parsed_regex: ((?i)a)b str: ab result_expr: $&:$1 expected_results ab:a
340_y: OK regex: (?:(?i)a)b parsed_regex: (?:(?i)a)b str: Ab result_expr: $& expected_results Ab
341_y: OK regex: ((?i)a)b parsed_regex: ((?i)a)b str: Ab result_expr: $&:$1 expected_results Ab:A
342_n: OK regex: (?:(?i)a)b parsed_regex: (?:(?i)a)b str: aB result_expr: - expected_results -
343_n: OK regex: ((?i)a)b parsed_regex: ((?i)a)b str: aB result_expr: - expected_results -
344_y: OK regex: (?i:a)b parsed_regex: (?i:a)b str: ab result_expr: $& expected_results ab
345_y: OK regex: ((?i:a))b parsed_regex: ((?i:a))b str: ab result_expr: $&:$1 expected_results ab:a
346_y: OK regex: (?i:a)b parsed_regex: (?i:a)b str: Ab result_expr: $& expected_results Ab
347_y: OK regex: ((?i:a))b parsed_regex: ((?i:a))b str: Ab result_expr: $&:$1 expected_results Ab:A
348_n: OK regex: (?i:a)b parsed_regex: (?i:a)b str: aB result_expr: - expected_results -
349_n: OK regex: ((?i:a))b parsed_regex: ((?i:a))b str: aB result_expr: - expected_results -
350_y: OK regex: (?:(?-i)a)b parsed_regex: (?:(?-i)a)b str: ab result_expr: $& expected_results ab
351_y: OK regex: ((?-i)a)b parsed_regex: ((?-i)a)b str: ab result_expr: $&:$1 expected_results ab:a
352_y: OK regex: (?:(?-i)a)b parsed_regex: (?:(?-i)a)b str: aB result_expr: $& expected_results aB
353_y: OK regex: ((?-i)a)b parsed_regex: ((?-i)a)b str: aB result_expr: $&:$1 expected_results aB:a
354_n: OK regex: (?:(?-i)a)b parsed_regex: (?:(?-i)a)b str: Ab result_expr: - expected_results -
355_n: OK regex: ((?-i)a)b parsed_regex: ((?-i)a)b str: Ab result_expr: - expected_results -
356_y: OK regex: (?:(?-i)a)b parsed_regex: (?:(?-i)a)b str: aB result_expr: $& expected_results aB
357_y: OK regex: ((?-i)a)b parsed_regex: ((?-i)a)b str: aB result_expr: $1 expected_results a
358_n: OK regex: (?:(?-i)a)b parsed_regex: (?:(?-i)a)b str: AB result_expr: - expected_results -
359_n: OK regex: ((?-i)a)b parsed_regex: ((?-i)a)b str: AB result_expr: - expected_results -
360_y: OK regex: (?-i:a)b parsed_regex: (?-i:a)b str: ab result_expr: $& expected_results ab
361_y: OK regex: ((?-i:a))b parsed_regex: ((?-i:a))b str: ab result_expr: $&:$1 expected_results ab:a
362_y: OK regex: (?-i:a)b parsed_regex: (?-i:a)b str: aB result_expr: $& expected_results aB
363_y: OK regex: ((?-i:a))b parsed_regex: ((?-i:a))b str: aB result_expr: $&:$1 expected_results aB:a
364_n: OK regex: (?-i:a)b parsed_regex: (?-i:a)b str: Ab result_expr: - expected_results -
365_n: OK regex: ((?-i:a))b parsed_regex: ((?-i:a))b str: Ab result_expr: - expected_results -
366_y: OK regex: (?-i:a)b parsed_regex: (?-i:a)b str: aB result_expr: $& expected_results aB
367_y: OK regex: ((?-i:a))b parsed_regex: ((?-i:a))b str: aB result_expr: $1 expected_results a
368_n: OK regex: (?-i:a)b parsed_regex: (?-i:a)b str: AB result_expr: - expected_results -
369_n: OK regex: ((?-i:a))b parsed_regex: ((?-i:a))b str: AB result_expr: - expected_results -
370_n: OK regex: ((?-i:a.))b parsed_regex: ((?-i:a.))b str: a
B result_expr: - expected_results -
371_n: OK regex: ((?-i:a\\N))b parsed_regex: ((?-i:a\\N))b str: a
B result_expr: - expected_results -
372_y: OK regex: ((?s-i:a.))b parsed_regex: ((?s-i:a.))b str: a
B result_expr: $1 expected_results a

373_n: OK regex: ((?s-i:a\\N))b parsed_regex: ((?s-i:a\\N))b str: a
B result_expr: - expected_results -
374_n: OK regex: ((?s-i:a.))b parsed_regex: ((?s-i:a.))b str: B
B result_expr: - expected_results -
375_n: OK regex: ((?s-i:a\\N))b parsed_regex: ((?s-i:a\\N))b str: B
B result_expr: - expected_results -
376_n: OK regex: ^(?:a?b?)*\$ parsed_regex: ^(?:a?b?)*\$ str: a-- result_expr: - expected_results -
377_y: OK regex: ((?s)^a(.))((?m)^b\$) parsed_regex: ((?s)^a(.))((?m)^b\$) str: a
b
c
 result_expr: $1;$2;$3 expected_results a
;
;b
378_y: OK regex: ((?m)^b\$) parsed_regex: ((?m)^b\$) str: a
b
c
 result_expr: $1 expected_results b
379_y: OK regex: (?m)^b parsed_regex: (?m)^b str: a
b
 result_expr: $& expected_results b
380_y: OK regex: (?m)^(b) parsed_regex: (?m)^(b) str: a
b
 result_expr: $1 expected_results b
381_y: OK regex: ((?m)^b) parsed_regex: ((?m)^b) str: a
b
 result_expr: $1 expected_results b
382_y: OK regex: \n((?m)^b) parsed_regex: \n((?m)^b) str: a
b
 result_expr: $1 expected_results b
383_n: OK regex: ^b parsed_regex: ^b str: a
b
c
 result_expr: - expected_results -
384_n: OK regex: ()^b parsed_regex: ()^b str: a
b
c
 result_expr: - expected_results -
385_y: OK regex: ((?m)^b) parsed_regex: ((?m)^b) str: a
b
c
 result_expr: $1 expected_results b
386_y: OK regex: \Z parsed_regex: \Z str: a
b
 result_expr: $-[0] expected_results 3
387_y: OK regex: \z parsed_regex: \z str: a
b
 result_expr: $-[0] expected_results 4
388_y: OK regex: \$ parsed_regex: \$ str: a
b
 result_expr: $-[0] expected_results 3
389_y: OK regex: \Z parsed_regex: \Z str: b
a
 result_expr: $-[0] expected_results 3
390_y: OK regex: \z parsed_regex: \z str: b
a
 result_expr: $-[0] expected_results 4
391_y: OK regex: \$ parsed_regex: \$ str: b
a
 result_expr: $-[0] expected_results 3
392_y: OK regex: \Z parsed_regex: \Z str: b
a result_expr: $-[0] expected_results 3
393_y: OK regex: \z parsed_regex: \z str: b
a result_expr: $-[0] expected_results 3
394_y: OK regex: \$ parsed_regex: \$ str: b
a result_expr: $-[0] expected_results 3
395_y: OK regex: \Z parsed_regex: \Z str: a
b
 result_expr: $-[0] expected_results 3
396_y: OK regex: \z parsed_regex: \z str: a
b
 result_expr: $-[0] expected_results 4
397_y: OK regex: \$ parsed_regex: \$ str: a
b
 result_expr: $-[0] expected_results 1
398_y: OK regex: \Z parsed_regex: \Z str: b
a
 result_expr: $-[0] expected_results 3
399_y: OK regex: \z parsed_regex: \z str: b
a
 result_expr: $-[0] expected_results 4
400_y: OK regex: \$ parsed_regex: \$ str: b
a
 result_expr: $-[0] expected_results 1
401_y: OK regex: \Z parsed_regex: \Z str: b
a result_expr: $-[0] expected_results 3
402_y: OK regex: \z parsed_regex: \z str: b
a result_expr: $-[0] expected_results 3
403_y: OK regex: \$ parsed_regex: \$ str: b
a result_expr: $-[0] expected_results 1
404_n: OK regex: a\Z parsed_regex: a\Z str: a
b
 result_expr: - expected_results -
405_n: OK regex: a\z parsed_regex: a\z str: a
b
 result_expr: - expected_results -
406_n: OK regex: a\$ parsed_regex: a\$ str: a
b
 result_expr: - expected_results -
407_y: OK regex: a\Z parsed_regex: a\Z str: b
a
 result_expr: $-[0] expected_results 2
408_n: OK regex: a\z parsed_regex: a\z str: b
a
 result_expr: - expected_results -
409_y: OK regex: a\$ parsed_regex: a\$ str: b
a
 result_expr: $-[0] expected_results 2
410_y: OK regex: a\Z parsed_regex: a\Z str: b
a result_expr: $-[0] expected_results 2
411_y: OK regex: a\z parsed_regex: a\z str: b
a result_expr: $-[0] expected_results 2
412_y: OK regex: a\$ parsed_regex: a\$ str: b
a result_expr: $-[0] expected_results 2
413_n: OK regex: a\Z parsed_regex: a\Z str: a
b
 result_expr: - expected_results -
414_n: OK regex: a\z parsed_regex: a\z str: a
b
 result_expr: - expected_results -
415_y: OK regex: a\$ parsed_regex: a\$ str: a
b
 result_expr: $-[0] expected_results 0
416_y: OK regex: a\Z parsed_regex: a\Z str: b
a
 result_expr: $-[0] expected_results 2
417_n: OK regex: a\z parsed_regex: a\z str: b
a
 result_expr: - expected_results -
418_y: OK regex: a\$ parsed_regex: a\$ str: b
a
 result_expr: $-[0] expected_results 2
419_y: OK regex: a\Z parsed_regex: a\Z str: b
a result_expr: $-[0] expected_results 2
420_y: OK regex: a\z parsed_regex: a\z str: b
a result_expr: $-[0] expected_results 2
421_y: OK regex: a\$ parsed_regex: a\$ str: b
a result_expr: $-[0] expected_results 2
422_n: OK regex: aa\Z parsed_regex: aa\Z str: aa
b
 result_expr: - expected_results -
423_n: OK regex: aa\z parsed_regex: aa\z str: aa
b
 result_expr: - expected_results -
424_n: OK regex: aa\$ parsed_regex: aa\$ str: aa
b
 result_expr: - expected_results -
425_y: OK regex: aa\Z parsed_regex: aa\Z str: b
aa
 result_expr: $-[0] expected_results 2
426_n: OK regex: aa\z parsed_regex: aa\z str: b
aa
 result_expr: - expected_results -
427_y: OK regex: aa\$ parsed_regex: aa\$ str: b
aa
 result_expr: $-[0] expected_results 2
428_y: OK regex: aa\Z parsed_regex: aa\Z str: b
aa result_expr: $-[0] expected_results 2
429_y: OK regex: aa\z parsed_regex: aa\z str: b
aa result_expr: $-[0] expected_results 2
430_y: OK regex: aa\$ parsed_regex: aa\$ str: b
aa result_expr: $-[0] expected_results 2
431_n: OK regex: aa\Z parsed_regex: aa\Z str: aa
b
 result_expr: - expected_results -
432_n: OK regex: aa\z parsed_regex: aa\z str: aa
b
 result_expr: - expected_results -
433_y: OK regex: aa\$ parsed_regex: aa\$ str: aa
b
 result_expr: $-[0] expected_results 0
434_y: OK regex: aa\Z parsed_regex: aa\Z str: b
aa
 result_expr: $-[0] expected_results 2
435_n: OK regex: aa\z parsed_regex: aa\z str: b
aa
 result_expr: - expected_results -
436_y: OK regex: aa\$ parsed_regex: aa\$ str: b
aa
 result_expr: $-[0] expected_results 2
437_y: OK regex: aa\Z parsed_regex: aa\Z str: b
aa result_expr: $-[0] expected_results 2
438_y: OK regex: aa\z parsed_regex: aa\z str: b
aa result_expr: $-[0] expected_results 2
439_y: OK regex: aa\$ parsed_regex: aa\$ str: b
aa result_expr: $-[0] expected_results 2
440_n: OK regex: aa\Z parsed_regex: aa\Z str: ac
b
 result_expr: - expected_results -
441_n: OK regex: aa\z parsed_regex: aa\z str: ac
b
 result_expr: - expected_results -
442_n: OK regex: aa\$ parsed_regex: aa\$ str: ac
b
 result_expr: - expected_results -
443_n: OK regex: aa\Z parsed_regex: aa\Z str: b
ac
 result_expr: - expected_results -
444_n: OK regex: aa\z parsed_regex: aa\z str: b
ac
 result_expr: - expected_results -
445_n: OK regex: aa\$ parsed_regex: aa\$ str: b
ac
 result_expr: - expected_results -
446_n: OK regex: aa\Z parsed_regex: aa\Z str: b
ac result_expr: - expected_results -
447_n: OK regex: aa\z parsed_regex: aa\z str: b
ac result_expr: - expected_results -
448_n: OK regex: aa\$ parsed_regex: aa\$ str: b
ac result_expr: - expected_results -
449_n: OK regex: aa\Z parsed_regex: aa\Z str: ac
b
 result_expr: - expected_results -
450_n: OK regex: aa\z parsed_regex: aa\z str: ac
b
 result_expr: - expected_results -
451_n: OK regex: aa\$ parsed_regex: aa\$ str: ac
b
 result_expr: - expected_results -
452_n: OK regex: aa\Z parsed_regex: aa\Z str: b
ac
 result_expr: - expected_results -
453_n: OK regex: aa\z parsed_regex: aa\z str: b
ac
 result_expr: - expected_results -
454_n: OK regex: aa\$ parsed_regex: aa\$ str: b
ac
 result_expr: - expected_results -
455_n: OK regex: aa\Z parsed_regex: aa\Z str: b
ac result_expr: - expected_results -
456_n: OK regex: aa\z parsed_regex: aa\z str: b
ac result_expr: - expected_results -
457_n: OK regex: aa\$ parsed_regex: aa\$ str: b
ac result_expr: - expected_results -
458_n: OK regex: aa\Z parsed_regex: aa\Z str: ca
b
 result_expr: - expected_results -
459_n: OK regex: aa\z parsed_regex: aa\z str: ca
b
 result_expr: - expected_results -
460_n: OK regex: aa\$ parsed_regex: aa\$ str: ca
b
 result_expr: - expected_results -
461_n: OK regex: aa\Z parsed_regex: aa\Z str: b
ca
 result_expr: - expected_results -
462_n: OK regex: aa\z parsed_regex: aa\z str: b
ca
 result_expr: - expected_results -
463_n: OK regex: aa\$ parsed_regex: aa\$ str: b
ca
 result_expr: - expected_results -
464_n: OK regex: aa\Z parsed_regex: aa\Z str: b
ca result_expr: - expected_results -
465_n: OK regex: aa\z parsed_regex: aa\z str: b
ca result_expr: - expected_results -
466_n: OK regex: aa\$ parsed_regex: aa\$ str: b
ca result_expr: - expected_results -
467_n: OK regex: aa\Z parsed_regex: aa\Z str: ca
b
 result_expr: - expected_results -
468_n: OK regex: aa\z parsed_regex: aa\z str: ca
b
 result_expr: - expected_results -
469_n: OK regex: aa\$ parsed_regex: aa\$ str: ca
b
 result_expr: - expected_results -
470_n: OK regex: aa\Z parsed_regex: aa\Z str: b
ca
 result_expr: - expected_results -
471_n: OK regex: aa\z parsed_regex: aa\z str: b
ca
 result_expr: - expected_results -
472_n: OK regex: aa\$ parsed_regex: aa\$ str: b
ca
 result_expr: - expected_results -
473_n: OK regex: aa\Z parsed_regex: aa\Z str: b
ca result_expr: - expected_results -
474_n: OK regex: aa\z parsed_regex: aa\z str: b
ca result_expr: - expected_results -
475_n: OK regex: aa\$ parsed_regex: aa\$ str: b
ca result_expr: - expected_results -
476_n: OK regex: ab\Z parsed_regex: ab\Z str: ab
b
 result_expr: - expected_results -
477_n: OK regex: ab\z parsed_regex: ab\z str: ab
b
 result_expr: - expected_results -
478_n: OK regex: ab\$ parsed_regex: ab\$ str: ab
b
 result_expr: - expected_results -
479_y: OK regex: ab\Z parsed_regex: ab\Z str: b
ab
 result_expr: $-[0] expected_results 2
480_n: OK regex: ab\z parsed_regex: ab\z str: b
ab
 result_expr: - expected_results -
481_y: OK regex: ab\$ parsed_regex: ab\$ str: b
ab
 result_expr: $-[0] expected_results 2
482_y: OK regex: ab\Z parsed_regex: ab\Z str: b
ab result_expr: $-[0] expected_results 2
483_y: OK regex: ab\z parsed_regex: ab\z str: b
ab result_expr: $-[0] expected_results 2
484_y: OK regex: ab\$ parsed_regex: ab\$ str: b
ab result_expr: $-[0] expected_results 2
485_n: OK regex: ab\Z parsed_regex: ab\Z str: ab
b
 result_expr: - expected_results -
486_n: OK regex: ab\z parsed_regex: ab\z str: ab
b
 result_expr: - expected_results -
487_y: OK regex: ab\$ parsed_regex: ab\$ str: ab
b
 result_expr: $-[0] expected_results 0
488_y: OK regex: ab\Z parsed_regex: ab\Z str: b
ab
 result_expr: $-[0] expected_results 2
489_n: OK regex: ab\z parsed_regex: ab\z str: b
ab
 result_expr: - expected_results -
490_y: OK regex: ab\$ parsed_regex: ab\$ str: b
ab
 result_expr: $-[0] expected_results 2
491_y: OK regex: ab\Z parsed_regex: ab\Z str: b
ab result_expr: $-[0] expected_results 2
492_y: OK regex: ab\z parsed_regex: ab\z str: b
ab result_expr: $-[0] expected_results 2
493_y: OK regex: ab\$ parsed_regex: ab\$ str: b
ab result_expr: $-[0] expected_results 2
494_n: OK regex: ab\Z parsed_regex: ab\Z str: ac
b
 result_expr: - expected_results -
495_n: OK regex: ab\z parsed_regex: ab\z str: ac
b
 result_expr: - expected_results -
496_n: OK regex: ab\$ parsed_regex: ab\$ str: ac
b
 result_expr: - expected_results -
497_n: OK regex: ab\Z parsed_regex: ab\Z str: b
ac
 result_expr: - expected_results -
498_n: OK regex: ab\z parsed_regex: ab\z str: b
ac
 result_expr: - expected_results -
499_n: OK regex: ab\$ parsed_regex: ab\$ str: b
ac
 result_expr: - expected_results -
500_n: OK regex: ab\Z parsed_regex: ab\Z str: b
ac result_expr: - expected_results -
501_n: OK regex: ab\z parsed_regex: ab\z str: b
ac result_expr: - expected_results -
502_n: OK regex: ab\$ parsed_regex: ab\$ str: b
ac result_expr: - expected_results -
503_n: OK regex: ab\Z parsed_regex: ab\Z str: ac
b
 result_expr: - expected_results -
504_n: OK regex: ab\z parsed_regex: ab\z str: ac
b
 result_expr: - expected_results -
505_n: OK regex: ab\$ parsed_regex: ab\$ str: ac
b
 result_expr: - expected_results -
506_n: OK regex: ab\Z parsed_regex: ab\Z str: b
ac
 result_expr: - expected_results -
507_n: OK regex: ab\z parsed_regex: ab\z str: b
ac
 result_expr: - expected_results -
508_n: OK regex: ab\$ parsed_regex: ab\$ str: b
ac
 result_expr: - expected_results -
509_n: OK regex: ab\Z parsed_regex: ab\Z str: b
ac result_expr: - expected_results -
510_n: OK regex: ab\z parsed_regex: ab\z str: b
ac result_expr: - expected_results -
511_n: OK regex: ab\$ parsed_regex: ab\$ str: b
ac result_expr: - expected_results -
512_n: OK regex: ab\Z parsed_regex: ab\Z str: ca
b
 result_expr: - expected_results -
513_n: OK regex: ab\z parsed_regex: ab\z str: ca
b
 result_expr: - expected_results -
514_n: OK regex: ab\$ parsed_regex: ab\$ str: ca
b
 result_expr: - expected_results -
515_n: OK regex: ab\Z parsed_regex: ab\Z str: b
ca
 result_expr: - expected_results -
516_n: OK regex: ab\z parsed_regex: ab\z str: b
ca
 result_expr: - expected_results -
517_n: OK regex: ab\$ parsed_regex: ab\$ str: b
ca
 result_expr: - expected_results -
518_n: OK regex: ab\Z parsed_regex: ab\Z str: b
ca result_expr: - expected_results -
519_n: OK regex: ab\z parsed_regex: ab\z str: b
ca result_expr: - expected_results -
520_n: OK regex: ab\$ parsed_regex: ab\$ str: b
ca result_expr: - expected_results -
521_n: OK regex: ab\Z parsed_regex: ab\Z str: ca
b
 result_expr: - expected_results -
522_n: OK regex: ab\z parsed_regex: ab\z str: ca
b
 result_expr: - expected_results -
523_n: OK regex: ab\$ parsed_regex: ab\$ str: ca
b
 result_expr: - expected_results -
524_n: OK regex: ab\Z parsed_regex: ab\Z str: b
ca
 result_expr: - expected_results -
525_n: OK regex: ab\z parsed_regex: ab\z str: b
ca
 result_expr: - expected_results -
526_n: OK regex: ab\$ parsed_regex: ab\$ str: b
ca
 result_expr: - expected_results -
527_n: OK regex: ab\Z parsed_regex: ab\Z str: b
ca result_expr: - expected_results -
528_n: OK regex: ab\z parsed_regex: ab\z str: b
ca result_expr: - expected_results -
529_n: OK regex: ab\$ parsed_regex: ab\$ str: b
ca result_expr: - expected_results -
530_n: OK regex: abb\Z parsed_regex: abb\Z str: abb
b
 result_expr: - expected_results -
531_n: OK regex: abb\z parsed_regex: abb\z str: abb
b
 result_expr: - expected_results -
532_n: OK regex: abb\$ parsed_regex: abb\$ str: abb
b
 result_expr: - expected_results -
533_y: OK regex: abb\Z parsed_regex: abb\Z str: b
abb
 result_expr: $-[0] expected_results 2
534_n: OK regex: abb\z parsed_regex: abb\z str: b
abb
 result_expr: - expected_results -
535_y: OK regex: abb\$ parsed_regex: abb\$ str: b
abb
 result_expr: $-[0] expected_results 2
536_y: OK regex: abb\Z parsed_regex: abb\Z str: b
abb result_expr: $-[0] expected_results 2
537_y: OK regex: abb\z parsed_regex: abb\z str: b
abb result_expr: $-[0] expected_results 2
538_y: OK regex: abb\$ parsed_regex: abb\$ str: b
abb result_expr: $-[0] expected_results 2
539_n: OK regex: abb\Z parsed_regex: abb\Z str: abb
b
 result_expr: - expected_results -
540_n: OK regex: abb\z parsed_regex: abb\z str: abb
b
 result_expr: - expected_results -
541_y: OK regex: abb\$ parsed_regex: abb\$ str: abb
b
 result_expr: $-[0] expected_results 0
542_y: OK regex: abb\Z parsed_regex: abb\Z str: b
abb
 result_expr: $-[0] expected_results 2
543_n: OK regex: abb\z parsed_regex: abb\z str: b
abb
 result_expr: - expected_results -
544_y: OK regex: abb\$ parsed_regex: abb\$ str: b
abb
 result_expr: $-[0] expected_results 2
545_y: OK regex: abb\Z parsed_regex: abb\Z str: b
abb result_expr: $-[0] expected_results 2
546_y: OK regex: abb\z parsed_regex: abb\z str: b
abb result_expr: $-[0] expected_results 2
547_y: OK regex: abb\$ parsed_regex: abb\$ str: b
abb result_expr: $-[0] expected_results 2
548_n: OK regex: abb\Z parsed_regex: abb\Z str: ac
b
 result_expr: - expected_results -
549_n: OK regex: abb\z parsed_regex: abb\z str: ac
b
 result_expr: - expected_results -
550_n: OK regex: abb\$ parsed_regex: abb\$ str: ac
b
 result_expr: - expected_results -
551_n: OK regex: abb\Z parsed_regex: abb\Z str: b
ac
 result_expr: - expected_results -
552_n: OK regex: abb\z parsed_regex: abb\z str: b
ac
 result_expr: - expected_results -
553_n: OK regex: abb\$ parsed_regex: abb\$ str: b
ac
 result_expr: - expected_results -
554_n: OK regex: abb\Z parsed_regex: abb\Z str: b
ac result_expr: - expected_results -
555_n: OK regex: abb\z parsed_regex: abb\z str: b
ac result_expr: - expected_results -
556_n: OK regex: abb\$ parsed_regex: abb\$ str: b
ac result_expr: - expected_results -
557_n: OK regex: abb\Z parsed_regex: abb\Z str: ac
b
 result_expr: - expected_results -
558_n: OK regex: abb\z parsed_regex: abb\z str: ac
b
 result_expr: - expected_results -
559_n: OK regex: abb\$ parsed_regex: abb\$ str: ac
b
 result_expr: - expected_results -
560_n: OK regex: abb\Z parsed_regex: abb\Z str: b
ac
 result_expr: - expected_results -
561_n: OK regex: abb\z parsed_regex: abb\z str: b
ac
 result_expr: - expected_results -
562_n: OK regex: abb\$ parsed_regex: abb\$ str: b
ac
 result_expr: - expected_results -
563_n: OK regex: abb\Z parsed_regex: abb\Z str: b
ac result_expr: - expected_results -
564_n: OK regex: abb\z parsed_regex: abb\z str: b
ac result_expr: - expected_results -
565_n: OK regex: abb\$ parsed_regex: abb\$ str: b
ac result_expr: - expected_results -
566_n: OK regex: abb\Z parsed_regex: abb\Z str: ca
b
 result_expr: - expected_results -
567_n: OK regex: abb\z parsed_regex: abb\z str: ca
b
 result_expr: - expected_results -
568_n: OK regex: abb\$ parsed_regex: abb\$ str: ca
b
 result_expr: - expected_results -
569_n: OK regex: abb\Z parsed_regex: abb\Z str: b
ca
 result_expr: - expected_results -
570_n: OK regex: abb\z parsed_regex: abb\z str: b
ca
 result_expr: - expected_results -
571_n: OK regex: abb\$ parsed_regex: abb\$ str: b
ca
 result_expr: - expected_results -
572_n: OK regex: abb\Z parsed_regex: abb\Z str: b
ca result_expr: - expected_results -
573_n: OK regex: abb\z parsed_regex: abb\z str: b
ca result_expr: - expected_results -
574_n: OK regex: abb\$ parsed_regex: abb\$ str: b
ca result_expr: - expected_results -
575_n: OK regex: abb\Z parsed_regex: abb\Z str: ca
b
 result_expr: - expected_results -
576_n: OK regex: abb\z parsed_regex: abb\z str: ca
b
 result_expr: - expected_results -
577_n: OK regex: abb\$ parsed_regex: abb\$ str: ca
b
 result_expr: - expected_results -
578_n: OK regex: abb\Z parsed_regex: abb\Z str: b
ca
 result_expr: - expected_results -
579_n: OK regex: abb\z parsed_regex: abb\z str: b
ca
 result_expr: - expected_results -
580_n: OK regex: abb\$ parsed_regex: abb\$ str: b
ca
 result_expr: - expected_results -
581_n: OK regex: abb\Z parsed_regex: abb\Z str: b
ca result_expr: - expected_results -
582_n: OK regex: abb\z parsed_regex: abb\z str: b
ca result_expr: - expected_results -
583_n: OK regex: abb\$ parsed_regex: abb\$ str: b
ca result_expr: - expected_results -
584_y: OK regex: \Aa\$ parsed_regex: \Aa\$ str: a

 result_expr: $& expected_results a
585_y: OK regex: (?i:.[b].) parsed_regex: (?i:.[b].) str: abd result_expr: $& expected_results abd
586_y: OK regex: (?i:\\N[b]\\N) parsed_regex: (?i:\\N[b]\\N) str: abd result_expr: $& expected_results abd
587_y: OK Warning: Parsed regex does not match. regex: \\N {1} parsed_regex: \\N{1} str: abbbbc result_expr: $& expected_results a
588_y: OK Warning: Parsed regex does not match. regex: \\N {1} parsed_regex: \\N{1} str: abbbbc result_expr: $-[0] expected_results 0
589_y: OK Warning: Parsed regex does not match. regex: \\N {1} parsed_regex: \\N{1} str: abbbbc result_expr: $+[0] expected_results 1
590_y: OK Warning: Parsed regex does not match. regex: \\N {3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $& expected_results abbb
591_y: OK Warning: Parsed regex does not match. regex: \\N {3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $-[0] expected_results 0
592_y: OK Warning: Parsed regex does not match. regex: \\N {3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $+[0] expected_results 4
593_y: OK Warning: Parsed regex does not match. regex: a\\N c parsed_regex: a\\Nc str: abc result_expr: $& expected_results abc
594_y: OK Warning: Parsed regex does not match. regex: a\\N *c parsed_regex: a\\N*c str: axyzc result_expr: $& expected_results axyzc
595_n: OK Warning: Parsed regex does not match. regex: a\\N *c parsed_regex: a\\N*c str: axyzd result_expr: - expected_results -
596_yS: OK regex: [a b] parsed_regex: [a b] str:   result_expr: $& expected_results  
597_n: OK Warning: Parsed regex does not match. regex: [a b] parsed_regex: [ab] str:   result_expr: - expected_results -
598_y: OK Warning: Parsed regex does not match. regex: [a\ b] parsed_regex: [a b] str:   result_expr: $& expected_results  
599_n: OK Warning: Parsed regex does not match. regex: [ ^ a b ] parsed_regex: [^ab] str: a result_expr: - expected_results -
600_n: OK Warning: Parsed regex does not match. regex: [ ^ a b ] parsed_regex: [^ab] str: b result_expr: - expected_results -
601_y: OK Warning: Parsed regex does not match. regex: [ ^ a b ] parsed_regex: [^ab] str: A result_expr: $& expected_results A
602_yS: OK regex: (?x:[a b]) parsed_regex: (?x:[a b]) str:   result_expr: $& expected_results  
603_n: OK Warning: Parsed regex does not match. regex: (?xx:[a b]) parsed_regex: (?xx:[ab]) str:   result_expr: - expected_results -
604_yS: OK regex: (?x)[a b] parsed_regex: (?x)[a b] str:   result_expr: $& expected_results  
605_n: OK Warning: Parsed regex does not match. regex: (?xx)[a b] parsed_regex: (?xx)[ab] str:   result_expr: - expected_results -
606_yS: OK regex: (?-x:[a b]) parsed_regex: (?-x:[a b]) str:   result_expr: $& expected_results  
607_y: OK Warning: Parsed regex does not match. regex: \\N {1} parsed_regex: \\N{1} str: abbbbc result_expr: $& expected_results a
608_y: OK Warning: Parsed regex does not match. regex: \\N {1} parsed_regex: \\N{1} str: abbbbc result_expr: $-[0] expected_results 0
609_y: OK Warning: Parsed regex does not match. regex: \\N {1} parsed_regex: \\N{1} str: abbbbc result_expr: $+[0] expected_results 1
610_y: OK Warning: Parsed regex does not match. regex: \\N {3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $& expected_results abbb
611_y: OK Warning: Parsed regex does not match. regex: \\N {3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $-[0] expected_results 0
612_y: OK Warning: Parsed regex does not match. regex: \\N {3,4} parsed_regex: \\N{3,4} str: abbbbc result_expr: $+[0] expected_results 4
613_y: OK Warning: Parsed regex does not match. regex: a\\N c parsed_regex: a\\Nc str: abc result_expr: $& expected_results abc
614_y: OK Warning: Parsed regex does not match. regex: a\\N *c parsed_regex: a\\N*c str: axyzc result_expr: $& expected_results axyzc
615_n: OK Warning: Parsed regex does not match. regex: a\\N *c parsed_regex: a\\N*c str: axyzd result_expr: - expected_results -
616_y: OK regex: [#] parsed_regex: [#] str: a#b result_expr: $& expected_results #
617_y: OK regex: [#]b parsed_regex: [#]b str: a#b result_expr: $& expected_results #b
618_y: OK regex: [#] parsed_regex: [#] str: a#b result_expr: $& expected_results #
619_y: OK regex: [#]b parsed_regex: [#]b str: a#b result_expr: $& expected_results #b
620_y: OK regex: (?'n'foo) \g{n} parsed_regex: (?'n'foo) \g{n} str: ..foo foo.. result_expr: $1 expected_results foo
621_y: OK regex: (?'n'foo) \g{ n } parsed_regex: (?'n'foo) \g{ n } str: ..foo foo.. result_expr: $1 expected_results foo
622_yM: OK regex: (?'n'foo) \g{n} parsed_regex: (?'n'foo) \g{n} str: ..foo foo.. result_expr: $+{n} expected_results foo
623_y: OK regex: (?<n>foo) \g{n} parsed_regex: (?<n>foo) \g{n} str: ..foo foo.. result_expr: $1 expected_results foo
624_yM: OK regex: (?<n>foo) \g{n} parsed_regex: (?<n>foo) \g{n} str: ..foo foo.. result_expr: $+{n} expected_results foo
625_y: OK regex: (?<as>as) (\w+) \g{as} (\w+) parsed_regex: (?<as>as) (\w+) \g{as} (\w+) str: as easy as pie result_expr: $1-$2-$3 expected_results as-easy-pie
626_y: OK regex: (?'n'foo) \k<n> parsed_regex: (?'n'foo) \k<n> str: ..foo foo.. result_expr: $1 expected_results foo
627_yM: OK regex: (?'n'foo) \k<n> parsed_regex: (?'n'foo) \k<n> str: ..foo foo.. result_expr: $+{n} expected_results foo
628_y: OK regex: (?<n>foo) \k'n' parsed_regex: (?<n>foo) \k'n' str: ..foo foo.. result_expr: $1 expected_results foo
629_yM: OK regex: (?<n>foo) \k'n' parsed_regex: (?<n>foo) \k'n' str: ..foo foo.. result_expr: $+{n} expected_results foo
630_yM: OK regex: (?'a1'foo) \k'a1' parsed_regex: (?'a1'foo) \k'a1' str: ..foo foo.. result_expr: $+{a1} expected_results foo
631_yM: OK regex: (?<a1>foo) \k<a1> parsed_regex: (?<a1>foo) \k<a1> str: ..foo foo.. result_expr: $+{a1} expected_results foo
632_yM: OK regex: (?'_'foo) \k'_' parsed_regex: (?'_'foo) \k'_' str: ..foo foo.. result_expr: $+{_} expected_results foo
633_yM: OK regex: (?<_>foo) \k<_> parsed_regex: (?<_>foo) \k<_> str: ..foo foo.. result_expr: $+{_} expected_results foo
634_yM: OK regex: (?'_0_'foo) \k'_0_' parsed_regex: (?'_0_'foo) \k'_0_' str: ..foo foo.. result_expr: $+{_0_} expected_results foo
635_yM: OK regex: (?<_0_>foo) \k<_0_> parsed_regex: (?<_0_>foo) \k<_0_> str: ..foo foo.. result_expr: $+{_0_} expected_results foo
636_y: OK regex: (?<as>as) (\w+) \k<as> (\w+) parsed_regex: (?<as>as) (\w+) \k<as> (\w+) str: as easy as pie result_expr: $1-$2-$3 expected_results as-easy-pie
637_y: OK regex: (?<as>as) (\w+) \k{as} (\w+) parsed_regex: (?<as>as) (\w+) \k{as} (\w+) str: as easy as pie result_expr: $1-$2-$3 expected_results as-easy-pie
638_y: OK regex: (?<as>as) (\w+) \k'as' (\w+) parsed_regex: (?<as>as) (\w+) \k'as' (\w+) str: as easy as pie result_expr: $1-$2-$3 expected_results as-easy-pie
639_y: OK regex: (?<as>as) (\w+) \k{ as } (\w+) parsed_regex: (?<as>as) (\w+) \k{ as } (\w+) str: as easy as pie result_expr: $1-$2-$3 expected_results as-easy-pie
640_y: OK Warning: Parsed regex does not match. regex: ^a(?#xxx){3}c parsed_regex: ^a{3}c str: aaac result_expr: $& expected_results aaac
641_y: OK Warning: Parsed regex does not match. regex: ^a (?#xxx) (?#yyy) {3}c parsed_regex: ^a{3}c str: aaac result_expr: $& expected_results aaac
642_y: OK regex: (?|(a)) parsed_regex: (?|(a)) str: a result_expr: $1-$+ expected_results a-a
643_y: OK regex: (?|a(.)b|d(.(o).)d|i(.)(.)j)(.) parsed_regex: (?|a(.)b|d(.(o).)d|i(.)(.)j)(.) str: d!o!da result_expr: $1-$2-$3 expected_results !o!-o-a
644_y: OK regex: (?|a(.)b|d(.(o).)d|i(.)(.)j)(.) parsed_regex: (?|a(.)b|d(.(o).)d|i(.)(.)j)(.) str: aabc result_expr: $1-$2-$3 expected_results a--c
645_y: OK regex: (?|a(.)b|d(.(o).)d|i(.)(.)j)(.) parsed_regex: (?|a(.)b|d(.(o).)d|i(.)(.)j)(.) str: ixyjp result_expr: $1-$2-$3 expected_results x-y-p
646_y: OK regex: (?|(?|(a)|(b))|(?|(c)|(d))) parsed_regex: (?|(?|(a)|(b))|(?|(c)|(d))) str: a result_expr: $1 expected_results a
647_y: OK regex: (?|(?|(a)|(b))|(?|(c)|(d))) parsed_regex: (?|(?|(a)|(b))|(?|(c)|(d))) str: b result_expr: $1 expected_results b
648_y: OK regex: (?|(?|(a)|(b))|(?|(c)|(d))) parsed_regex: (?|(?|(a)|(b))|(?|(c)|(d))) str: c result_expr: $1 expected_results c
649_y: OK regex: (?|(?|(a)|(b))|(?|(c)|(d))) parsed_regex: (?|(?|(a)|(b))|(?|(c)|(d))) str: d result_expr: $1 expected_results d
650_y: OK regex: (.)(?|(.)(.)x|(.)d)(.) parsed_regex: (.)(?|(.)(.)x|(.)d)(.) str: abcde result_expr: $1-$2-$3-$4-$5- expected_results b-c--e--
651_y: OK regex: (\\N)(?|(\\N)(\\N)x|(\\N)d)(\\N) parsed_regex: (\\N)(?|(\\N)(\\N)x|(\\N)d)(\\N) str: abcde result_expr: $1-$2-$3-$4-$5- expected_results b-c--e--
652_yM: OK regex: (?|(?<foo>x)) parsed_regex: (?|(?<foo>x)) str: x result_expr: $+{foo} expected_results x
653_yM: OK regex: (?|(?<foo>x)|(?<bar>y)) parsed_regex: (?|(?<foo>x)|(?<bar>y)) str: x result_expr: $+{foo} expected_results x
654_yM: OK regex: (?|(?<bar>y)|(?<foo>x)) parsed_regex: (?|(?<bar>y)|(?<foo>x)) str: x result_expr: $+{foo} expected_results x
655_yM: OK regex: (?<bar>)(?|(?<foo>x)) parsed_regex: (?<bar>)(?|(?<foo>x)) str: x result_expr: $+{foo} expected_results x
656_y: OK regex: foo\Kbar parsed_regex: foo\Kbar str: foobar result_expr: $& expected_results bar
657_y: OK regex: foo\t\n\r\f\a\ebar parsed_regex: foo\t\n\r\f\a\ebar str: foo	
bar result_expr: $& expected_results foo	
bar
658_y: OK regex: (foo) parsed_regex: (foo) str: foobar result_expr: $&-$1 expected_results foo-
659_y: OK regex: (?-n)(foo)(?n)(bar) parsed_regex: (?-n)(foo)(?n)(bar) str: foobar result_expr: $&-$1-$2 expected_results foobar-foo-
660_y: OK regex: (?-n:(foo)(?n:(bar))) parsed_regex: (?-n:(foo)(?n:(bar))) str: foobar result_expr: $&-$1-$2 expected_results foobar-foo-
661_y: OK Warning: Parsed regex does not match. regex: foo # Match foo parsed_regex: foo str: foobar result_expr: $& expected_results foo
662_y: OK Warning: Parsed regex does not match. regex: \x41\x42 parsed_regex: AB str: AB result_expr: $& expected_results AB
663_y: OK Warning: Parsed regex does not match. regex: \101\o{102} parsed_regex: AB str: AB result_expr: $& expected_results AB

Running perl_tests_lookahead:
0_y: OK regex: a(?!b). parsed_regex: a(?!b). str: abad result_expr: $& expected_results ad
1_y: OK regex: (?=)a parsed_regex: (?=)a str: a result_expr: $& expected_results a
2_y: OK regex: a(?=d). parsed_regex: a(?=d). str: abad result_expr: $& expected_results ad
3_y: OK regex: a(?=c|d). parsed_regex: a(?=c|d). str: abad result_expr: $& expected_results ad
4_y: OK regex: ^(?:b|a(?=(.)))*\1 parsed_regex: ^(?:b|a(?=(.)))*\1 str: abc result_expr: $& expected_results ab
5_y: OK regex: (?=(a+?))(\1ab) parsed_regex: (?=(a+?))(\1ab) str: aaab result_expr: $2 expected_results aab
6_n: OK regex: ^(?=(a+?))\1ab parsed_regex: ^(?=(a+?))\1ab str: aaab result_expr: - expected_results -
7_y: OK regex: (?=(a+?))(\1ab) parsed_regex: (?=(a+?))(\1ab) str: aaab result_expr: $2 expected_results aab
8_n: OK regex: ^(?=(a+?))\1ab parsed_regex: ^(?=(a+?))\1ab str: aaab result_expr: - expected_results -
9_y: OK regex: (.*)(?=c) parsed_regex: (.*)(?=c) str: abcd result_expr: $1 expected_results ab
10_yB: OK regex: (.*)(?=c)c parsed_regex: (.*)(?=c)c str: abcd result_expr: $1 expected_results ab
11_y: OK regex: (.*)(?=b|c) parsed_regex: (.*)(?=b|c) str: abcd result_expr: $1 expected_results ab
12_y: OK regex: (.*)(?=b|c)c parsed_regex: (.*)(?=b|c)c str: abcd result_expr: $1 expected_results ab
13_y: OK regex: (.*)(?=c|b) parsed_regex: (.*)(?=c|b) str: abcd result_expr: $1 expected_results ab
14_y: OK regex: (.*)(?=c|b)c parsed_regex: (.*)(?=c|b)c str: abcd result_expr: $1 expected_results ab
15_y: OK regex: (.*)(?=[bc]) parsed_regex: (.*)(?=[bc]) str: abcd result_expr: $1 expected_results ab
16_yB: OK regex: (.*)(?=[bc])c parsed_regex: (.*)(?=[bc])c str: abcd result_expr: $1 expected_results ab
17_y: OK regex: (.*?)(?=c) parsed_regex: (.*?)(?=c) str: abcd result_expr: $1 expected_results ab
18_yB: OK regex: (.*?)(?=c)c parsed_regex: (.*?)(?=c)c str: abcd result_expr: $1 expected_results ab
19_y: OK regex: (.*?)(?=b|c) parsed_regex: (.*?)(?=b|c) str: abcd result_expr: $1 expected_results a
20_y: OK regex: (.*?)(?=b|c)c parsed_regex: (.*?)(?=b|c)c str: abcd result_expr: $1 expected_results ab
21_y: OK regex: (.*?)(?=c|b) parsed_regex: (.*?)(?=c|b) str: abcd result_expr: $1 expected_results a
22_y: OK regex: (.*?)(?=c|b)c parsed_regex: (.*?)(?=c|b)c str: abcd result_expr: $1 expected_results ab
23_y: OK regex: (.*?)(?=[bc]) parsed_regex: (.*?)(?=[bc]) str: abcd result_expr: $1 expected_results a
24_yB: OK regex: (.*?)(?=[bc])c parsed_regex: (.*?)(?=[bc])c str: abcd result_expr: $1 expected_results ab
25_y: OK regex: ^(a*?)(?!(aa|aaaa)*\$)(?=a\z) parsed_regex: ^(a*?)(?!(aa|aaaa)*\$)(?=a\z) str: aaaaaaaa result_expr: $1 expected_results aaaaaaa
26_y: OK regex: a(?!b(?!c))(..) parsed_regex: a(?!b(?!c))(..) str: abababc result_expr: $1 expected_results bc
27_y: OK regex: a(?!b(?=a))(..) parsed_regex: a(?!b(?=a))(..) str: abababc result_expr: $1 expected_results bc
28_y: OK regex: X(\w+)(?=\s)|X(\w+) parsed_regex: X(\w+)(?=\s)|X(\w+) str: Xab result_expr: [$1-$2] expected_results [-ab]
29_y: OK regex: ^a*(?=b)b parsed_regex: ^a*(?=b)b str: ab result_expr: $& expected_results ab
30_y: OK regex: (?!\A)x parsed_regex: (?!\A)x str: a
xb
 result_expr: - expected_results -
31_n: OK regex: ^(o)(?!.*\1) parsed_regex: ^(o)(?!.*\1) str: Oo result_expr: - expected_results -
32_n: OK regex: .*a(?!(b|cd)*e).*f parsed_regex: .*a(?!(b|cd)*e).*f str: ......abef result_expr: - expected_results -
33_y: OK regex: ^(a*?)(?!(aa|aaaa)*\$) parsed_regex: ^(a*?)(?!(aa|aaaa)*\$) str: aaaaaaaaaaaaaaaaaaaa result_expr: $1 expected_results a
34_y: OK regex: (?!)+?|(.{2,4}) parsed_regex: (?!)+?|(.{2,4}) str: abcde result_expr: $1 expected_results abcd
35_y: Failure: Result is wrong. (is: 0) regex: ^(a*?)(?!(a{6}|a{5})*\$) parsed_regex: ^(a*?)(?!(a{6}|a{5})*\$) str: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa result_expr: $+[1] expected_results 12
36_y: OK regex: a(?!b(?!c(?!d(?!e))))...(.) parsed_regex: a(?!b(?!c(?!d(?!e))))...(.) str: abxabcdxabcde result_expr: $1 expected_results e
37_y: OK regex: X(?!b+(?!(c+)*(?!(c+)*d))).*X parsed_regex: X(?!b+(?!(c+)*(?!(c+)*d))).*X str: aXbbbbbbbcccccccccccccaaaX result_expr: - expected_results -
38_y: OK regex: ((?s).)c(?!.) parsed_regex: ((?s).)c(?!.) str: a
b
c
 result_expr: $1 expected_results 

39_y: OK regex: ((?s).)c(?!.) parsed_regex: ((?s).)c(?!.) str: a
b
c
 result_expr: $1:$& expected_results 
:
c
40_y: OK regex: ((?s)b.)c(?!.) parsed_regex: ((?s)b.)c(?!.) str: a
b
c
 result_expr: $1 expected_results b

41_y: OK regex: ((?s)b.)c(?!.) parsed_regex: ((?s)b.)c(?!.) str: a
b
c
 result_expr: $1:$& expected_results b
:b
c
42_y: OK regex: ((?s)b.)c(?!\\N) parsed_regex: ((?s)b.)c(?!\\N) str: a
b
c
 result_expr: $1:$& expected_results b
:b
c
43_y: OK regex: (b.)c(?!\\N) parsed_regex: (b.)c(?!\\N) str: a
b
c
 result_expr: $1:$& expected_results b
:b
c
44_n: OK regex: a*(?!) parsed_regex: a*(?!) str: aaaab result_expr: - expected_results -

