create_result: (resultExpr: std::string, r) -> std::string = {
  result: std::string = "";

  get_next := :(iter) -> _ = {
		start := std::distance(resultExpr&$*.cbegin(), iter);
    firstDollar := resultExpr&$*.find("$", start);
    firstAt := resultExpr&$*.find("@", start);

		end := std::min(firstDollar, firstAt);
		if end != std::string::npos {
			return resultExpr&$*.cbegin() + end;
		}
		else {
			return resultExpr&$*.cend();
		}
  };
  extract_group_and_advance := :(inout iter) -> _ = {
    start := iter;

    while std::isdigit(iter*) next iter++ {}

    return std::stoi(std::string(start, iter));
  };

  iter := resultExpr.begin();

  while iter != resultExpr.end() {
    next := get_next(iter);

    if next != iter {
      result += std::string(iter, next);
    }
    if next != resultExpr.end() {
      if next* == '$' {
        next++;

        if next* == '&' {
          next++;
          result += r.group(0);
        }
        else if next* == '-' || next* == '+' {
          is_start := next* == '-';
          next++;
          next++; // Skip [
          group := extract_group_and_advance(next);
          next++; // Skip ]

          if is_start {
            result += std::to_string(r.group_start(group));
          }
          else {
            result += std::to_string(r.group_end(group));
          }
        }
        else if std::isdigit(next*) {
          group := extract_group_and_advance(next);
          result += r.group(group);
        }
        else {
          std::cerr << "Not implemented";
        }
      }
      else if next* == '@' {
        next++;
        
        if next* == '-'  || next* == '+' {
          i := 0;
          while i < cpp2::unsafe_narrow<int>(r.group_number()) next i++ {
            pos := 0;
            if next* == '-' {
              pos = r.group_start(i);
            }
            else {
              pos = r.group_end(i);
            }
            result +=  std::to_string(pos);
          }
        }
        else {
          std::cerr << "Not implemented";
        }
      }
      else {
        std::cerr << "Not implemented.";
      }
    }
    iter = next;
  }

  return result;
}

test: <M> (regex: M, id: int, regex_str: std::string, str: std::string, kind: std::string, resultExpr: std::string,
           resultExpected: std::string) = {
  
  warning: std::string = "";
  if regex.to_string() != regex_str {
    warning = "Warning: Parsed regex does not match.";
  }

  status: std::string = "OK";

  r := regex.search(str);

  if "y" == kind {
    if !r.matched {
      status = "Failure: Regex should apply.";
    }
    else {
      // Have a match check the result

      result := create_result(resultExpr, r);

      if result != resultExpected {
        status = "Failure: Result is wrong. (is: (result)$)";
      }
    }
  }
  else if "n" == kind {
    if r.matched {
      status = "Failure: Regex should not apply.";
    }
  } else {
    status = "Unknown kind '(kind)$'";
  }

  if !warning.empty() {
    warning += " ";
  }
  std::cout << "(id)$_(kind)$: (status)$ (warning)$regex: (regex_str)$ parsed_regex: (regex.to_string())$ str: (str)$ result_expr: (resultExpr)$ expected_results (resultExpected)$" << std::endl;
}


test_perl_tests: @regex type = {
  regex_0 := "abc";
  var_regex_0 : std::string = "abc";
  regex_1 := "abc";
  var_regex_1 : std::string = "abc";
  regex_2 := "abc";
  var_regex_2 : std::string = "abc";
  regex_3 := "abc";
  var_regex_3 : std::string = "abc";
  regex_4 := "abc";
  var_regex_4 : std::string = "abc";
  regex_5 := "abc";
  var_regex_5 : std::string = "abc";
  regex_6 := "abc";
  var_regex_6 : std::string = "abc";
  regex_7 := "abc";
  var_regex_7 : std::string = "abc";
  regex_8 := "abc";
  var_regex_8 : std::string = "abc";
  regex_9 := "abc";
  var_regex_9 : std::string = "abc";
  regex_10 := "abc";
  var_regex_10 : std::string = "abc";
  regex_11 := "abc";
  var_regex_11 : std::string = "abc";
  regex_12 := "ab*c";
  var_regex_12 : std::string = "ab*c";
  regex_13 := "ab*c";
  var_regex_13 : std::string = "ab*c";
  regex_14 := "ab*c";
  var_regex_14 : std::string = "ab*c";
  regex_15 := "ab*bc";
  var_regex_15 : std::string = "ab*bc";
  regex_16 := "ab*bc";
  var_regex_16 : std::string = "ab*bc";
  regex_17 := "ab*bc";
  var_regex_17 : std::string = "ab*bc";
  regex_18 := "ab*bc";
  var_regex_18 : std::string = "ab*bc";
  regex_19 := "ab*bc";
  var_regex_19 : std::string = "ab*bc";
  regex_20 := "ab*bc";
  var_regex_20 : std::string = "ab*bc";
  regex_21 := "ab*bc";
  var_regex_21 : std::string = "ab*bc";
  regex_22 := "ab*bc";
  var_regex_22 : std::string = "ab*bc";
  regex_23 := "ab*bc";
  var_regex_23 : std::string = "ab*bc";
  regex_24 := ".{1}";
  var_regex_24 : std::string = ".{1}";
  regex_25 := ".{1}";
  var_regex_25 : std::string = ".{1}";
  regex_26 := ".{1}";
  var_regex_26 : std::string = ".{1}";
  regex_27 := ".{3,4}";
  var_regex_27 : std::string = ".{3,4}";
  regex_28 := ".{3,4}";
  var_regex_28 : std::string = ".{3,4}";
  regex_29 := ".{3,4}";
  var_regex_29 : std::string = ".{3,4}";
  regex_30 := "\N{1}";
  var_regex_30 : std::string = "\\N{1}";
  regex_31 := "\N{1}";
  var_regex_31 : std::string = "\\N{1}";
  regex_32 := "\N{1}";
  var_regex_32 : std::string = "\\N{1}";
  regex_33 := "\N{3,4}";
  var_regex_33 : std::string = "\\N{3,4}";
  regex_34 := "\N{3,4}";
  var_regex_34 : std::string = "\\N{3,4}";
  regex_35 := "\N{3,4}";
  var_regex_35 : std::string = "\\N{3,4}";
  regex_36 := "\N{ 3 , 4 }";
  var_regex_36 : std::string = "\\N{ 3 , 4 }";
  regex_37 := "ab{0,}bc";
  var_regex_37 : std::string = "ab{0,}bc";
  regex_38 := "ab{0,}bc";
  var_regex_38 : std::string = "ab{0,}bc";
  regex_39 := "ab{0,}bc";
  var_regex_39 : std::string = "ab{0,}bc";
  regex_40 := "ab+bc";
  var_regex_40 : std::string = "ab+bc";
  regex_41 := "ab+bc";
  var_regex_41 : std::string = "ab+bc";
  regex_42 := "ab+bc";
  var_regex_42 : std::string = "ab+bc";
  regex_43 := "ab+bc";
  var_regex_43 : std::string = "ab+bc";
  regex_44 := "ab+bc";
  var_regex_44 : std::string = "ab+bc";
  regex_45 := "ab{1,}bc";
  var_regex_45 : std::string = "ab{1,}bc";
  regex_46 := "ab+bc";
  var_regex_46 : std::string = "ab+bc";
  regex_47 := "ab+bc";
  var_regex_47 : std::string = "ab+bc";
  regex_48 := "ab+bc";
  var_regex_48 : std::string = "ab+bc";
  regex_49 := "ab{1,}bc";
  var_regex_49 : std::string = "ab{1,}bc";
  regex_50 := "ab{1,}bc";
  var_regex_50 : std::string = "ab{1,}bc";
  regex_51 := "ab{1,}bc";
  var_regex_51 : std::string = "ab{1,}bc";
  regex_52 := "ab{1,3}bc";
  var_regex_52 : std::string = "ab{1,3}bc";
  regex_53 := "ab{1,3}bc";
  var_regex_53 : std::string = "ab{1,3}bc";
  regex_54 := "ab{1,3}bc";
  var_regex_54 : std::string = "ab{1,3}bc";
  regex_55 := "ab{3,4}bc";
  var_regex_55 : std::string = "ab{3,4}bc";
  regex_56 := "ab{3,4}bc";
  var_regex_56 : std::string = "ab{3,4}bc";
  regex_57 := "ab{3,4}bc";
  var_regex_57 : std::string = "ab{3,4}bc";
  regex_58 := "ab{4,5}bc";
  var_regex_58 : std::string = "ab{4,5}bc";
  regex_59 := "ab?bc";
  var_regex_59 : std::string = "ab?bc";
  regex_60 := "ab?bc";
  var_regex_60 : std::string = "ab?bc";
  regex_61 := "ab{0,1}bc";
  var_regex_61 : std::string = "ab{0,1}bc";
  regex_62 := "ab?bc";
  var_regex_62 : std::string = "ab?bc";
  regex_63 := "ab?c";
  var_regex_63 : std::string = "ab?c";
  regex_64 := "ab{0,1}c";
  var_regex_64 : std::string = "ab{0,1}c";
  regex_65 := "^abc\$";
  var_regex_65 : std::string = "^abc\$";
  regex_66 := "^abc\$";
  var_regex_66 : std::string = "^abc\$";
  regex_67 := "^abc";
  var_regex_67 : std::string = "^abc";
  regex_68 := "^abc\$";
  var_regex_68 : std::string = "^abc\$";
  regex_69 := "abc\$";
  var_regex_69 : std::string = "abc\$";
  regex_70 := "abc\$";
  var_regex_70 : std::string = "abc\$";
  regex_71 := "^";
  var_regex_71 : std::string = "^";
  regex_72 := "\$";
  var_regex_72 : std::string = "\$";
  regex_73 := "a.c";
  var_regex_73 : std::string = "a.c";
  regex_74 := "a.c";
  var_regex_74 : std::string = "a.c";
  regex_75 := "a\Nc";
  var_regex_75 : std::string = "a\\Nc";
  regex_76 := "a.*c";
  var_regex_76 : std::string = "a.*c";
  regex_77 := "a\N*c";
  var_regex_77 : std::string = "a\\N*c";
  regex_78 := "a.*c";
  var_regex_78 : std::string = "a.*c";
  regex_79 := "a\N*c";
  var_regex_79 : std::string = "a\\N*c";
  regex_80 := "a[bc]d";
  var_regex_80 : std::string = "a[bc]d";
  regex_81 := "a[bc]d";
  var_regex_81 : std::string = "a[bc]d";
  regex_82 := "a[b]d";
  var_regex_82 : std::string = "a[b]d";
  regex_83 := "[a][b][d]";
  var_regex_83 : std::string = "[a][b][d]";
  regex_84 := ".[b].";
  var_regex_84 : std::string = ".[b].";
  regex_85 := ".[b].";
  var_regex_85 : std::string = ".[b].";
  regex_86 := "a[b-d]e";
  var_regex_86 : std::string = "a[b-d]e";
  regex_87 := "a[b-d]e";
  var_regex_87 : std::string = "a[b-d]e";
  regex_88 := "a[b-d]";
  var_regex_88 : std::string = "a[b-d]";
  regex_89 := "a[-b]";
  var_regex_89 : std::string = "a[-b]";
  regex_90 := "a[b-]";
  var_regex_90 : std::string = "a[b-]";
  regex_91 := "a]";
  var_regex_91 : std::string = "a]";
  regex_92 := "a[]]b";
  var_regex_92 : std::string = "a[]]b";
  regex_93 := "a[^bc]d";
  var_regex_93 : std::string = "a[^bc]d";
  regex_94 := "a[^bc]d";
  var_regex_94 : std::string = "a[^bc]d";
  regex_95 := "a[^-b]c";
  var_regex_95 : std::string = "a[^-b]c";
  regex_96 := "a[^-b]c";
  var_regex_96 : std::string = "a[^-b]c";
  regex_97 := "a[^]b]c";
  var_regex_97 : std::string = "a[^]b]c";
  regex_98 := "a[^]b]c";
  var_regex_98 : std::string = "a[^]b]c";
  regex_99 := "\ba\b";
  var_regex_99 : std::string = "\ba\b";
  regex_100 := "\ba\b";
  var_regex_100 : std::string = "\ba\b";
  regex_101 := "\ba\b";
  var_regex_101 : std::string = "\ba\b";
  regex_102 := "\by\b";
  var_regex_102 : std::string = "\by\b";
  regex_103 := "\by\b";
  var_regex_103 : std::string = "\by\b";
  regex_104 := "\by\b";
  var_regex_104 : std::string = "\by\b";
  regex_105 := "\Ba\B";
  var_regex_105 : std::string = "\Ba\B";
  regex_106 := "\Ba\B";
  var_regex_106 : std::string = "\Ba\B";
  regex_107 := "\Ba\B";
  var_regex_107 : std::string = "\Ba\B";
  regex_108 := "\By\b";
  var_regex_108 : std::string = "\By\b";
  regex_109 := "\By\b";
  var_regex_109 : std::string = "\By\b";
  regex_110 := "\By\b";
  var_regex_110 : std::string = "\By\b";
  regex_111 := "\By\b";
  var_regex_111 : std::string = "\By\b";
  regex_112 := "\by\B";
  var_regex_112 : std::string = "\by\B";
  regex_113 := "\By\B";
  var_regex_113 : std::string = "\By\B";
  regex_114 := "\b";
  var_regex_114 : std::string = "\b";
  regex_115 := "\B";
  var_regex_115 : std::string = "\B";
  regex_116 := "\w";
  var_regex_116 : std::string = "\w";
  regex_117 := "\w";
  var_regex_117 : std::string = "\w";
  regex_118 := "\W";
  var_regex_118 : std::string = "\W";
  regex_119 := "\W";
  var_regex_119 : std::string = "\W";
  regex_120 := "a\sb";
  var_regex_120 : std::string = "a\sb";
  regex_121 := "a\sb";
  var_regex_121 : std::string = "a\sb";
  regex_122 := "a\Sb";
  var_regex_122 : std::string = "a\Sb";
  regex_123 := "a\Sb";
  var_regex_123 : std::string = "a\Sb";
  regex_124 := "\d";
  var_regex_124 : std::string = "\d";
  regex_125 := "\d";
  var_regex_125 : std::string = "\d";
  regex_126 := "\D";
  var_regex_126 : std::string = "\D";
  regex_127 := "\D";
  var_regex_127 : std::string = "\D";
  regex_128 := "[\w]";
  var_regex_128 : std::string = "[\w]";
  regex_129 := "[\w]";
  var_regex_129 : std::string = "[\w]";
  regex_130 := "[\W]";
  var_regex_130 : std::string = "[\W]";
  regex_131 := "[\W]";
  var_regex_131 : std::string = "[\W]";
  regex_132 := "a[\s]b";
  var_regex_132 : std::string = "a[\s]b";
  regex_133 := "a[\s]b";
  var_regex_133 : std::string = "a[\s]b";
  regex_134 := "a[\S]b";
  var_regex_134 : std::string = "a[\S]b";
  regex_135 := "a[\S]b";
  var_regex_135 : std::string = "a[\S]b";
  regex_136 := "[\d]";
  var_regex_136 : std::string = "[\d]";
  regex_137 := "[\d]";
  var_regex_137 : std::string = "[\d]";
  regex_138 := "[\D]";
  var_regex_138 : std::string = "[\D]";
  regex_139 := "[\D]";
  var_regex_139 : std::string = "[\D]";
  regex_140 := "ab|cd";
  var_regex_140 : std::string = "ab|cd";
  regex_141 := "ab|cd";
  var_regex_141 : std::string = "ab|cd";
  regex_142 := "()ef";
  var_regex_142 : std::string = "()ef";
  regex_143 := "()ef";
  var_regex_143 : std::string = "()ef";
  regex_144 := "()ef";
  var_regex_144 : std::string = "()ef";
  regex_145 := "()ef";
  var_regex_145 : std::string = "()ef";
  regex_146 := "()ef";
  var_regex_146 : std::string = "()ef";
  regex_147 := "\$b";
  var_regex_147 : std::string = "\$b";
  regex_148 := "a\(b";
  var_regex_148 : std::string = "a\(b";
  regex_149 := "a\(*b";
  var_regex_149 : std::string = "a\(*b";
  regex_150 := "a\(*b";
  var_regex_150 : std::string = "a\(*b";
  regex_151 := "a\\b";
  var_regex_151 : std::string = "a\\b";
  regex_152 := "((a))";
  var_regex_152 : std::string = "((a))";
  regex_153 := "((a))";
  var_regex_153 : std::string = "((a))";
  regex_154 := "((a))";
  var_regex_154 : std::string = "((a))";
  regex_155 := "(foo)(\g-2)";
  var_regex_155 : std::string = "(foo)(\g-2)";
  regex_156 := "(foo)(\g-2)(foo)(\g-2)";
  var_regex_156 : std::string = "(foo)(\g-2)(foo)(\g-2)";
  regex_157 := "(([abc]+) \g-1)(([abc]+) \g{-1})";
  var_regex_157 : std::string = "(([abc]+) \g-1)(([abc]+) \g{-1})";
  regex_158 := "(a)(b)(c)\g1\g2\g3";
  var_regex_158 : std::string = "(a)(b)(c)\g1\g2\g3";
  regex_159 := "abc";
  regex_159_mod := "i";
  var_regex_159 : std::string = "abc";
  regex_160 := "abc";
  regex_160_mod := "i";
  var_regex_160 : std::string = "abc";
  regex_161 := "abc";
  regex_161_mod := "i";
  var_regex_161 : std::string = "abc";
  regex_162 := "abc";
  regex_162_mod := "i";
  var_regex_162 : std::string = "abc";
  regex_163 := "abc";
  regex_163_mod := "i";
  var_regex_163 : std::string = "abc";
  regex_164 := "abc";
  regex_164_mod := "i";
  var_regex_164 : std::string = "abc";
  regex_165 := "ab*c";
  regex_165_mod := "i";
  var_regex_165 : std::string = "ab*c";
  regex_166 := "ab*bc";
  regex_166_mod := "i";
  var_regex_166 : std::string = "ab*bc";
  regex_167 := "ab*bc";
  regex_167_mod := "i";
  var_regex_167 : std::string = "ab*bc";
  regex_168 := "ab*?bc";
  regex_168_mod := "i";
  var_regex_168 : std::string = "ab*?bc";
  regex_169 := "ab{0,}?bc";
  regex_169_mod := "i";
  var_regex_169 : std::string = "ab{0,}?bc";
  regex_170 := "ab+?bc";
  regex_170_mod := "i";
  var_regex_170 : std::string = "ab+?bc";
  regex_171 := "ab+bc";
  regex_171_mod := "i";
  var_regex_171 : std::string = "ab+bc";
  regex_172 := "ab+bc";
  regex_172_mod := "i";
  var_regex_172 : std::string = "ab+bc";
  regex_173 := "ab{1,}bc";
  regex_173_mod := "i";
  var_regex_173 : std::string = "ab{1,}bc";
  regex_174 := "ab+bc";
  regex_174_mod := "i";
  var_regex_174 : std::string = "ab+bc";
  regex_175 := "ab{1,}?bc";
  regex_175_mod := "i";
  var_regex_175 : std::string = "ab{1,}?bc";
  regex_176 := "ab{1,3}?bc";
  regex_176_mod := "i";
  var_regex_176 : std::string = "ab{1,3}?bc";
  regex_177 := "ab{3,4}?bc";
  regex_177_mod := "i";
  var_regex_177 : std::string = "ab{3,4}?bc";
  regex_178 := "ab{4,5}?bc";
  regex_178_mod := "i";
  var_regex_178 : std::string = "ab{4,5}?bc";
  regex_179 := "ab??bc";
  regex_179_mod := "i";
  var_regex_179 : std::string = "ab??bc";
  regex_180 := "ab??bc";
  regex_180_mod := "i";
  var_regex_180 : std::string = "ab??bc";
  regex_181 := "ab{0,1}?bc";
  regex_181_mod := "i";
  var_regex_181 : std::string = "ab{0,1}?bc";
  regex_182 := "ab??bc";
  regex_182_mod := "i";
  var_regex_182 : std::string = "ab??bc";
  regex_183 := "ab??c";
  regex_183_mod := "i";
  var_regex_183 : std::string = "ab??c";
  regex_184 := "ab{0,1}?c";
  regex_184_mod := "i";
  var_regex_184 : std::string = "ab{0,1}?c";
  regex_185 := "^abc\$";
  regex_185_mod := "i";
  var_regex_185 : std::string = "^abc\$";
  regex_186 := "^abc\$";
  regex_186_mod := "i";
  var_regex_186 : std::string = "^abc\$";
  regex_187 := "^abc";
  regex_187_mod := "i";
  var_regex_187 : std::string = "^abc";
  regex_188 := "^abc\$";
  regex_188_mod := "i";
  var_regex_188 : std::string = "^abc\$";
  regex_189 := "abc\$";
  regex_189_mod := "i";
  var_regex_189 : std::string = "abc\$";
  regex_190 := "^";
  regex_190_mod := "i";
  var_regex_190 : std::string = "^";
  regex_191 := "\$";
  regex_191_mod := "i";
  var_regex_191 : std::string = "\$";
  regex_192 := "a.c";
  regex_192_mod := "i";
  var_regex_192 : std::string = "a.c";
  regex_193 := "a.c";
  regex_193_mod := "i";
  var_regex_193 : std::string = "a.c";
  regex_194 := "a\Nc";
  regex_194_mod := "i";
  var_regex_194 : std::string = "a\\Nc";
  regex_195 := "a.*?c";
  regex_195_mod := "i";
  var_regex_195 : std::string = "a.*?c";
  regex_196 := "a.*c";
  regex_196_mod := "i";
  var_regex_196 : std::string = "a.*c";
  regex_197 := "a[bc]d";
  regex_197_mod := "i";
  var_regex_197 : std::string = "a[bc]d";
  regex_198 := "a[bc]d";
  regex_198_mod := "i";
  var_regex_198 : std::string = "a[bc]d";
  regex_199 := "a[b-d]e";
  regex_199_mod := "i";
  var_regex_199 : std::string = "a[b-d]e";
  regex_200 := "a[b-d]e";
  regex_200_mod := "i";
  var_regex_200 : std::string = "a[b-d]e";
  regex_201 := "a[b-d]";
  regex_201_mod := "i";
  var_regex_201 : std::string = "a[b-d]";
  regex_202 := "a[-b]";
  regex_202_mod := "i";
  var_regex_202 : std::string = "a[-b]";
  regex_203 := "a[b-]";
  regex_203_mod := "i";
  var_regex_203 : std::string = "a[b-]";
  regex_204 := "a]";
  regex_204_mod := "i";
  var_regex_204 : std::string = "a]";
  regex_205 := "a[]]b";
  regex_205_mod := "i";
  var_regex_205 : std::string = "a[]]b";
  regex_206 := "a[^bc]d";
  regex_206_mod := "i";
  var_regex_206 : std::string = "a[^bc]d";
  regex_207 := "a[^bc]d";
  regex_207_mod := "i";
  var_regex_207 : std::string = "a[^bc]d";
  regex_208 := "a[^-b]c";
  regex_208_mod := "i";
  var_regex_208 : std::string = "a[^-b]c";
  regex_209 := "a[^-b]c";
  regex_209_mod := "i";
  var_regex_209 : std::string = "a[^-b]c";
  regex_210 := "a[^]b]c";
  regex_210_mod := "i";
  var_regex_210 : std::string = "a[^]b]c";
  regex_211 := "a[^]b]c";
  regex_211_mod := "i";
  var_regex_211 : std::string = "a[^]b]c";
  regex_212 := "ab|cd";
  regex_212_mod := "i";
  var_regex_212 : std::string = "ab|cd";
  regex_213 := "ab|cd";
  regex_213_mod := "i";
  var_regex_213 : std::string = "ab|cd";
  regex_214 := "()ef";
  regex_214_mod := "i";
  var_regex_214 : std::string = "()ef";
  regex_215 := "\$b";
  regex_215_mod := "i";
  var_regex_215 : std::string = "\$b";
  regex_216 := "a\(b";
  regex_216_mod := "i";
  var_regex_216 : std::string = "a\(b";
  regex_217 := "a\(*b";
  regex_217_mod := "i";
  var_regex_217 : std::string = "a\(*b";
  regex_218 := "a\(*b";
  regex_218_mod := "i";
  var_regex_218 : std::string = "a\(*b";
  regex_219 := "a\\b";
  regex_219_mod := "i";
  var_regex_219 : std::string = "a\\b";
  regex_220 := "((a))";
  regex_220_mod := "i";
  var_regex_220 : std::string = "((a))";
  regex_221 := "(a)b(c)";
  regex_221_mod := "i";
  var_regex_221 : std::string = "(a)b(c)";
  regex_222 := "a+b+c";
  regex_222_mod := "i";
  var_regex_222 : std::string = "a+b+c";
  regex_223 := "a{1,}b{1,}c";
  regex_223_mod := "i";
  var_regex_223 : std::string = "a{1,}b{1,}c";
  regex_224 := "a.+?c";
  regex_224_mod := "i";
  var_regex_224 : std::string = "a.+?c";
  regex_225 := "a.*?c";
  regex_225_mod := "i";
  var_regex_225 : std::string = "a.*?c";
  regex_226 := "a.{0,5}?c";
  regex_226_mod := "i";
  var_regex_226 : std::string = "a.{0,5}?c";
  regex_227 := "(a+|b)*";
  regex_227_mod := "i";
  var_regex_227 : std::string = "(a+|b)*";
  regex_228 := "(a+|b){0,}";
  regex_228_mod := "i";
  var_regex_228 : std::string = "(a+|b){0,}";
  regex_229 := "(a+|b)+";
  regex_229_mod := "i";
  var_regex_229 : std::string = "(a+|b)+";
  regex_230 := "(a+|b){1,}";
  regex_230_mod := "i";
  var_regex_230 : std::string = "(a+|b){1,}";
  regex_231 := "(a+|b)?";
  regex_231_mod := "i";
  var_regex_231 : std::string = "(a+|b)?";
  regex_232 := "(a+|b){0,1}";
  regex_232_mod := "i";
  var_regex_232 : std::string = "(a+|b){0,1}";
  regex_233 := "(a+|b){0,1}?";
  regex_233_mod := "i";
  var_regex_233 : std::string = "(a+|b){0,1}?";
  regex_234 := "[^ab]*";
  regex_234_mod := "i";
  var_regex_234 : std::string = "[^ab]*";
  regex_235 := "abc";
  regex_235_mod := "i";
  var_regex_235 : std::string = "abc";
  regex_236 := "a*";
  regex_236_mod := "i";
  var_regex_236 : std::string = "a*";
  regex_237 := "([abc])*d";
  regex_237_mod := "i";
  var_regex_237 : std::string = "([abc])*d";
  regex_238 := "([abc])*bcd";
  regex_238_mod := "i";
  var_regex_238 : std::string = "([abc])*bcd";
  regex_239 := "a|b|c|d|e";
  regex_239_mod := "i";
  var_regex_239 : std::string = "a|b|c|d|e";
  regex_240 := "(a|b|c|d|e)f";
  regex_240_mod := "i";
  var_regex_240 : std::string = "(a|b|c|d|e)f";
  regex_241 := "abcd*efg";
  regex_241_mod := "i";
  var_regex_241 : std::string = "abcd*efg";
  regex_242 := "ab*";
  regex_242_mod := "i";
  var_regex_242 : std::string = "ab*";
  regex_243 := "ab*";
  regex_243_mod := "i";
  var_regex_243 : std::string = "ab*";
  regex_244 := "(ab|cd)e";
  regex_244_mod := "i";
  var_regex_244 : std::string = "(ab|cd)e";
  regex_245 := "[abhgefdc]ij";
  regex_245_mod := "i";
  var_regex_245 : std::string = "[abhgefdc]ij";
  regex_246 := "^(ab|cd)e";
  regex_246_mod := "i";
  var_regex_246 : std::string = "^(ab|cd)e";
  regex_247 := "(abc|)ef";
  regex_247_mod := "i";
  var_regex_247 : std::string = "(abc|)ef";
  regex_248 := "(a|b)c*d";
  regex_248_mod := "i";
  var_regex_248 : std::string = "(a|b)c*d";
  regex_249 := "(ab|ab*)bc";
  regex_249_mod := "i";
  var_regex_249 : std::string = "(ab|ab*)bc";
  regex_250 := "a([bc]*)c*";
  regex_250_mod := "i";
  var_regex_250 : std::string = "a([bc]*)c*";
  regex_251 := "a([bc]*)(c*d)";
  regex_251_mod := "i";
  var_regex_251 : std::string = "a([bc]*)(c*d)";
  regex_252 := "a([bc]+)(c*d)";
  regex_252_mod := "i";
  var_regex_252 : std::string = "a([bc]+)(c*d)";
  regex_253 := "a([bc]*)(c+d)";
  regex_253_mod := "i";
  var_regex_253 : std::string = "a([bc]*)(c+d)";
  regex_254 := "a[bcd]*dcdcde";
  regex_254_mod := "i";
  var_regex_254 : std::string = "a[bcd]*dcdcde";
  regex_255 := "a[bcd]+dcdcde";
  regex_255_mod := "i";
  var_regex_255 : std::string = "a[bcd]+dcdcde";
  regex_256 := "(ab|a)b*c";
  regex_256_mod := "i";
  var_regex_256 : std::string = "(ab|a)b*c";
  regex_257 := "((a)(b)c)(d)";
  regex_257_mod := "i";
  var_regex_257 : std::string = "((a)(b)c)(d)";
  regex_258 := "[a-zA-Z_][a-zA-Z0-9_]*";
  regex_258_mod := "i";
  var_regex_258 : std::string = "[a-zA-Z_][a-zA-Z0-9_]*";
  regex_259 := "^a(bc+|b[eh])g|.h\$";
  regex_259_mod := "i";
  var_regex_259 : std::string = "^a(bc+|b[eh])g|.h\$";
  regex_260 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_260_mod := "i";
  var_regex_260 : std::string = "(bc+d\$|ef*g.|h?i(j|k))";
  regex_261 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_261_mod := "i";
  var_regex_261 : std::string = "(bc+d\$|ef*g.|h?i(j|k))";
  regex_262 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_262_mod := "i";
  var_regex_262 : std::string = "(bc+d\$|ef*g.|h?i(j|k))";
  regex_263 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_263_mod := "i";
  var_regex_263 : std::string = "(bc+d\$|ef*g.|h?i(j|k))";
  regex_264 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_264_mod := "i";
  var_regex_264 : std::string = "(bc+d\$|ef*g.|h?i(j|k))";
  regex_265 := "((((((((((a))))))))))";
  regex_265_mod := "i";
  var_regex_265 : std::string = "((((((((((a))))))))))";
  regex_266 := "((((((((((a))))))))))\10";
  regex_266_mod := "i";
  var_regex_266 : std::string = "((((((((((a))))))))))\10";
  regex_267 := "(((((((((a)))))))))";
  regex_267_mod := "i";
  var_regex_267 : std::string = "(((((((((a)))))))))";
  regex_268 := "multiple words of text";
  regex_268_mod := "i";
  var_regex_268 : std::string = "multiple words of text";
  regex_269 := "multiple words";
  regex_269_mod := "i";
  var_regex_269 : std::string = "multiple words";
  regex_270 := "(.*)c(.*)";
  regex_270_mod := "i";
  var_regex_270 : std::string = "(.*)c(.*)";
  regex_271 := "\((.*), (.*)\)";
  regex_271_mod := "i";
  var_regex_271 : std::string = "\((.*), (.*)\)";
  regex_272 := "[k]";
  regex_272_mod := "i";
  var_regex_272 : std::string = "[k]";
  regex_273 := "abcd";
  regex_273_mod := "i";
  var_regex_273 : std::string = "abcd";
  regex_274 := "a(bc)d";
  regex_274_mod := "i";
  var_regex_274 : std::string = "a(bc)d";
  regex_275 := "a[-]?c";
  regex_275_mod := "i";
  var_regex_275 : std::string = "a[-]?c";
  regex_276 := "(abc)\1";
  regex_276_mod := "i";
  var_regex_276 : std::string = "(abc)\1";
  regex_277 := "([a-c]*)\1";
  regex_277_mod := "i";
  var_regex_277 : std::string = "([a-c]*)\1";
  regex_278 := "a++a";
  var_regex_278 : std::string = "a++a";
  regex_279 := "a*+a";
  var_regex_279 : std::string = "a*+a";
  regex_280 := "a{1,5}+a";
  var_regex_280 : std::string = "a{1,5}+a";
  regex_281 := "a?+a";
  var_regex_281 : std::string = "a?+a";
  regex_282 := "a++b";
  var_regex_282 : std::string = "a++b";
  regex_283 := "a*+b";
  var_regex_283 : std::string = "a*+b";
  regex_284 := "a{1,5}+b";
  var_regex_284 : std::string = "a{1,5}+b";
  regex_285 := "a?+b";
  var_regex_285 : std::string = "a?+b";
  regex_286 := "fooa++a";
  var_regex_286 : std::string = "fooa++a";
  regex_287 := "fooa*+a";
  var_regex_287 : std::string = "fooa*+a";
  regex_288 := "fooa{1,5}+a";
  var_regex_288 : std::string = "fooa{1,5}+a";
  regex_289 := "fooa?+a";
  var_regex_289 : std::string = "fooa?+a";
  regex_290 := "fooa++b";
  var_regex_290 : std::string = "fooa++b";
  regex_291 := "fooa*+b";
  var_regex_291 : std::string = "fooa*+b";
  regex_292 := "fooa{1,5}+b";
  var_regex_292 : std::string = "fooa{1,5}+b";
  regex_293 := "fooa?+b";
  var_regex_293 : std::string = "fooa?+b";
  regex_294 := "(aA)++(aA)";
  var_regex_294 : std::string = "(aA)++(aA)";
  regex_295 := "(aA|bB)++(aA|bB)";
  var_regex_295 : std::string = "(aA|bB)++(aA|bB)";
  regex_296 := "(aA)*+(aA)";
  var_regex_296 : std::string = "(aA)*+(aA)";
  regex_297 := "(aA|bB)*+(aA|bB)";
  var_regex_297 : std::string = "(aA|bB)*+(aA|bB)";
  regex_298 := "(aA){1,5}+(aA)";
  var_regex_298 : std::string = "(aA){1,5}+(aA)";
  regex_299 := "(aA|bB){1,5}+(aA|bB)";
  var_regex_299 : std::string = "(aA|bB){1,5}+(aA|bB)";
  regex_300 := "(aA)?+(aA)";
  var_regex_300 : std::string = "(aA)?+(aA)";
  regex_301 := "(aA|bB)?+(aA|bB)";
  var_regex_301 : std::string = "(aA|bB)?+(aA|bB)";
  regex_302 := "(aA)++b";
  var_regex_302 : std::string = "(aA)++b";
  regex_303 := "(aA|bB)++b";
  var_regex_303 : std::string = "(aA|bB)++b";
  regex_304 := "(aA)*+b";
  var_regex_304 : std::string = "(aA)*+b";
  regex_305 := "(aA|bB)*+b";
  var_regex_305 : std::string = "(aA|bB)*+b";
  regex_306 := "(aA){1,5}+b";
  var_regex_306 : std::string = "(aA){1,5}+b";
  regex_307 := "(aA|bB){1,5}+b";
  var_regex_307 : std::string = "(aA|bB){1,5}+b";
  regex_308 := "(aA)?+b";
  var_regex_308 : std::string = "(aA)?+b";
  regex_309 := "(aA|bB)?+b";
  var_regex_309 : std::string = "(aA|bB)?+b";
  regex_310 := "foo(aA)++(aA)";
  var_regex_310 : std::string = "foo(aA)++(aA)";
  regex_311 := "foo(aA|bB)++(aA|bB)";
  var_regex_311 : std::string = "foo(aA|bB)++(aA|bB)";
  regex_312 := "foo(aA)*+(aA)";
  var_regex_312 : std::string = "foo(aA)*+(aA)";
  regex_313 := "foo(aA|bB)*+(aA|bB)";
  var_regex_313 : std::string = "foo(aA|bB)*+(aA|bB)";
  regex_314 := "foo(aA){1,5}+(aA)";
  var_regex_314 : std::string = "foo(aA){1,5}+(aA)";
  regex_315 := "foo(aA|bB){1,5}+(aA|bB)";
  var_regex_315 : std::string = "foo(aA|bB){1,5}+(aA|bB)";
  regex_316 := "foo(aA)?+(aA)";
  var_regex_316 : std::string = "foo(aA)?+(aA)";
  regex_317 := "foo(aA|bB)?+(aA|bB)";
  var_regex_317 : std::string = "foo(aA|bB)?+(aA|bB)";
  regex_318 := "foo(aA)++b";
  var_regex_318 : std::string = "foo(aA)++b";
  regex_319 := "foo(aA|bB)++b";
  var_regex_319 : std::string = "foo(aA|bB)++b";
  regex_320 := "foo(aA)*+b";
  var_regex_320 : std::string = "foo(aA)*+b";
  regex_321 := "foo(aA|bB)*+b";
  var_regex_321 : std::string = "foo(aA|bB)*+b";
  regex_322 := "foo(aA){1,5}+b";
  var_regex_322 : std::string = "foo(aA){1,5}+b";
  regex_323 := "foo(aA|bB){1,5}+b";
  var_regex_323 : std::string = "foo(aA|bB){1,5}+b";
  regex_324 := "foo(aA)?+b";
  var_regex_324 : std::string = "foo(aA)?+b";
  regex_325 := "foo(aA|bB)?+b";
  var_regex_325 : std::string = "foo(aA|bB)?+b";
  regex_326 := "foo(\h+)bar";
  var_regex_326 : std::string = "foo(\h+)bar";
  regex_327 := "(\H+)(\h)";
  var_regex_327 : std::string = "(\H+)(\h)";
  regex_328 := "(\h+)(\H)";
  var_regex_328 : std::string = "(\h+)(\H)";
  regex_329 := "foo(\h)bar";
  var_regex_329 : std::string = "foo(\h)bar";
  regex_330 := "(\H)(\h)";
  var_regex_330 : std::string = "(\H)(\h)";
  regex_331 := "(\h)(\H)";
  var_regex_331 : std::string = "(\h)(\H)";
  regex_332 := "foo(\v+)bar";
  var_regex_332 : std::string = "foo(\v+)bar";
  regex_333 := "(\V+)(\v)";
  var_regex_333 : std::string = "(\V+)(\v)";
  regex_334 := "(\v+)(\V)";
  var_regex_334 : std::string = "(\v+)(\V)";
  regex_335 := "foo(\v)bar";
  var_regex_335 : std::string = "foo(\v)bar";
  regex_336 := "(\V)(\v)";
  var_regex_336 : std::string = "(\V)(\v)";
  regex_337 := "(\v)(\V)";
  var_regex_337 : std::string = "(\v)(\V)";
  regex_338 := "foo\Kbar";
  var_regex_338 : std::string = "foo\Kbar";
  regex_339 := "foo\t\n\r\f\a\ebar";
  var_regex_339 : std::string = "foo\t\n\r\f\a\ebar";
  run: (this) = {
    std::cout << "Running perl_tests:"<< std::endl;
    test(regex_0, 0, "abc", "abc", "y", "$&", "abc");
    test(regex_1, 1, "abc", "abc", "y", "$-[0]", "0");
    test(regex_2, 2, "abc", "abc", "y", "$+[0]", "3");
    test(regex_3, 3, "abc", "xbc", "n", "-", "-");
    test(regex_4, 4, "abc", "axc", "n", "-", "-");
    test(regex_5, 5, "abc", "abx", "n", "-", "-");
    test(regex_6, 6, "abc", "xabcy", "y", "$&", "abc");
    test(regex_7, 7, "abc", "xabcy", "y", "$-[0]", "1");
    test(regex_8, 8, "abc", "xabcy", "y", "$+[0]", "4");
    test(regex_9, 9, "abc", "ababc", "y", "$&", "abc");
    test(regex_10, 10, "abc", "ababc", "y", "$-[0]", "2");
    test(regex_11, 11, "abc", "ababc", "y", "$+[0]", "5");
    test(regex_12, 12, "ab*c", "abc", "y", "$&", "abc");
    test(regex_13, 13, "ab*c", "abc", "y", "$-[0]", "0");
    test(regex_14, 14, "ab*c", "abc", "y", "$+[0]", "3");
    test(regex_15, 15, "ab*bc", "abc", "y", "$&", "abc");
    test(regex_16, 16, "ab*bc", "abc", "y", "$-[0]", "0");
    test(regex_17, 17, "ab*bc", "abc", "y", "$+[0]", "3");
    test(regex_18, 18, "ab*bc", "abbc", "y", "$&", "abbc");
    test(regex_19, 19, "ab*bc", "abbc", "y", "$-[0]", "0");
    test(regex_20, 20, "ab*bc", "abbc", "y", "$+[0]", "4");
    test(regex_21, 21, "ab*bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_22, 22, "ab*bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_23, 23, "ab*bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_24, 24, ".{1}", "abbbbc", "y", "$&", "a");
    test(regex_25, 25, ".{1}", "abbbbc", "y", "$-[0]", "0");
    test(regex_26, 26, ".{1}", "abbbbc", "y", "$+[0]", "1");
    test(regex_27, 27, ".{3,4}", "abbbbc", "y", "$&", "abbb");
    test(regex_28, 28, ".{3,4}", "abbbbc", "y", "$-[0]", "0");
    test(regex_29, 29, ".{3,4}", "abbbbc", "y", "$+[0]", "4");
    test(regex_30, 30, "\\\\N{1}", "abbbbc", "y", "$&", "a");
    test(regex_31, 31, "\\\\N{1}", "abbbbc", "y", "$-[0]", "0");
    test(regex_32, 32, "\\\\N{1}", "abbbbc", "y", "$+[0]", "1");
    test(regex_33, 33, "\\\\N{3,4}", "abbbbc", "y", "$&", "abbb");
    test(regex_34, 34, "\\\\N{3,4}", "abbbbc", "y", "$-[0]", "0");
    test(regex_35, 35, "\\\\N{3,4}", "abbbbc", "y", "$+[0]", "4");
    test(regex_36, 36, "\\\\N{ 3 , 4 }", "abbbbc", "y", "$+[0]", "4");
    test(regex_37, 37, "ab{0,}bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_38, 38, "ab{0,}bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_39, 39, "ab{0,}bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_40, 40, "ab+bc", "abbc", "y", "$&", "abbc");
    test(regex_41, 41, "ab+bc", "abbc", "y", "$-[0]", "0");
    test(regex_42, 42, "ab+bc", "abbc", "y", "$+[0]", "4");
    test(regex_43, 43, "ab+bc", "abc", "n", "-", "-");
    test(regex_44, 44, "ab+bc", "abq", "n", "-", "-");
    test(regex_45, 45, "ab{1,}bc", "abq", "n", "-", "-");
    test(regex_46, 46, "ab+bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_47, 47, "ab+bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_48, 48, "ab+bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_49, 49, "ab{1,}bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_50, 50, "ab{1,}bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_51, 51, "ab{1,}bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_52, 52, "ab{1,3}bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_53, 53, "ab{1,3}bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_54, 54, "ab{1,3}bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_55, 55, "ab{3,4}bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_56, 56, "ab{3,4}bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_57, 57, "ab{3,4}bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_58, 58, "ab{4,5}bc", "abbbbc", "n", "-", "-");
    test(regex_59, 59, "ab?bc", "abbc", "y", "$&", "abbc");
    test(regex_60, 60, "ab?bc", "abc", "y", "$&", "abc");
    test(regex_61, 61, "ab{0,1}bc", "abc", "y", "$&", "abc");
    test(regex_62, 62, "ab?bc", "abbbbc", "n", "-", "-");
    test(regex_63, 63, "ab?c", "abc", "y", "$&", "abc");
    test(regex_64, 64, "ab{0,1}c", "abc", "y", "$&", "abc");
    test(regex_65, 65, "^abc\\$", "abc", "y", "$&", "abc");
    test(regex_66, 66, "^abc\\$", "abcc", "n", "-", "-");
    test(regex_67, 67, "^abc", "abcc", "y", "$&", "abc");
    test(regex_68, 68, "^abc\\$", "aabc", "n", "-", "-");
    test(regex_69, 69, "abc\\$", "aabc", "y", "$&", "abc");
    test(regex_70, 70, "abc\\$", "aabcd", "n", "-", "-");
    test(regex_71, 71, "^", "abc", "y", "$&", "");
    test(regex_72, 72, "\\$", "abc", "y", "$&", "");
    test(regex_73, 73, "a.c", "abc", "y", "$&", "abc");
    test(regex_74, 74, "a.c", "axc", "y", "$&", "axc");
    test(regex_75, 75, "a\\\\Nc", "abc", "y", "$&", "abc");
    test(regex_76, 76, "a.*c", "axyzc", "y", "$&", "axyzc");
    test(regex_77, 77, "a\\\\N*c", "axyzc", "y", "$&", "axyzc");
    test(regex_78, 78, "a.*c", "axyzd", "n", "-", "-");
    test(regex_79, 79, "a\\\\N*c", "axyzd", "n", "-", "-");
    test(regex_80, 80, "a[bc]d", "abc", "n", "-", "-");
    test(regex_81, 81, "a[bc]d", "abd", "y", "$&", "abd");
    test(regex_82, 82, "a[b]d", "abd", "y", "$&", "abd");
    test(regex_83, 83, "[a][b][d]", "abd", "y", "$&", "abd");
    test(regex_84, 84, ".[b].", "abd", "y", "$&", "abd");
    test(regex_85, 85, ".[b].", "aBd", "n", "-", "-");
    test(regex_86, 86, "a[b-d]e", "abd", "n", "-", "-");
    test(regex_87, 87, "a[b-d]e", "ace", "y", "$&", "ace");
    test(regex_88, 88, "a[b-d]", "aac", "y", "$&", "ac");
    test(regex_89, 89, "a[-b]", "a-", "y", "$&", "a-");
    test(regex_90, 90, "a[b-]", "a-", "y", "$&", "a-");
    test(regex_91, 91, "a]", "a]", "y", "$&", "a]");
    test(regex_92, 92, "a[]]b", "a]b", "y", "$&", "a]b");
    test(regex_93, 93, "a[^bc]d", "aed", "y", "$&", "aed");
    test(regex_94, 94, "a[^bc]d", "abd", "n", "-", "-");
    test(regex_95, 95, "a[^-b]c", "adc", "y", "$&", "adc");
    test(regex_96, 96, "a[^-b]c", "a-c", "n", "-", "-");
    test(regex_97, 97, "a[^]b]c", "a]c", "n", "-", "-");
    test(regex_98, 98, "a[^]b]c", "adc", "y", "$&", "adc");
    test(regex_99, 99, "\\ba\\b", "a-", "y", "-", "-");
    test(regex_100, 100, "\\ba\\b", "-a", "y", "-", "-");
    test(regex_101, 101, "\\ba\\b", "-a-", "y", "-", "-");
    test(regex_102, 102, "\\by\\b", "xy", "n", "-", "-");
    test(regex_103, 103, "\\by\\b", "yz", "n", "-", "-");
    test(regex_104, 104, "\\by\\b", "xyz", "n", "-", "-");
    test(regex_105, 105, "\\Ba\\B", "a-", "n", "-", "-");
    test(regex_106, 106, "\\Ba\\B", "-a", "n", "-", "-");
    test(regex_107, 107, "\\Ba\\B", "-a-", "n", "-", "-");
    test(regex_108, 108, "\\By\\b", "xy", "y", "-", "-");
    test(regex_109, 109, "\\By\\b", "xy", "y", "$-[0]", "1");
    test(regex_110, 110, "\\By\\b", "xy", "y", "$+[0]", "2");
    test(regex_111, 111, "\\By\\b", "xy", "y", "-", "-");
    test(regex_112, 112, "\\by\\B", "yz", "y", "-", "-");
    test(regex_113, 113, "\\By\\B", "xyz", "y", "-", "-");
    test(regex_114, 114, "\\b", "", "n", "-", "-");
    test(regex_115, 115, "\\B", "", "y", "-", "-");
    test(regex_116, 116, "\\w", "a", "y", "-", "-");
    test(regex_117, 117, "\\w", "-", "n", "-", "-");
    test(regex_118, 118, "\\W", "a", "n", "-", "-");
    test(regex_119, 119, "\\W", "-", "y", "-", "-");
    test(regex_120, 120, "a\\sb", "a b", "y", "-", "-");
    test(regex_121, 121, "a\\sb", "a-b", "n", "-", "-");
    test(regex_122, 122, "a\\Sb", "a b", "n", "-", "-");
    test(regex_123, 123, "a\\Sb", "a-b", "y", "-", "-");
    test(regex_124, 124, "\\d", "1", "y", "-", "-");
    test(regex_125, 125, "\\d", "-", "n", "-", "-");
    test(regex_126, 126, "\\D", "1", "n", "-", "-");
    test(regex_127, 127, "\\D", "-", "y", "-", "-");
    test(regex_128, 128, "[\\w]", "a", "y", "-", "-");
    test(regex_129, 129, "[\\w]", "-", "n", "-", "-");
    test(regex_130, 130, "[\\W]", "a", "n", "-", "-");
    test(regex_131, 131, "[\\W]", "-", "y", "-", "-");
    test(regex_132, 132, "a[\\s]b", "a b", "y", "-", "-");
    test(regex_133, 133, "a[\\s]b", "a-b", "n", "-", "-");
    test(regex_134, 134, "a[\\S]b", "a b", "n", "-", "-");
    test(regex_135, 135, "a[\\S]b", "a-b", "y", "-", "-");
    test(regex_136, 136, "[\\d]", "1", "y", "-", "-");
    test(regex_137, 137, "[\\d]", "-", "n", "-", "-");
    test(regex_138, 138, "[\\D]", "1", "n", "-", "-");
    test(regex_139, 139, "[\\D]", "-", "y", "-", "-");
    test(regex_140, 140, "ab|cd", "abc", "y", "$&", "ab");
    test(regex_141, 141, "ab|cd", "abcd", "y", "$&", "ab");
    test(regex_142, 142, "()ef", "def", "y", "$&-$1", "ef-");
    test(regex_143, 143, "()ef", "def", "y", "$-[0]", "1");
    test(regex_144, 144, "()ef", "def", "y", "$+[0]", "3");
    test(regex_145, 145, "()ef", "def", "y", "$-[1]", "1");
    test(regex_146, 146, "()ef", "def", "y", "$+[1]", "1");
    test(regex_147, 147, "\\$b", "b", "n", "-", "-");
    test(regex_148, 148, "a\\(b", "a(b", "y", "$&-$1", "a(b-");
    test(regex_149, 149, "a\\(*b", "ab", "y", "$&", "ab");
    test(regex_150, 150, "a\\(*b", "a((b", "y", "$&", "a((b");
    test(regex_151, 151, "a\\\\b", "a\\b", "y", "$&", "a\\b");
    test(regex_152, 152, "((a))", "abc", "y", "$&-$1-$2", "a-a-a");
    test(regex_153, 153, "((a))", "abc", "y", "$-[0]-$-[1]-$-[2]", "0-0-0");
    test(regex_154, 154, "((a))", "abc", "y", "$+[0]-$+[1]-$+[2]", "1-1-1");
    test(regex_155, 155, "(foo)(\\g-2)", "foofoo", "y", "$1-$2", "foo-foo");
    test(regex_156, 156, "(foo)(\\g-2)(foo)(\\g-2)", "foofoofoofoo", "y", "$1-$2-$3-$4", "foo-foo-foo-foo");
    test(regex_157, 157, "(([abc]+) \\g-1)(([abc]+) \\g{-1})", "abc abccba cba", "y", "$2-$4", "abc-cba");
    test(regex_158, 158, "(a)(b)(c)\\g1\\g2\\g3", "abcabc", "y", "$1$2$3", "abc");
    test(regex_159, 159, "abc", "ABC", "y", "$&", "ABC");
    test(regex_160, 160, "abc", "XBC", "n", "-", "-");
    test(regex_161, 161, "abc", "AXC", "n", "-", "-");
    test(regex_162, 162, "abc", "ABX", "n", "-", "-");
    test(regex_163, 163, "abc", "XABCY", "y", "$&", "ABC");
    test(regex_164, 164, "abc", "ABABC", "y", "$&", "ABC");
    test(regex_165, 165, "ab*c", "ABC", "y", "$&", "ABC");
    test(regex_166, 166, "ab*bc", "ABC", "y", "$&", "ABC");
    test(regex_167, 167, "ab*bc", "ABBC", "y", "$&", "ABBC");
    test(regex_168, 168, "ab*?bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_169, 169, "ab{0,}?bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_170, 170, "ab+?bc", "ABBC", "y", "$&", "ABBC");
    test(regex_171, 171, "ab+bc", "ABC", "n", "-", "-");
    test(regex_172, 172, "ab+bc", "ABQ", "n", "-", "-");
    test(regex_173, 173, "ab{1,}bc", "ABQ", "n", "-", "-");
    test(regex_174, 174, "ab+bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_175, 175, "ab{1,}?bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_176, 176, "ab{1,3}?bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_177, 177, "ab{3,4}?bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_178, 178, "ab{4,5}?bc", "ABBBBC", "n", "-", "-");
    test(regex_179, 179, "ab??bc", "ABBC", "y", "$&", "ABBC");
    test(regex_180, 180, "ab??bc", "ABC", "y", "$&", "ABC");
    test(regex_181, 181, "ab{0,1}?bc", "ABC", "y", "$&", "ABC");
    test(regex_182, 182, "ab??bc", "ABBBBC", "n", "-", "-");
    test(regex_183, 183, "ab??c", "ABC", "y", "$&", "ABC");
    test(regex_184, 184, "ab{0,1}?c", "ABC", "y", "$&", "ABC");
    test(regex_185, 185, "^abc\\$", "ABC", "y", "$&", "ABC");
    test(regex_186, 186, "^abc\\$", "ABCC", "n", "-", "-");
    test(regex_187, 187, "^abc", "ABCC", "y", "$&", "ABC");
    test(regex_188, 188, "^abc\\$", "AABC", "n", "-", "-");
    test(regex_189, 189, "abc\\$", "AABC", "y", "$&", "ABC");
    test(regex_190, 190, "^", "ABC", "y", "$&", "");
    test(regex_191, 191, "\\$", "ABC", "y", "$&", "");
    test(regex_192, 192, "a.c", "ABC", "y", "$&", "ABC");
    test(regex_193, 193, "a.c", "AXC", "y", "$&", "AXC");
    test(regex_194, 194, "a\\\\Nc", "ABC", "y", "$&", "ABC");
    test(regex_195, 195, "a.*?c", "AXYZC", "y", "$&", "AXYZC");
    test(regex_196, 196, "a.*c", "AXYZD", "n", "-", "-");
    test(regex_197, 197, "a[bc]d", "ABC", "n", "-", "-");
    test(regex_198, 198, "a[bc]d", "ABD", "y", "$&", "ABD");
    test(regex_199, 199, "a[b-d]e", "ABD", "n", "-", "-");
    test(regex_200, 200, "a[b-d]e", "ACE", "y", "$&", "ACE");
    test(regex_201, 201, "a[b-d]", "AAC", "y", "$&", "AC");
    test(regex_202, 202, "a[-b]", "A-", "y", "$&", "A-");
    test(regex_203, 203, "a[b-]", "A-", "y", "$&", "A-");
    test(regex_204, 204, "a]", "A]", "y", "$&", "A]");
    test(regex_205, 205, "a[]]b", "A]B", "y", "$&", "A]B");
    test(regex_206, 206, "a[^bc]d", "AED", "y", "$&", "AED");
    test(regex_207, 207, "a[^bc]d", "ABD", "n", "-", "-");
    test(regex_208, 208, "a[^-b]c", "ADC", "y", "$&", "ADC");
    test(regex_209, 209, "a[^-b]c", "A-C", "n", "-", "-");
    test(regex_210, 210, "a[^]b]c", "A]C", "n", "-", "-");
    test(regex_211, 211, "a[^]b]c", "ADC", "y", "$&", "ADC");
    test(regex_212, 212, "ab|cd", "ABC", "y", "$&", "AB");
    test(regex_213, 213, "ab|cd", "ABCD", "y", "$&", "AB");
    test(regex_214, 214, "()ef", "DEF", "y", "$&-$1", "EF-");
    test(regex_215, 215, "\\$b", "B", "n", "-", "-");
    test(regex_216, 216, "a\\(b", "A(B", "y", "$&-$1", "A(B-");
    test(regex_217, 217, "a\\(*b", "AB", "y", "$&", "AB");
    test(regex_218, 218, "a\\(*b", "A((B", "y", "$&", "A((B");
    test(regex_219, 219, "a\\\\b", "A\\B", "y", "$&", "A\\B");
    test(regex_220, 220, "((a))", "ABC", "y", "$&-$1-$2", "A-A-A");
    test(regex_221, 221, "(a)b(c)", "ABC", "y", "$&-$1-$2", "ABC-A-C");
    test(regex_222, 222, "a+b+c", "AABBABC", "y", "$&", "ABC");
    test(regex_223, 223, "a{1,}b{1,}c", "AABBABC", "y", "$&", "ABC");
    test(regex_224, 224, "a.+?c", "ABCABC", "y", "$&", "ABC");
    test(regex_225, 225, "a.*?c", "ABCABC", "y", "$&", "ABC");
    test(regex_226, 226, "a.{0,5}?c", "ABCABC", "y", "$&", "ABC");
    test(regex_227, 227, "(a+|b)*", "AB", "y", "$&-$1", "AB-B");
    test(regex_228, 228, "(a+|b){0,}", "AB", "y", "$&-$1", "AB-B");
    test(regex_229, 229, "(a+|b)+", "AB", "y", "$&-$1", "AB-B");
    test(regex_230, 230, "(a+|b){1,}", "AB", "y", "$&-$1", "AB-B");
    test(regex_231, 231, "(a+|b)?", "AB", "y", "$&-$1", "A-A");
    test(regex_232, 232, "(a+|b){0,1}", "AB", "y", "$&-$1", "A-A");
    test(regex_233, 233, "(a+|b){0,1}?", "AB", "y", "$&-$1", "-");
    test(regex_234, 234, "[^ab]*", "CDE", "y", "$&", "CDE");
    test(regex_235, 235, "abc", "", "n", "-", "-");
    test(regex_236, 236, "a*", "", "y", "$&", "");
    test(regex_237, 237, "([abc])*d", "ABBBCD", "y", "$&-$1", "ABBBCD-C");
    test(regex_238, 238, "([abc])*bcd", "ABCD", "y", "$&-$1", "ABCD-A");
    test(regex_239, 239, "a|b|c|d|e", "E", "y", "$&", "E");
    test(regex_240, 240, "(a|b|c|d|e)f", "EF", "y", "$&-$1", "EF-E");
    test(regex_241, 241, "abcd*efg", "ABCDEFG", "y", "$&", "ABCDEFG");
    test(regex_242, 242, "ab*", "XABYABBBZ", "y", "$&", "AB");
    test(regex_243, 243, "ab*", "XAYABBBZ", "y", "$&", "A");
    test(regex_244, 244, "(ab|cd)e", "ABCDE", "y", "$&-$1", "CDE-CD");
    test(regex_245, 245, "[abhgefdc]ij", "HIJ", "y", "$&", "HIJ");
    test(regex_246, 246, "^(ab|cd)e", "ABCDE", "n", "x$1y", "XY");
    test(regex_247, 247, "(abc|)ef", "ABCDEF", "y", "$&-$1", "EF-");
    test(regex_248, 248, "(a|b)c*d", "ABCD", "y", "$&-$1", "BCD-B");
    test(regex_249, 249, "(ab|ab*)bc", "ABC", "y", "$&-$1", "ABC-A");
    test(regex_250, 250, "a([bc]*)c*", "ABC", "y", "$&-$1", "ABC-BC");
    test(regex_251, 251, "a([bc]*)(c*d)", "ABCD", "y", "$&-$1-$2", "ABCD-BC-D");
    test(regex_252, 252, "a([bc]+)(c*d)", "ABCD", "y", "$&-$1-$2", "ABCD-BC-D");
    test(regex_253, 253, "a([bc]*)(c+d)", "ABCD", "y", "$&-$1-$2", "ABCD-B-CD");
    test(regex_254, 254, "a[bcd]*dcdcde", "ADCDCDE", "y", "$&", "ADCDCDE");
    test(regex_255, 255, "a[bcd]+dcdcde", "ADCDCDE", "n", "-", "-");
    test(regex_256, 256, "(ab|a)b*c", "ABC", "y", "$&-$1", "ABC-AB");
    test(regex_257, 257, "((a)(b)c)(d)", "ABCD", "y", "$1-$2-$3-$4", "ABC-A-B-D");
    test(regex_258, 258, "[a-zA-Z_][a-zA-Z0-9_]*", "ALPHA", "y", "$&", "ALPHA");
    test(regex_259, 259, "^a(bc+|b[eh])g|.h\\$", "ABH", "y", "$&-$1", "BH-");
    test(regex_260, 260, "(bc+d\\$|ef*g.|h?i(j|k))", "EFFGZ", "y", "$&-$1-$2", "EFFGZ-EFFGZ-");
    test(regex_261, 261, "(bc+d\\$|ef*g.|h?i(j|k))", "IJ", "y", "$&-$1-$2", "IJ-IJ-J");
    test(regex_262, 262, "(bc+d\\$|ef*g.|h?i(j|k))", "EFFG", "n", "-", "-");
    test(regex_263, 263, "(bc+d\\$|ef*g.|h?i(j|k))", "BCDD", "n", "-", "-");
    test(regex_264, 264, "(bc+d\\$|ef*g.|h?i(j|k))", "REFFGZ", "y", "$&-$1-$2", "EFFGZ-EFFGZ-");
    test(regex_265, 265, "((((((((((a))))))))))", "A", "y", "$10", "A");
    test(regex_266, 266, "((((((((((a))))))))))\\10", "AA", "y", "$&", "AA");
    test(regex_267, 267, "(((((((((a)))))))))", "A", "y", "$&", "A");
    test(regex_268, 268, "multiple words of text", "UH-UH", "n", "-", "-");
    test(regex_269, 269, "multiple words", "MULTIPLE WORDS, YEAH", "y", "$&", "MULTIPLE WORDS");
    test(regex_270, 270, "(.*)c(.*)", "ABCDE", "y", "$&-$1-$2", "ABCDE-AB-DE");
    test(regex_271, 271, "\\((.*), (.*)\\)", "(A, B)", "y", "($2, $1)", "(B, A)");
    test(regex_272, 272, "[k]", "AB", "n", "-", "-");
    test(regex_273, 273, "abcd", "ABCD", "y", "$&", "ABCD");
    test(regex_274, 274, "a(bc)d", "ABCD", "y", "$1", "BC");
    test(regex_275, 275, "a[-]?c", "AC", "y", "$&", "AC");
    test(regex_276, 276, "(abc)\\1", "ABCABC", "y", "$1", "ABC");
    test(regex_277, 277, "([a-c]*)\\1", "ABCABC", "y", "$1", "ABC");
    test(regex_278, 278, "a++a", "aaaaa", "n", "-", "-");
    test(regex_279, 279, "a*+a", "aaaaa", "n", "-", "-");
    test(regex_280, 280, "a{1,5}+a", "aaaaa", "n", "-", "-");
    test(regex_281, 281, "a?+a", "ab", "n", "-", "-");
    test(regex_282, 282, "a++b", "aaaaab", "y", "$&", "aaaaab");
    test(regex_283, 283, "a*+b", "aaaaab", "y", "$&", "aaaaab");
    test(regex_284, 284, "a{1,5}+b", "aaaaab", "y", "$&", "aaaaab");
    test(regex_285, 285, "a?+b", "ab", "y", "$&", "ab");
    test(regex_286, 286, "fooa++a", "fooaaaaa", "n", "-", "-");
    test(regex_287, 287, "fooa*+a", "fooaaaaa", "n", "-", "-");
    test(regex_288, 288, "fooa{1,5}+a", "fooaaaaa", "n", "-", "-");
    test(regex_289, 289, "fooa?+a", "fooab", "n", "-", "-");
    test(regex_290, 290, "fooa++b", "fooaaaaab", "y", "$&", "fooaaaaab");
    test(regex_291, 291, "fooa*+b", "fooaaaaab", "y", "$&", "fooaaaaab");
    test(regex_292, 292, "fooa{1,5}+b", "fooaaaaab", "y", "$&", "fooaaaaab");
    test(regex_293, 293, "fooa?+b", "fooab", "y", "$&", "fooab");
    test(regex_294, 294, "(aA)++(aA)", "aAaAaAaAaA", "n", "-", "aAaAaAaAaA");
    test(regex_295, 295, "(aA|bB)++(aA|bB)", "aAaAbBaAbB", "n", "-", "aAaAbBaAbB");
    test(regex_296, 296, "(aA)*+(aA)", "aAaAaAaAaA", "n", "-", "aAaAaAaAaA");
    test(regex_297, 297, "(aA|bB)*+(aA|bB)", "aAaAbBaAaA", "n", "-", "aAaAbBaAaA");
    test(regex_298, 298, "(aA){1,5}+(aA)", "aAaAaAaAaA", "n", "-", "aAaAaAaAaA");
    test(regex_299, 299, "(aA|bB){1,5}+(aA|bB)", "aAaAbBaAaA", "n", "-", "aAaAbBaAaA");
    test(regex_300, 300, "(aA)?+(aA)", "aAb", "n", "-", "aAb");
    test(regex_301, 301, "(aA|bB)?+(aA|bB)", "bBb", "n", "-", "bBb");
    test(regex_302, 302, "(aA)++b", "aAaAaAaAaAb", "y", "$&", "aAaAaAaAaAb");
    test(regex_303, 303, "(aA|bB)++b", "aAbBaAaAbBb", "y", "$&", "aAbBaAaAbBb");
    test(regex_304, 304, "(aA)*+b", "aAaAaAaAaAb", "y", "$&", "aAaAaAaAaAb");
    test(regex_305, 305, "(aA|bB)*+b", "bBbBbBbBbBb", "y", "$&", "bBbBbBbBbBb");
    test(regex_306, 306, "(aA){1,5}+b", "aAaAaAaAaAb", "y", "$&", "aAaAaAaAaAb");
    test(regex_307, 307, "(aA|bB){1,5}+b", "bBaAbBaAbBb", "y", "$&", "bBaAbBaAbBb");
    test(regex_308, 308, "(aA)?+b", "aAb", "y", "$&", "aAb");
    test(regex_309, 309, "(aA|bB)?+b", "bBb", "y", "$&", "bBb");
    test(regex_310, 310, "foo(aA)++(aA)", "fooaAaAaAaAaA", "n", "-", "fooaAaAaAaAaA");
    test(regex_311, 311, "foo(aA|bB)++(aA|bB)", "foobBbBbBaAaA", "n", "-", "foobBbBbBaAaA");
    test(regex_312, 312, "foo(aA)*+(aA)", "fooaAaAaAaAaA", "n", "-", "fooaAaAaAaAaA");
    test(regex_313, 313, "foo(aA|bB)*+(aA|bB)", "foobBaAbBaAaA", "n", "-", "foobBaAbBaAaA");
    test(regex_314, 314, "foo(aA){1,5}+(aA)", "fooaAaAaAaAaA", "n", "-", "fooaAaAaAaAaA");
    test(regex_315, 315, "foo(aA|bB){1,5}+(aA|bB)", "fooaAbBbBaAaA", "n", "-", "fooaAbBbBaAaA");
    test(regex_316, 316, "foo(aA)?+(aA)", "fooaAb", "n", "-", "fooaAb");
    test(regex_317, 317, "foo(aA|bB)?+(aA|bB)", "foobBb", "n", "-", "foobBb");
    test(regex_318, 318, "foo(aA)++b", "fooaAaAaAaAaAb", "y", "$&", "fooaAaAaAaAaAb");
    test(regex_319, 319, "foo(aA|bB)++b", "foobBaAbBaAbBb", "y", "$&", "foobBaAbBaAbBb");
    test(regex_320, 320, "foo(aA)*+b", "fooaAaAaAaAaAb", "y", "$&", "fooaAaAaAaAaAb");
    test(regex_321, 321, "foo(aA|bB)*+b", "foobBbBaAaAaAb", "y", "$&", "foobBbBaAaAaAb");
    test(regex_322, 322, "foo(aA){1,5}+b", "fooaAaAaAaAaAb", "y", "$&", "fooaAaAaAaAaAb");
    test(regex_323, 323, "foo(aA|bB){1,5}+b", "foobBaAaAaAaAb", "y", "$&", "foobBaAaAaAaAb");
    test(regex_324, 324, "foo(aA)?+b", "fooaAb", "y", "$&", "fooaAb");
    test(regex_325, 325, "foo(aA|bB)?+b", "foobBb", "y", "$&", "foobBb");
    test(regex_326, 326, "foo(\\h+)bar", "foo\tbar", "y", "$1", "\t");
    test(regex_327, 327, "(\\H+)(\\h)", "foo\tbar", "y", "$1-$2", "foo-\t");
    test(regex_328, 328, "(\\h+)(\\H)", "foo\tbar", "y", "$1-$2", "\t-b");
    test(regex_329, 329, "foo(\\h)bar", "foo\tbar", "y", "$1", "\t");
    test(regex_330, 330, "(\\H)(\\h)", "foo\tbar", "y", "$1-$2", "o-\t");
    test(regex_331, 331, "(\\h)(\\H)", "foo\tbar", "y", "$1-$2", "\t-b");
    test(regex_332, 332, "foo(\\v+)bar", "foo\r\n\r\n\nbar", "y", "$1", "\r\n\r\n\n");
    test(regex_333, 333, "(\\V+)(\\v)", "foo\r\n\r\n\nbar", "y", "$1-$2", "foo-\r");
    test(regex_334, 334, "(\\v+)(\\V)", "foo\r\n\r\n\nbar", "y", "$1-$2", "\r\n\r\n\n-b");
    test(regex_335, 335, "foo(\\v)bar", "foo\rbar", "y", "$1", "\r");
    test(regex_336, 336, "(\\V)(\\v)", "foo\rbar", "y", "$1-$2", "o-\r");
    test(regex_337, 337, "(\\v)(\\V)", "foo\rbar", "y", "$1-$2", "\r-b");
    test(regex_338, 338, "foo\\Kbar", "foobar", "y", "$&", "bar");
    test(regex_339, 339, "foo\\t\\n\\r\\f\\a\\ebar", "foo\t\n\r\f\a\ebar", "y", "$&", "foo\t\n\r\f\a\ebar");
    std::cout << std::endl;
  }
}
main: (args) = {
    test_perl_tests().run();
}
