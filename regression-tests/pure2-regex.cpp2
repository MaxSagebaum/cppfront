
test: <M> (regex: M, id: std::string, regex_str: std::string, str: std::string, result: std::string) = {
  context : type == M::context;
  ctx: context = ();

  str_mod := str;
  if str_mod == "NULL" {
    str_mod = "";
  }

  status: std::string = "OK";
  if regex.to_string() != regex_str {
    status = "Failure: Parsed regex does not match.";
  } else {
    m : bool = regex.search(str_mod, ctx);
    is_pass := !result.starts_with("NOMATCH");

    // Check if we expect a match.
    if is_pass != m {
      if is_pass {
        status = "Failure: Regex should apply.";
      }
      else {
        status = "Failure: Regex should not apply.";
      }
    }

    // If we have a match. Check the ranges.
    if m {
      ranges_match := result == ctx.print_ranges();
      should_ranges_match := !id.starts_with("M");

      if ranges_match != should_ranges_match {
        if ranges_match {
          status = "Failure: Ranges should be wrong.";
        }
        else {
          status = "Failure: Ranges are wrong.";
        }
      }
    }
  }

  std::cout << "(id)$: (status)$ regex: (regex_str)$ parsed_regex: (regex.to_string())$ str: (str)$ result: (ctx.print_ranges())$ expected_results (result)$" << std::endl;
}


test_basic3: @regex type = {
  regex_1 := "\)";
  regex_2 := "\}";
  regex_3 := "]";
  regex_4 := "\$^";
  regex_5 := "a(\$)";
  regex_6 := "a*(^a)";
  regex_7 := "(..)*(...)*";
  regex_8 := "(..)*(...)*";
  regex_9 := "(ab|a)(bc|c)";
  regex_10 := "(ab)c|abc";
  regex_11 := "a{0}b";
  regex_12 := "(a*)(b?)(b+)b{3}";
  regex_13 := "(a*)(b{0,1})(b{1,})b{3}";
  regex_15 := "((a|a)|a)";
  regex_16 := "(a*)(a|aa)";
  regex_17 := "a*(a.|aa)";
  regex_18 := "a(b)|c(d)|a(e)f";
  regex_19 := "(a|b)?.*";
  regex_20 := "(a|b)c|a(b|c)";
  regex_21 := "(a|b)c|a(b|c)";
  regex_22 := "(a|b)*c|(a|ab)*c";
  regex_23 := "(a|b)*c|(a|ab)*c";
  regex_24 := "(.a|.b).*|.*(.a|.b)";
  regex_25 := "a?(ab|ba)ab";
  regex_26 := "a?(ac{0}b|ba)ab";
  regex_27 := "ab|abab";
  regex_28 := "aba|bab|bba";
  regex_29 := "aba|bab";
  regex_30 := "(aa|aaa)*|(a|aaaaa)";
  regex_31 := "(a.|.a.)*|(a|.a...)";
  regex_32 := "ab|a";
  regex_33 := "ab|a";
  regex_M34 := "(Ab|cD)*";
  regex_35 := ":::1:::0:|:::1:1:0:";
  regex_36 := ":::1:::0:|:::1:1:1:";
  regex_37 := "[[:lower:]]+";
  regex_38 := "[[:upper:]]+";
  regex_39 := "(a)(b)(c)";
  regex_43   := "((((((((((((((((((((((((((((((x))))))))))))))))))))))))))))))";
  regex_44   := "((((((((((((((((((((((((((((((x))))))))))))))))))))))))))))))*";
  regex_45 := "a?(ab|ba)*";
  regex_46 := "abaa|abbaa|abbbaa|abbbbaa";
  regex_47 := "abaa|abbaa|abbbaa|abbbbaa";
  regex_48 := "aaac|aabc|abac|abbc|baac|babc|bbac|bbbc";
  regex_49 := "aaaa|bbbb|cccc|ddddd|eeeeee|fffffff|gggg|hhhh|iiiii|jjjjj|kkkkk|llll";
  regex_50 := "a*a*a*a*a*b";
  regex_51 := "ab+bc";
  regex_52 := "ab+bc";
  regex_53 := "ab?bc";
  regex_54 := "ab?bc";
  regex_55 := "ab?c";
  regex_56 := "ab|cd";
  regex_57 := "ab|cd";
  regex_58 := "a\(b";
  regex_59 := "a\(*b";
  regex_60 := "a\(*b";
  regex_61 := "((a))";
  regex_62 := "(a)b(c)";
  regex_63 := "a+b+c";
  regex_64 := "a*";
  regex_65 := "(a*)*";
  regex_66 := "(a*)+";
  regex_67 := "(a*|b)*";
  regex_68 := "(a+|b)*";
  regex_69 := "(a+|b)+";
  regex_70 := "(a+|b)?";
  regex_71 := "(^)*";
  regex_72 := "([abc])*d";
  regex_73 := "([abc])*bcd";
  regex_74 := "a|b|c|d|e";
  regex_75 := "(a|b|c|d|e)f";
  regex_76 := "((a*|b))*";
  regex_77 := "(ab|cd)e";
  regex_78 := "(a|b)c*d";
  regex_79 := "(ab|ab*)bc";
  regex_80 := "a([bc]*)c*";
  regex_81 := "a([bc]*)(c*d)";
  regex_82 := "a([bc]+)(c*d)";
  regex_83 := "a([bc]*)(c+d)";
  regex_84 := "a[bcd]*dcdcde";
  regex_85 := "(ab|a)b*c";
  regex_86 := "((a)(b)c)(d)";
  regex_87 := "^a(bc+|b[eh])g|.h\$";
  regex_88 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_89 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_90 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_91 := "(((((((((a)))))))))";
  regex_92 := "(.*)c(.*)";
  regex_93 := "a(bc)d";
  regex_94 := "a[-]?c";
  regex_95 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_96 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_97 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_98 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_99 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_100 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_101 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_102 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_103 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_104 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_105 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_106 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_107 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_108 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_109 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_110 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_111 := "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]";
  regex_112 := "a+(b|c)*d+";
  regex_113 := "^.+\$";
  regex_114 := "^(.+)\$";
  regex_115 := "^([^!.]+).att.com!(.+)\$";
  regex_116 := "^([^!]+!)?([^!]+)\$";
  regex_117 := "^([^!]+!)?([^!]+)\$";
  regex_118 := "^([^!]+!)?([^!]+)\$";
  regex_119 := "^.+!([^!]+!)([^!]+)\$";
  regex_120 := "((foo)|(bar))!bas";
  regex_121 := "((foo)|(bar))!bas";
  regex_122 := "((foo)|(bar))!bas";
  regex_123 := "((foo)|bar)!bas";
  regex_124 := "((foo)|bar)!bas";
  regex_125 := "((foo)|bar)!bas";
  regex_126 := "(foo|(bar))!bas";
  regex_127 := "(foo|(bar))!bas";
  regex_128 := "(foo|(bar))!bas";
  regex_129 := "(foo|bar)!bas";
  regex_130 := "(foo|bar)!bas";
  regex_131 := "(foo|bar)!bas";
  regex_132 := "^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))\$";
  regex_133 := "^([^!]+!)?([^!]+)\$|^.+!([^!]+!)([^!]+)\$";
  regex_134 := "^([^!]+!)?([^!]+)\$|^.+!([^!]+!)([^!]+)\$";
  regex_135 := "^([^!]+!)?([^!]+)\$|^.+!([^!]+!)([^!]+)\$";
  regex_136 := "^([^!]+!)?([^!]+)\$|^.+!([^!]+!)([^!]+)\$";
  regex_137 := "^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))\$";
  regex_138 := "^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))\$";
  regex_139 := "^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))\$";
  regex_140 := "^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))\$";
  regex_141 := ".*(/XXX).*";
  regex_142 := ".*(\\XXX).*";
  regex_143 := "\\XXX";
  regex_144 := ".*(/000).*";
  regex_145 := ".*(\\000).*";
  regex_146 := "\\000";
  run: (this) = {
    std::cout << "Running basic3:"<< std::endl;
    test(regex_1(), "1", "\\)", "()", "(1,2)");
    test(regex_2(), "2", "\\}", "}", "(0,1)");
    test(regex_3(), "3", "]", "]", "(0,1)");
    test(regex_4(), "4", "\\$^", "NULL", "(0,0)");
    test(regex_5(), "5", "a(\\$)", "aa", "(1,2)(2,2)");
    test(regex_6(), "6", "a*(^a)", "aa", "(0,1)(0,1)");
    test(regex_7(), "7", "(..)*(...)*", "a", "(0,0)(?,?)(?,?)");
    test(regex_8(), "8", "(..)*(...)*", "abcd", "(0,4)(2,4)(?,?)");
    test(regex_9(), "9", "(ab|a)(bc|c)", "abc", "(0,3)(0,2)(2,3)");
    test(regex_10(), "10", "(ab)c|abc", "abc", "(0,3)(0,2)");
    test(regex_11(), "11", "a{0}b", "ab", "(1,2)");
    test(regex_12(), "12", "(a*)(b?)(b+)b{3}", "aaabbbbbbb", "(0,10)(0,3)(3,4)(4,7)");
    test(regex_13(), "13", "(a*)(b{0,1})(b{1,})b{3}", "aaabbbbbbb", "(0,10)(0,3)(3,4)(4,7)");
    test(regex_15(), "15", "((a|a)|a)", "a", "(0,1)(0,1)(0,1)");
    test(regex_16(), "16", "(a*)(a|aa)", "aaaa", "(0,4)(0,3)(3,4)");
    test(regex_17(), "17", "a*(a.|aa)", "aaaa", "(0,4)(2,4)");
    test(regex_18(), "18", "a(b)|c(d)|a(e)f", "aef", "(0,3)(?,?)(?,?)(1,2)");
    test(regex_19(), "19", "(a|b)?.*", "b", "(0,1)(0,1)");
    test(regex_20(), "20", "(a|b)c|a(b|c)", "ac", "(0,2)(0,1)(?,?)");
    test(regex_21(), "21", "(a|b)c|a(b|c)", "ab", "(0,2)(?,?)(1,2)");
    test(regex_22(), "22", "(a|b)*c|(a|ab)*c", "abc", "(0,3)(1,2)(?,?)");
    test(regex_23(), "23", "(a|b)*c|(a|ab)*c", "xc", "(1,2)(?,?)(?,?)");
    test(regex_24(), "24", "(.a|.b).*|.*(.a|.b)", "xa", "(0,2)(0,2)(?,?)");
    test(regex_25(), "25", "a?(ab|ba)ab", "abab", "(0,4)(0,2)");
    test(regex_26(), "26", "a?(ac{0}b|ba)ab", "abab", "(0,4)(0,2)");
    test(regex_27(), "27", "ab|abab", "abbabab", "(0,2)");
    test(regex_28(), "28", "aba|bab|bba", "baaabbbaba", "(5,8)");
    test(regex_29(), "29", "aba|bab", "baaabbbaba", "(6,9)");
    test(regex_30(), "30", "(aa|aaa)*|(a|aaaaa)", "aa", "(0,2)(0,2)(?,?)");
    test(regex_31(), "31", "(a.|.a.)*|(a|.a...)", "aa", "(0,2)(0,2)(?,?)");
    test(regex_32(), "32", "ab|a", "xabc", "(1,3)");
    test(regex_33(), "33", "ab|a", "xxabc", "(2,4)");
    test(regex_M34(), "M34", "(Ab|cD)*", "aBcD", "(0,4)(2,4)");
    test(regex_35(), "35", ":::1:::0:|:::1:1:0:", ":::0:::1:::1:::0:", "(8,17)");
    test(regex_36(), "36", ":::1:::0:|:::1:1:1:", ":::0:::1:::1:::0:", "(8,17)");
    test(regex_37(), "37", "[[:lower:]]+", "`az{", "(1,3)");
    test(regex_38(), "38", "[[:upper:]]+", "@AZ[", "(1,3)");
    test(regex_39(), "39", "(a)(b)(c)", "abc", "(0,3)(0,1)(1,2)(2,3)");
    test(regex_43  (), "43  ", "((((((((((((((((((((((((((((((x))))))))))))))))))))))))))))))", "x", "(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)");
    test(regex_44  (), "44  ", "((((((((((((((((((((((((((((((x))))))))))))))))))))))))))))))*", "xx", "(0,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)(1,2)");
    test(regex_45(), "45", "a?(ab|ba)*", "ababababababababababababababababababababababababababababababababababababababababa", "(0,81)(79,81)");
    test(regex_46(), "46", "abaa|abbaa|abbbaa|abbbbaa", "ababbabbbabbbabbbbabbbbaa", "(18,25)");
    test(regex_47(), "47", "abaa|abbaa|abbbaa|abbbbaa", "ababbabbbabbbabbbbabaa", "(18,22)");
    test(regex_48(), "48", "aaac|aabc|abac|abbc|baac|babc|bbac|bbbc", "baaabbbabac", "(7,11)");
    test(regex_49(), "49", "aaaa|bbbb|cccc|ddddd|eeeeee|fffffff|gggg|hhhh|iiiii|jjjjj|kkkkk|llll", "XaaaXbbbXcccXdddXeeeXfffXgggXhhhXiiiXjjjXkkkXlllXcbaXaaaa", "(53,57)");
    test(regex_50(), "50", "a*a*a*a*a*b", "aaaaaaaaab", "(0,10)");
    test(regex_51(), "51", "ab+bc", "abbc", "(0,4)");
    test(regex_52(), "52", "ab+bc", "abbbbc", "(0,6)");
    test(regex_53(), "53", "ab?bc", "abbc", "(0,4)");
    test(regex_54(), "54", "ab?bc", "abc", "(0,3)");
    test(regex_55(), "55", "ab?c", "abc", "(0,3)");
    test(regex_56(), "56", "ab|cd", "abc", "(0,2)");
    test(regex_57(), "57", "ab|cd", "abcd", "(0,2)");
    test(regex_58(), "58", "a\\(b", "a(b", "(0,3)");
    test(regex_59(), "59", "a\\(*b", "ab", "(0,2)");
    test(regex_60(), "60", "a\\(*b", "a((b", "(0,4)");
    test(regex_61(), "61", "((a))", "abc", "(0,1)(0,1)(0,1)");
    test(regex_62(), "62", "(a)b(c)", "abc", "(0,3)(0,1)(2,3)");
    test(regex_63(), "63", "a+b+c", "aabbabc", "(4,7)");
    test(regex_64(), "64", "a*", "aaa", "(0,3)");
    test(regex_65(), "65", "(a*)*", "-", "(0,0)(0,0)");
    test(regex_66(), "66", "(a*)+", "-", "(0,0)(0,0)");
    test(regex_67(), "67", "(a*|b)*", "-", "(0,0)(0,0)");
    test(regex_68(), "68", "(a+|b)*", "ab", "(0,2)(1,2)");
    test(regex_69(), "69", "(a+|b)+", "ab", "(0,2)(1,2)");
    test(regex_70(), "70", "(a+|b)?", "ab", "(0,1)(0,1)");
    test(regex_71(), "71", "(^)*", "-", "(0,0)(0,0)");
    test(regex_72(), "72", "([abc])*d", "abbbcd", "(0,6)(4,5)");
    test(regex_73(), "73", "([abc])*bcd", "abcd", "(0,4)(0,1)");
    test(regex_74(), "74", "a|b|c|d|e", "e", "(0,1)");
    test(regex_75(), "75", "(a|b|c|d|e)f", "ef", "(0,2)(0,1)");
    test(regex_76(), "76", "((a*|b))*", "-", "(0,0)(0,0)(0,0)");
    test(regex_77(), "77", "(ab|cd)e", "abcde", "(2,5)(2,4)");
    test(regex_78(), "78", "(a|b)c*d", "abcd", "(1,4)(1,2)");
    test(regex_79(), "79", "(ab|ab*)bc", "abc", "(0,3)(0,1)");
    test(regex_80(), "80", "a([bc]*)c*", "abc", "(0,3)(1,3)");
    test(regex_81(), "81", "a([bc]*)(c*d)", "abcd", "(0,4)(1,3)(3,4)");
    test(regex_82(), "82", "a([bc]+)(c*d)", "abcd", "(0,4)(1,3)(3,4)");
    test(regex_83(), "83", "a([bc]*)(c+d)", "abcd", "(0,4)(1,2)(2,4)");
    test(regex_84(), "84", "a[bcd]*dcdcde", "adcdcde", "(0,7)");
    test(regex_85(), "85", "(ab|a)b*c", "abc", "(0,3)(0,2)");
    test(regex_86(), "86", "((a)(b)c)(d)", "abcd", "(0,4)(0,3)(0,1)(1,2)(3,4)");
    test(regex_87(), "87", "^a(bc+|b[eh])g|.h\\$", "abh", "(1,3)(?,?)");
    test(regex_88(), "88", "(bc+d\\$|ef*g.|h?i(j|k))", "effgz", "(0,5)(0,5)(?,?)");
    test(regex_89(), "89", "(bc+d\\$|ef*g.|h?i(j|k))", "ij", "(0,2)(0,2)(1,2)");
    test(regex_90(), "90", "(bc+d\\$|ef*g.|h?i(j|k))", "reffgz", "(1,6)(1,6)(?,?)");
    test(regex_91(), "91", "(((((((((a)))))))))", "a", "(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)(0,1)");
    test(regex_92(), "92", "(.*)c(.*)", "abcde", "(0,5)(0,2)(3,5)");
    test(regex_93(), "93", "a(bc)d", "abcd", "(0,4)(1,3)");
    test(regex_94(), "94", "a[-]?c", "ac", "(0,3)");
    test(regex_95(), "95", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Muammar_Qaddafi", "(0,15)(?,?)(10,12)");
    test(regex_96(), "96", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Mo'ammar_Gadhafi", "(0,16)(?,?)(11,13)");
    test(regex_97(), "97", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Muammar_Kaddafi", "(0,15)(?,?)(10,12)");
    test(regex_98(), "98", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Muammar_Qadhafi", "(0,15)(?,?)(10,12)");
    test(regex_99(), "99", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Muammar_Gadafi", "(0,14)(?,?)(10,11)");
    test(regex_100(), "100", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Mu'ammar_Qadafi", "(0,15)(?,?)(11,12)");
    test(regex_101(), "101", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Moamar_Gaddafi", "(0,14)(?,?)(9,11)");
    test(regex_102(), "102", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Mu'ammar_Qadhdhafi", "(0,18)(?,?)(13,15)");
    test(regex_103(), "103", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Muammar_Khaddafi", "(0,16)(?,?)(11,13)");
    test(regex_104(), "104", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Muammar_Ghaddafy", "(0,16)(?,?)(11,13)");
    test(regex_105(), "105", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Muammar_Ghadafi", "(0,15)(?,?)(11,12)");
    test(regex_106(), "106", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Muammar_Ghaddafi", "(0,16)(?,?)(11,13)");
    test(regex_107(), "107", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Muamar_Kaddafi", "(0,14)(?,?)(9,11)");
    test(regex_108(), "108", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Muammar_Quathafi", "(0,16)(?,?)(11,13)");
    test(regex_109(), "109", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Muammar_Gheddafi", "(0,16)(?,?)(11,13)");
    test(regex_110(), "110", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Moammar_Khadafy", "(0,15)(?,?)(11,12)");
    test(regex_111(), "111", "M[ou]'?am+[ae]r_.*([AEae]l[-_])?[GKQ]h?[aeu]+([dtz][dhz]?)+af[iy]", "Moammar_Qudhafi", "(0,15)(?,?)(10,12)");
    test(regex_112(), "112", "a+(b|c)*d+", "aabcdd", "(0,6)(3,4)");
    test(regex_113(), "113", "^.+\\$", "vivi", "(0,4)");
    test(regex_114(), "114", "^(.+)\\$", "vivi", "(0,4)(0,4)");
    test(regex_115(), "115", "^([^!.]+).att.com!(.+)\\$", "gryphon.att.com!eby", "(0,19)(0,7)(16,19)");
    test(regex_116(), "116", "^([^!]+!)?([^!]+)\\$", "bas", "(0,3)(?,?)(0,3)");
    test(regex_117(), "117", "^([^!]+!)?([^!]+)\\$", "bar!bas", "(0,7)(0,4)(4,7)");
    test(regex_118(), "118", "^([^!]+!)?([^!]+)\\$", "foo!bas", "(0,7)(0,4)(4,7)");
    test(regex_119(), "119", "^.+!([^!]+!)([^!]+)\\$", "foo!bar!bas", "(0,11)(4,8)(8,11)");
    test(regex_120(), "120", "((foo)|(bar))!bas", "bar!bas", "(0,7)(0,3)(?,?)(0,3)");
    test(regex_121(), "121", "((foo)|(bar))!bas", "foo!bar!bas", "(4,11)(4,7)(?,?)(4,7)");
    test(regex_122(), "122", "((foo)|(bar))!bas", "foo!bas", "(0,7)(0,3)(0,3)(?,?)");
    test(regex_123(), "123", "((foo)|bar)!bas", "bar!bas", "(0,7)(0,3)(?,?)");
    test(regex_124(), "124", "((foo)|bar)!bas", "foo!bar!bas", "(4,11)(4,7)(?,?)");
    test(regex_125(), "125", "((foo)|bar)!bas", "foo!bas", "(0,7)(0,3)(0,3)");
    test(regex_126(), "126", "(foo|(bar))!bas", "bar!bas", "(0,7)(0,3)(0,3)");
    test(regex_127(), "127", "(foo|(bar))!bas", "foo!bar!bas", "(4,11)(4,7)(4,7)");
    test(regex_128(), "128", "(foo|(bar))!bas", "foo!bas", "(0,7)(0,3)(?,?)");
    test(regex_129(), "129", "(foo|bar)!bas", "bar!bas", "(0,7)(0,3)");
    test(regex_130(), "130", "(foo|bar)!bas", "foo!bar!bas", "(4,11)(4,7)");
    test(regex_131(), "131", "(foo|bar)!bas", "foo!bas", "(0,7)(0,3)");
    test(regex_132(), "132", "^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))\\$", "foo!bar!bas", "(0,11)(0,11)(?,?)(?,?)(4,8)(8,11)");
    test(regex_133(), "133", "^([^!]+!)?([^!]+)\\$|^.+!([^!]+!)([^!]+)\\$", "bas", "(0,3)(?,?)(0,3)(?,?)(?,?)");
    test(regex_134(), "134", "^([^!]+!)?([^!]+)\\$|^.+!([^!]+!)([^!]+)\\$", "bar!bas", "(0,7)(0,4)(4,7)(?,?)(?,?)");
    test(regex_135(), "135", "^([^!]+!)?([^!]+)\\$|^.+!([^!]+!)([^!]+)\\$", "foo!bar!bas", "(0,11)(?,?)(?,?)(4,8)(8,11)");
    test(regex_136(), "136", "^([^!]+!)?([^!]+)\\$|^.+!([^!]+!)([^!]+)\\$", "foo!bas", "(0,7)(0,4)(4,7)(?,?)(?,?)");
    test(regex_137(), "137", "^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))\\$", "bas", "(0,3)(0,3)(?,?)(0,3)(?,?)(?,?)");
    test(regex_138(), "138", "^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))\\$", "bar!bas", "(0,7)(0,7)(0,4)(4,7)(?,?)(?,?)");
    test(regex_139(), "139", "^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))\\$", "foo!bar!bas", "(0,11)(0,11)(?,?)(?,?)(4,8)(8,11)");
    test(regex_140(), "140", "^(([^!]+!)?([^!]+)|.+!([^!]+!)([^!]+))\\$", "foo!bas", "(0,7)(0,7)(0,4)(4,7)(?,?)(?,?)");
    test(regex_141(), "141", ".*(/XXX).*", "/XXX", "(0,4)(0,4)");
    test(regex_142(), "142", ".*(\\\\XXX).*", "\\XXX", "(0,4)(0,4)");
    test(regex_143(), "143", "\\\\XXX", "\\XXX", "(0,4)");
    test(regex_144(), "144", ".*(/000).*", "/000", "(0,4)(0,4)");
    test(regex_145(), "145", ".*(\\\\000).*", "\\000", "(0,4)(0,4)");
    test(regex_146(), "146", "\\\\000", "\\000", "(0,4)");
    std::cout << std::endl;
  }
}
test_class: @regex type = {
  regex_1 := "aa*";
  regex_2 := "(a*)(ab)*(b*)";
  regex_M2 := "(a*)(ab)*(b*)";
  regex_3 := "((a*)(ab)*)((b*)(a*))";
  regex_4 := "(...?.?)*";
  regex_5 := "(a|ab)(bc|c)";
  regex_6 := "(aba|a*b)(aba|a*b)";
  regex_7 := "(a*){2}";
  regex_8 := "(a*)*";
  regex_9 := "(aba|a*b)*";
  regex_10 := "(a(b)?)+";
  regex_11 := ".*(.*)";
  regex_12 := "(a?)((ab)?)(b?)a?(ab)?b?";
  regex_M12 := "(a?)((ab)?)(b?)a?(ab)?b?";
  run: (this) = {
    std::cout << "Running class:"<< std::endl;
    test(regex_1(), "1", "aa*", "xaxaax", "(1,2)");
    test(regex_2(), "2", "(a*)(ab)*(b*)", "abc", "(0,2)(0,1)(?,?)(1,2)");
    test(regex_M2(), "M2", "(a*)(ab)*(b*)", "abc", "(0,2)(0,0)(0,2)(2,2)");
    test(regex_3(), "3", "((a*)(ab)*)((b*)(a*))", "aba", "(0,3)(0,2)(0,0)(0,2)(2,3)(2,2)(2,3)");
    test(regex_4(), "4", "(...?.?)*", "xxxxxx", "(0,6)(4,6)");
    test(regex_5(), "5", "(a|ab)(bc|c)", "abcabc", "(0,3)(0,2)(2,3)");
    test(regex_6(), "6", "(aba|a*b)(aba|a*b)", "ababa", "(0,5)(0,2)(2,5)");
    test(regex_7(), "7", "(a*){2}", "xxxxx", "(0,0)(0,0)");
    test(regex_8(), "8", "(a*)*", "a", "(0,1)(0,1)");
    test(regex_9(), "9", "(aba|a*b)*", "ababa", "(0,5)(2,5)");
    test(regex_10(), "10", "(a(b)?)+", "aba", "(0,3)(2,3)(?,?)");
    test(regex_11(), "11", ".*(.*)", "ab", "(0,2)(2,2)");
    test(regex_12(), "12", "(a?)((ab)?)(b?)a?(ab)?b?", "abab", "(0,4)(0,1)(1,1)(?,?)(1,2)(?,?)");
    test(regex_M12(), "M12", "(a?)((ab)?)(b?)a?(ab)?b?", "abab", "(0,4)(0,1)(1,1)(?,?)(1,2)(2,4)");
    std::cout << std::endl;
  }
}
test_left_assoc: @regex type = {
  regex_M1 := "(a|ab)(c|bcd)(d*)";
  regex_M2 := "(a|ab)(bcd|c)(d*)";
  regex_M3 := "(ab|a)(c|bcd)(d*)";
  regex_M4 := "(ab|a)(bcd|c)(d*)";
  regex_M5 := "(a*)(b|abc)(c*)";
  regex_M6 := "(a*)(abc|b)(c*)";
  regex_M7 := "(a*)(b|abc)(c*)";
  regex_M8 := "(a*)(abc|b)(c*)";
  regex_M9 := "(a|ab)(c|bcd)(d|.*)";
  regex_M10 := "(a|ab)(bcd|c)(d|.*)";
  regex_M11 := "(ab|a)(c|bcd)(d|.*)";
  regex_M12 := "(ab|a)(bcd|c)(d|.*)";
  run: (this) = {
    std::cout << "Running left_assoc:"<< std::endl;
    test(regex_M1(), "M1", "(a|ab)(c|bcd)(d*)", "abcd", "(0,4)(0,1)(1,4)(4,4)");
    test(regex_M2(), "M2", "(a|ab)(bcd|c)(d*)", "abcd", "(0,4)(0,1)(1,4)(4,4)");
    test(regex_M3(), "M3", "(ab|a)(c|bcd)(d*)", "abcd", "(0,4)(0,1)(1,4)(4,4)");
    test(regex_M4(), "M4", "(ab|a)(bcd|c)(d*)", "abcd", "(0,4)(0,1)(1,4)(4,4)");
    test(regex_M5(), "M5", "(a*)(b|abc)(c*)", "abc", "(0,3)(0,0)(0,3)(3,3)");
    test(regex_M6(), "M6", "(a*)(abc|b)(c*)", "abc", "(0,3)(0,0)(0,3)(3,3)");
    test(regex_M7(), "M7", "(a*)(b|abc)(c*)", "abc", "(0,3)(0,0)(0,3)(3,3)");
    test(regex_M8(), "M8", "(a*)(abc|b)(c*)", "abc", "(0,3)(0,0)(0,3)(3,3)");
    test(regex_M9(), "M9", "(a|ab)(c|bcd)(d|.*)", "abcd", "(0,4)(0,1)(1,4)(4,4)");
    test(regex_M10(), "M10", "(a|ab)(bcd|c)(d|.*)", "abcd", "(0,4)(0,1)(1,4)(4,4)");
    test(regex_M11(), "M11", "(ab|a)(c|bcd)(d|.*)", "abcd", "(0,4)(0,1)(1,4)(4,4)");
    test(regex_M12(), "M12", "(ab|a)(bcd|c)(d|.*)", "abcd", "(0,4)(0,1)(1,4)(4,4)");
    std::cout << std::endl;
  }
}
test_right_assoc: @regex type = {
  regex_1 := "(a|ab)(c|bcd)(d*)";
  regex_2 := "(a|ab)(bcd|c)(d*)";
  regex_3 := "(ab|a)(c|bcd)(d*)";
  regex_4 := "(ab|a)(bcd|c)(d*)";
  regex_5 := "(a*)(b|abc)(c*)";
  regex_6 := "(a*)(abc|b)(c*)";
  regex_7 := "(a*)(b|abc)(c*)";
  regex_8 := "(a*)(abc|b)(c*)";
  regex_9 := "(a|ab)(c|bcd)(d|.*)";
  regex_10 := "(a|ab)(bcd|c)(d|.*)";
  regex_11 := "(ab|a)(c|bcd)(d|.*)";
  regex_12 := "(ab|a)(bcd|c)(d|.*)";
  run: (this) = {
    std::cout << "Running right_assoc:"<< std::endl;
    test(regex_1(), "1", "(a|ab)(c|bcd)(d*)", "abcd", "(0,4)(0,2)(2,3)(3,4)");
    test(regex_2(), "2", "(a|ab)(bcd|c)(d*)", "abcd", "(0,4)(0,2)(2,3)(3,4)");
    test(regex_3(), "3", "(ab|a)(c|bcd)(d*)", "abcd", "(0,4)(0,2)(2,3)(3,4)");
    test(regex_4(), "4", "(ab|a)(bcd|c)(d*)", "abcd", "(0,4)(0,2)(2,3)(3,4)");
    test(regex_5(), "5", "(a*)(b|abc)(c*)", "abc", "(0,3)(0,1)(1,2)(2,3)");
    test(regex_6(), "6", "(a*)(abc|b)(c*)", "abc", "(0,3)(0,1)(1,2)(2,3)");
    test(regex_7(), "7", "(a*)(b|abc)(c*)", "abc", "(0,3)(0,1)(1,2)(2,3)");
    test(regex_8(), "8", "(a*)(abc|b)(c*)", "abc", "(0,3)(0,1)(1,2)(2,3)");
    test(regex_9(), "9", "(a|ab)(c|bcd)(d|.*)", "abcd", "(0,4)(0,2)(2,3)(3,4)");
    test(regex_10(), "10", "(a|ab)(bcd|c)(d|.*)", "abcd", "(0,4)(0,2)(2,3)(3,4)");
    test(regex_11(), "11", "(ab|a)(c|bcd)(d|.*)", "abcd", "(0,4)(0,2)(2,3)(3,4)");
    test(regex_12(), "12", "(ab|a)(bcd|c)(d|.*)", "abcd", "(0,4)(0,2)(2,3)(3,4)");
    std::cout << std::endl;
  }
}
test_forced_assoc: @regex type = {
  regex_1 := "(a|ab)(c|bcd)";
  regex_2 := "(a|ab)(bcd|c)";
  regex_3 := "(ab|a)(c|bcd)";
  regex_4 := "(ab|a)(bcd|c)";
  regex_5 := "((a|ab)(c|bcd))(d*)";
  regex_6 := "((a|ab)(bcd|c))(d*)";
  regex_7 := "((ab|a)(c|bcd))(d*)";
  regex_8 := "((ab|a)(bcd|c))(d*)";
  regex_9 := "(a|ab)((c|bcd)(d*))";
  regex_10 := "(a|ab)((bcd|c)(d*))";
  regex_11 := "(ab|a)((c|bcd)(d*))";
  regex_12 := "(ab|a)((bcd|c)(d*))";
  regex_13 := "(a*)(b|abc)";
  regex_14 := "(a*)(abc|b)";
  regex_15 := "((a*)(b|abc))(c*)";
  regex_16 := "((a*)(abc|b))(c*)";
  regex_17 := "(a*)((b|abc)(c*))";
  regex_18 := "(a*)((abc|b)(c*))";
  regex_19 := "(a*)(b|abc)";
  regex_20 := "(a*)(abc|b)";
  regex_21 := "((a*)(b|abc))(c*)";
  regex_22 := "((a*)(abc|b))(c*)";
  regex_23 := "(a*)((b|abc)(c*))";
  regex_24 := "(a*)((abc|b)(c*))";
  regex_25 := "(a|ab)";
  regex_26 := "(ab|a)";
  regex_27 := "(a|ab)(b*)";
  regex_28 := "(ab|a)(b*)";
  run: (this) = {
    std::cout << "Running forced_assoc:"<< std::endl;
    test(regex_1(), "1", "(a|ab)(c|bcd)", "abcd", "(0,4)(0,1)(1,4)");
    test(regex_2(), "2", "(a|ab)(bcd|c)", "abcd", "(0,4)(0,1)(1,4)");
    test(regex_3(), "3", "(ab|a)(c|bcd)", "abcd", "(0,4)(0,1)(1,4)");
    test(regex_4(), "4", "(ab|a)(bcd|c)", "abcd", "(0,4)(0,1)(1,4)");
    test(regex_5(), "5", "((a|ab)(c|bcd))(d*)", "abcd", "(0,4)(0,4)(0,1)(1,4)(4,4)");
    test(regex_6(), "6", "((a|ab)(bcd|c))(d*)", "abcd", "(0,4)(0,4)(0,1)(1,4)(4,4)");
    test(regex_7(), "7", "((ab|a)(c|bcd))(d*)", "abcd", "(0,4)(0,4)(0,1)(1,4)(4,4)");
    test(regex_8(), "8", "((ab|a)(bcd|c))(d*)", "abcd", "(0,4)(0,4)(0,1)(1,4)(4,4)");
    test(regex_9(), "9", "(a|ab)((c|bcd)(d*))", "abcd", "(0,4)(0,2)(2,4)(2,3)(3,4)");
    test(regex_10(), "10", "(a|ab)((bcd|c)(d*))", "abcd", "(0,4)(0,2)(2,4)(2,3)(3,4)");
    test(regex_11(), "11", "(ab|a)((c|bcd)(d*))", "abcd", "(0,4)(0,2)(2,4)(2,3)(3,4)");
    test(regex_12(), "12", "(ab|a)((bcd|c)(d*))", "abcd", "(0,4)(0,2)(2,4)(2,3)(3,4)");
    test(regex_13(), "13", "(a*)(b|abc)", "abc", "(0,3)(0,0)(0,3)");
    test(regex_14(), "14", "(a*)(abc|b)", "abc", "(0,3)(0,0)(0,3)");
    test(regex_15(), "15", "((a*)(b|abc))(c*)", "abc", "(0,3)(0,3)(0,0)(0,3)(3,3)");
    test(regex_16(), "16", "((a*)(abc|b))(c*)", "abc", "(0,3)(0,3)(0,0)(0,3)(3,3)");
    test(regex_17(), "17", "(a*)((b|abc)(c*))", "abc", "(0,3)(0,1)(1,3)(1,2)(2,3)");
    test(regex_18(), "18", "(a*)((abc|b)(c*))", "abc", "(0,3)(0,1)(1,3)(1,2)(2,3)");
    test(regex_19(), "19", "(a*)(b|abc)", "abc", "(0,3)(0,0)(0,3)");
    test(regex_20(), "20", "(a*)(abc|b)", "abc", "(0,3)(0,0)(0,3)");
    test(regex_21(), "21", "((a*)(b|abc))(c*)", "abc", "(0,3)(0,3)(0,0)(0,3)(3,3)");
    test(regex_22(), "22", "((a*)(abc|b))(c*)", "abc", "(0,3)(0,3)(0,0)(0,3)(3,3)");
    test(regex_23(), "23", "(a*)((b|abc)(c*))", "abc", "(0,3)(0,1)(1,3)(1,2)(2,3)");
    test(regex_24(), "24", "(a*)((abc|b)(c*))", "abc", "(0,3)(0,1)(1,3)(1,2)(2,3)");
    test(regex_25(), "25", "(a|ab)", "ab", "(0,2)(0,2)");
    test(regex_26(), "26", "(ab|a)", "ab", "(0,2)(0,2)");
    test(regex_27(), "27", "(a|ab)(b*)", "ab", "(0,2)(0,2)(2,2)");
    test(regex_28(), "28", "(ab|a)(b*)", "ab", "(0,2)(0,2)(2,2)");
    std::cout << std::endl;
  }
}
test_nullsub3: @regex type = {
  regex_1 := "(a*)*";
  regex_2 := "(a*)*";
  regex_3 := "(a*)*";
  regex_4 := "(a*)*";
  regex_5 := "(a*)+";
  regex_6 := "(a*)+";
  regex_7 := "(a*)+";
  regex_8 := "(a*)+";
  regex_9 := "(a+)*";
  regex_10 := "(a+)*";
  regex_11 := "(a+)*";
  regex_12 := "(a+)*";
  regex_13 := "(a+)+";
  regex_14 := "(a+)+";
  regex_15 := "(a+)+";
  regex_16 := "(a+)+";
  regex_17 := "([a]*)*";
  regex_18 := "([a]*)*";
  regex_19 := "([a]*)*";
  regex_20 := "([a]*)*";
  regex_21 := "([a]*)+";
  regex_22 := "([a]*)+";
  regex_23 := "([a]*)+";
  regex_24 := "([a]*)+";
  regex_25 := "([^b]*)*";
  regex_26 := "([^b]*)*";
  regex_27 := "([^b]*)*";
  regex_28 := "([^b]*)*";
  regex_29 := "([ab]*)*";
  regex_30 := "([ab]*)*";
  regex_31 := "([ab]*)*";
  regex_32 := "([ab]*)*";
  regex_33 := "([ab]*)*";
  regex_34 := "([ab]*)*";
  regex_35 := "([ab]*)*";
  regex_36 := "([^a]*)*";
  regex_37 := "([^a]*)*";
  regex_38 := "([^a]*)*";
  regex_39 := "([^ab]*)*";
  regex_40 := "([^ab]*)*";
  regex_41 := "((z)+|a)*";
  regex_42 := "(a)";
  regex_46 := "(a*)*(x)";
  regex_47 := "(a*)*(x)";
  regex_48 := "(a*)*(x)";
  regex_49 := "(a*)+(x)";
  regex_50 := "(a*)+(x)";
  regex_51 := "(a*)+(x)";
  regex_52 := "(a*){2}(x)";
  regex_53 := "(a*){2}(x)";
  regex_54 := "(a*){2}(x)";
  run: (this) = {
    std::cout << "Running nullsub3:"<< std::endl;
    test(regex_1(), "1", "(a*)*", "a", "(0,1)(0,1)");
    test(regex_2(), "2", "(a*)*", "x", "(0,0)(0,0)");
    test(regex_3(), "3", "(a*)*", "aaaaaa", "(0,6)(0,6)");
    test(regex_4(), "4", "(a*)*", "aaaaaax", "(0,6)(0,6)");
    test(regex_5(), "5", "(a*)+", "a", "(0,1)(0,1)");
    test(regex_6(), "6", "(a*)+", "x", "(0,0)(0,0)");
    test(regex_7(), "7", "(a*)+", "aaaaaa", "(0,6)(0,6)");
    test(regex_8(), "8", "(a*)+", "aaaaaax", "(0,6)(0,6)");
    test(regex_9(), "9", "(a+)*", "a", "(0,1)(0,1)");
    test(regex_10(), "10", "(a+)*", "x", "(0,0)(?,?)");
    test(regex_11(), "11", "(a+)*", "aaaaaa", "(0,6)(0,6)");
    test(regex_12(), "12", "(a+)*", "aaaaaax", "(0,6)(0,6)");
    test(regex_13(), "13", "(a+)+", "a", "(0,1)(0,1)");
    test(regex_14(), "14", "(a+)+", "x", "NOMATCH");
    test(regex_15(), "15", "(a+)+", "aaaaaa", "(0,6)(0,6)");
    test(regex_16(), "16", "(a+)+", "aaaaaax", "(0,6)(0,6)");
    test(regex_17(), "17", "([a]*)*", "a", "(0,1)(0,1)");
    test(regex_18(), "18", "([a]*)*", "x", "(0,0)(0,0)");
    test(regex_19(), "19", "([a]*)*", "aaaaaa", "(0,6)(0,6)");
    test(regex_20(), "20", "([a]*)*", "aaaaaax", "(0,6)(0,6)");
    test(regex_21(), "21", "([a]*)+", "a", "(0,1)(0,1)");
    test(regex_22(), "22", "([a]*)+", "x", "(0,0)(0,0)");
    test(regex_23(), "23", "([a]*)+", "aaaaaa", "(0,6)(0,6)");
    test(regex_24(), "24", "([a]*)+", "aaaaaax", "(0,6)(0,6)");
    test(regex_25(), "25", "([^b]*)*", "a", "(0,1)(0,1)");
    test(regex_26(), "26", "([^b]*)*", "b", "(0,0)(0,0)");
    test(regex_27(), "27", "([^b]*)*", "aaaaaa", "(0,6)(0,6)");
    test(regex_28(), "28", "([^b]*)*", "aaaaaab", "(0,6)(0,6)");
    test(regex_29(), "29", "([ab]*)*", "a", "(0,1)(0,1)");
    test(regex_30(), "30", "([ab]*)*", "aaaaaa", "(0,6)(0,6)");
    test(regex_31(), "31", "([ab]*)*", "ababab", "(0,6)(0,6)");
    test(regex_32(), "32", "([ab]*)*", "bababa", "(0,6)(0,6)");
    test(regex_33(), "33", "([ab]*)*", "b", "(0,1)(0,1)");
    test(regex_34(), "34", "([ab]*)*", "bbbbbb", "(0,6)(0,6)");
    test(regex_35(), "35", "([ab]*)*", "aaaabcde", "(0,5)(0,5)");
    test(regex_36(), "36", "([^a]*)*", "b", "(0,1)(0,1)");
    test(regex_37(), "37", "([^a]*)*", "bbbbbb", "(0,6)(0,6)");
    test(regex_38(), "38", "([^a]*)*", "aaaaaa", "(0,0)(0,0)");
    test(regex_39(), "39", "([^ab]*)*", "ccccxx", "(0,6)(0,6)");
    test(regex_40(), "40", "([^ab]*)*", "ababab", "(0,0)(0,0)");
    test(regex_41(), "41", "((z)+|a)*", "zabcde", "(0,2)(1,2)(?,?)");
    test(regex_42(), "42", "(a)", "aaa", "(0,1)(0,1)");
    test(regex_46(), "46", "(a*)*(x)", "x", "(0,1)(0,0)(0,1)");
    test(regex_47(), "47", "(a*)*(x)", "ax", "(0,2)(0,1)(1,2)");
    test(regex_48(), "48", "(a*)*(x)", "axa", "(0,2)(0,1)(1,2)");
    test(regex_49(), "49", "(a*)+(x)", "x", "(0,1)(0,0)(0,1)");
    test(regex_50(), "50", "(a*)+(x)", "ax", "(0,2)(0,1)(1,2)");
    test(regex_51(), "51", "(a*)+(x)", "axa", "(0,2)(0,1)(1,2)");
    test(regex_52(), "52", "(a*){2}(x)", "x", "(0,1)(0,0)(0,1)");
    test(regex_53(), "53", "(a*){2}(x)", "ax", "(0,2)(1,1)(1,2)");
    test(regex_54(), "54", "(a*){2}(x)", "axa", "(0,2)(1,1)(1,2)");
    std::cout << std::endl;
  }
}
test_repetition2: @regex type = {
  regex_1 := "((..)|(.))";
  regex_2 := "((..)|(.))((..)|(.))";
  regex_3 := "((..)|(.))((..)|(.))((..)|(.))";
  regex_4 := "((..)|(.)){1}";
  regex_5 := "((..)|(.)){2}";
  regex_6 := "((..)|(.)){3}";
  regex_7 := "((..)|(.))*";
  regex_8 := "((..)|(.))";
  regex_9 := "((..)|(.))((..)|(.))";
  regex_10 := "((..)|(.))((..)|(.))((..)|(.))";
  regex_11 := "((..)|(.)){1}";
  regex_12 := "((..)|(.)){2}";
  regex_13 := "((..)|(.)){3}";
  regex_14 := "((..)|(.))*";
  regex_15 := "((..)|(.))";
  regex_16 := "((..)|(.))((..)|(.))";
  regex_17 := "((..)|(.))((..)|(.))((..)|(.))";
  regex_18 := "((..)|(.)){1}";
  regex_19 := "((..)|(.)){2}";
  regex_20 := "((..)|(.)){3}";
  regex_21 := "((..)|(.))*";
  regex_22 := "((..)|(.))";
  regex_23 := "((..)|(.))((..)|(.))";
  regex_24 := "((..)|(.))((..)|(.))((..)|(.))";
  regex_25 := "((..)|(.)){1}";
  regex_26 := "((..)|(.)){2}";
  regex_27 := "((..)|(.)){3}";
  regex_28 := "((..)|(.))*";
  regex_29 := "((..)|(.))";
  regex_30 := "((..)|(.))((..)|(.))";
  regex_31 := "((..)|(.))((..)|(.))((..)|(.))";
  regex_32 := "((..)|(.)){1}";
  regex_33 := "((..)|(.)){2}";
  regex_34 := "((..)|(.)){3}";
  regex_35 := "((..)|(.))*";
  regex_36 := "((..)|(.))";
  regex_37 := "((..)|(.))((..)|(.))";
  regex_38 := "((..)|(.))((..)|(.))((..)|(.))";
  regex_39 := "((..)|(.)){1}";
  regex_40 := "((..)|(.)){2}";
  regex_41 := "((..)|(.)){3}";
  regex_42 := "((..)|(.))*";
  regex_43 := "((..)|(.))";
  regex_44 := "((..)|(.))((..)|(.))";
  regex_45 := "((..)|(.))((..)|(.))((..)|(.))";
  regex_46 := "((..)|(.)){1}";
  regex_47 := "((..)|(.)){2}";
  regex_48 := "((..)|(.)){3}";
  regex_49 := "((..)|(.))*";
  regex_100 := "X(.?){0,}Y";
  regex_101 := "X(.?){1,}Y";
  regex_102 := "X(.?){2,}Y";
  regex_103 := "X(.?){3,}Y";
  regex_104 := "X(.?){4,}Y";
  regex_105 := "X(.?){5,}Y";
  regex_106 := "X(.?){6,}Y";
  regex_107 := "X(.?){7,}Y";
  regex_108 := "X(.?){8,}Y";
  regex_110 := "X(.?){0,8}Y";
  regex_111 := "X(.?){1,8}Y";
  regex_112 := "X(.?){2,8}Y";
  regex_113 := "X(.?){3,8}Y";
  regex_114 := "X(.?){4,8}Y";
  regex_115 := "X(.?){5,8}Y";
  regex_116 := "X(.?){6,8}Y";
  regex_117 := "X(.?){7,8}Y";
  regex_118 := "X(.?){8,8}Y";
  regex_260 := "(a|ab|c|bcd){0,}(d*)";
  regex_261 := "(a|ab|c|bcd){1,}(d*)";
  regex_262 := "(a|ab|c|bcd){2,}(d*)";
  regex_263 := "(a|ab|c|bcd){3,}(d*)";
  regex_264 := "(a|ab|c|bcd){4,}(d*)";
  regex_265 := "(a|ab|c|bcd){0,10}(d*)";
  regex_266 := "(a|ab|c|bcd){1,10}(d*)";
  regex_267 := "(a|ab|c|bcd){2,10}(d*)";
  regex_268 := "(a|ab|c|bcd){3,10}(d*)";
  regex_269 := "(a|ab|c|bcd){4,10}(d*)";
  regex_270 := "(a|ab|c|bcd)*(d*)";
  regex_271 := "(a|ab|c|bcd)+(d*)";
  run: (this) = {
    std::cout << "Running repetition2:"<< std::endl;
    test(regex_1(), "1", "((..)|(.))", "NULL", "NOMATCH");
    test(regex_2(), "2", "((..)|(.))((..)|(.))", "NULL", "NOMATCH");
    test(regex_3(), "3", "((..)|(.))((..)|(.))((..)|(.))", "NULL", "NOMATCH");
    test(regex_4(), "4", "((..)|(.)){1}", "NULL", "NOMATCH");
    test(regex_5(), "5", "((..)|(.)){2}", "NULL", "NOMATCH");
    test(regex_6(), "6", "((..)|(.)){3}", "NULL", "NOMATCH");
    test(regex_7(), "7", "((..)|(.))*", "NULL", "(0,0)(?,?)(?,?)(?,?)");
    test(regex_8(), "8", "((..)|(.))", "a", "(0,1)(0,1)(?,?)(0,1)");
    test(regex_9(), "9", "((..)|(.))((..)|(.))", "a", "NOMATCH");
    test(regex_10(), "10", "((..)|(.))((..)|(.))((..)|(.))", "a", "NOMATCH");
    test(regex_11(), "11", "((..)|(.)){1}", "a", "(0,1)(0,1)(?,?)(0,1)");
    test(regex_12(), "12", "((..)|(.)){2}", "a", "NOMATCH");
    test(regex_13(), "13", "((..)|(.)){3}", "a", "NOMATCH");
    test(regex_14(), "14", "((..)|(.))*", "a", "(0,1)(0,1)(?,?)(0,1)");
    test(regex_15(), "15", "((..)|(.))", "aa", "(0,2)(0,2)(0,2)(?,?)");
    test(regex_16(), "16", "((..)|(.))((..)|(.))", "aa", "(0,2)(0,1)(?,?)(0,1)(1,2)(?,?)(1,2)");
    test(regex_17(), "17", "((..)|(.))((..)|(.))((..)|(.))", "aa", "NOMATCH");
    test(regex_18(), "18", "((..)|(.)){1}", "aa", "(0,2)(0,2)(0,2)(?,?)");
    test(regex_19(), "19", "((..)|(.)){2}", "aa", "(0,2)(1,2)(?,?)(1,2)");
    test(regex_20(), "20", "((..)|(.)){3}", "aa", "NOMATCH");
    test(regex_21(), "21", "((..)|(.))*", "aa", "(0,2)(0,2)(0,2)(?,?)");
    test(regex_22(), "22", "((..)|(.))", "aaa", "(0,2)(0,2)(0,2)(?,?)");
    test(regex_23(), "23", "((..)|(.))((..)|(.))", "aaa", "(0,3)(0,2)(0,2)(?,?)(2,3)(?,?)(2,3)");
    test(regex_24(), "24", "((..)|(.))((..)|(.))((..)|(.))", "aaa", "(0,3)(0,1)(?,?)(0,1)(1,2)(?,?)(1,2)(2,3)(?,?)(2,3)");
    test(regex_25(), "25", "((..)|(.)){1}", "aaa", "(0,2)(0,2)(0,2)(?,?)");
    test(regex_26(), "26", "((..)|(.)){2}", "aaa", "(0,3)(2,3)(?,?)(2,3)");
    test(regex_27(), "27", "((..)|(.)){3}", "aaa", "(0,3)(2,3)(?,?)(2,3)");
    test(regex_28(), "28", "((..)|(.))*", "aaa", "(0,3)(2,3)(?,?)(2,3)");
    test(regex_29(), "29", "((..)|(.))", "aaaa", "(0,2)(0,2)(0,2)(?,?)");
    test(regex_30(), "30", "((..)|(.))((..)|(.))", "aaaa", "(0,4)(0,2)(0,2)(?,?)(2,4)(2,4)(?,?)");
    test(regex_31(), "31", "((..)|(.))((..)|(.))((..)|(.))", "aaaa", "(0,4)(0,2)(0,2)(?,?)(2,3)(?,?)(2,3)(3,4)(?,?)(3,4)");
    test(regex_32(), "32", "((..)|(.)){1}", "aaaa", "(0,2)(0,2)(0,2)(?,?)");
    test(regex_33(), "33", "((..)|(.)){2}", "aaaa", "(0,4)(2,4)(2,4)(?,?)");
    test(regex_34(), "34", "((..)|(.)){3}", "aaaa", "(0,4)(3,4)(?,?)(3,4)");
    test(regex_35(), "35", "((..)|(.))*", "aaaa", "(0,4)(2,4)(2,4)(?,?)");
    test(regex_36(), "36", "((..)|(.))", "aaaaa", "(0,2)(0,2)(0,2)(?,?)");
    test(regex_37(), "37", "((..)|(.))((..)|(.))", "aaaaa", "(0,4)(0,2)(0,2)(?,?)(2,4)(2,4)(?,?)");
    test(regex_38(), "38", "((..)|(.))((..)|(.))((..)|(.))", "aaaaa", "(0,5)(0,2)(0,2)(?,?)(2,4)(2,4)(?,?)(4,5)(?,?)(4,5)");
    test(regex_39(), "39", "((..)|(.)){1}", "aaaaa", "(0,2)(0,2)(0,2)(?,?)");
    test(regex_40(), "40", "((..)|(.)){2}", "aaaaa", "(0,4)(2,4)(2,4)(?,?)");
    test(regex_41(), "41", "((..)|(.)){3}", "aaaaa", "(0,5)(4,5)(?,?)(4,5)");
    test(regex_42(), "42", "((..)|(.))*", "aaaaa", "(0,5)(4,5)(?,?)(4,5)");
    test(regex_43(), "43", "((..)|(.))", "aaaaaa", "(0,2)(0,2)(0,2)(?,?)");
    test(regex_44(), "44", "((..)|(.))((..)|(.))", "aaaaaa", "(0,4)(0,2)(0,2)(?,?)(2,4)(2,4)(?,?)");
    test(regex_45(), "45", "((..)|(.))((..)|(.))((..)|(.))", "aaaaaa", "(0,6)(0,2)(0,2)(?,?)(2,4)(2,4)(?,?)(4,6)(4,6)(?,?)");
    test(regex_46(), "46", "((..)|(.)){1}", "aaaaaa", "(0,2)(0,2)(0,2)(?,?)");
    test(regex_47(), "47", "((..)|(.)){2}", "aaaaaa", "(0,4)(2,4)(2,4)(?,?)");
    test(regex_48(), "48", "((..)|(.)){3}", "aaaaaa", "(0,6)(4,6)(4,6)(?,?)");
    test(regex_49(), "49", "((..)|(.))*", "aaaaaa", "(0,6)(4,6)(4,6)(?,?)");
    test(regex_100(), "100", "X(.?){0,}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_101(), "101", "X(.?){1,}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_102(), "102", "X(.?){2,}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_103(), "103", "X(.?){3,}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_104(), "104", "X(.?){4,}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_105(), "105", "X(.?){5,}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_106(), "106", "X(.?){6,}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_107(), "107", "X(.?){7,}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_108(), "108", "X(.?){8,}Y", "X1234567Y", "(0,9)(8,8)");
    test(regex_110(), "110", "X(.?){0,8}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_111(), "111", "X(.?){1,8}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_112(), "112", "X(.?){2,8}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_113(), "113", "X(.?){3,8}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_114(), "114", "X(.?){4,8}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_115(), "115", "X(.?){5,8}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_116(), "116", "X(.?){6,8}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_117(), "117", "X(.?){7,8}Y", "X1234567Y", "(0,9)(7,8)");
    test(regex_118(), "118", "X(.?){8,8}Y", "X1234567Y", "(0,9)(8,8)");
    test(regex_260(), "260", "(a|ab|c|bcd){0,}(d*)", "ababcd", "(0,6)(3,6)(6,6)");
    test(regex_261(), "261", "(a|ab|c|bcd){1,}(d*)", "ababcd", "(0,6)(3,6)(6,6)");
    test(regex_262(), "262", "(a|ab|c|bcd){2,}(d*)", "ababcd", "(0,6)(3,6)(6,6)");
    test(regex_263(), "263", "(a|ab|c|bcd){3,}(d*)", "ababcd", "(0,6)(3,6)(6,6)");
    test(regex_264(), "264", "(a|ab|c|bcd){4,}(d*)", "ababcd", "NOMATCH");
    test(regex_265(), "265", "(a|ab|c|bcd){0,10}(d*)", "ababcd", "(0,6)(3,6)(6,6)");
    test(regex_266(), "266", "(a|ab|c|bcd){1,10}(d*)", "ababcd", "(0,6)(3,6)(6,6)");
    test(regex_267(), "267", "(a|ab|c|bcd){2,10}(d*)", "ababcd", "(0,6)(3,6)(6,6)");
    test(regex_268(), "268", "(a|ab|c|bcd){3,10}(d*)", "ababcd", "(0,6)(3,6)(6,6)");
    test(regex_269(), "269", "(a|ab|c|bcd){4,10}(d*)", "ababcd", "NOMATCH");
    test(regex_270(), "270", "(a|ab|c|bcd)*(d*)", "ababcd", "(0,6)(3,6)(6,6)");
    test(regex_271(), "271", "(a|ab|c|bcd)+(d*)", "ababcd", "(0,6)(3,6)(6,6)");
    std::cout << std::endl;
  }
}
test_totest: @regex type = {
  regex_01 := "a+";
  regex_03 := "(a?)((ab)?)";
  regex_04 := "(a?)((ab)?)(b?)";
  regex_05 := "((a?)((ab)?))(b?)";
  regex_06 := "(a?)(((ab)?)(b?))";
  regex_07 := "(.?)";
  regex_08 := "(.?){1}";
  regex_09 := "(.?)(.?)";
  regex_10 := "(.?){2}";
  regex_11 := "(.?)*";
  regex_12 := "(.?.?)";
  regex_13 := "(.?.?){1}";
  regex_14 := "(.?.?)(.?.?)";
  regex_15 := "(.?.?){2}";
  regex_16 := "(.?.?)(.?.?)(.?.?)";
  regex_17 := "(.?.?){3}";
  regex_18 := "(.?.?)*";
  regex_19 := "a?((ab)?)(b?)";
  regex_20 := "(a?)((ab)?)b?";
  regex_21 := "a?((ab)?)b?";
  regex_22 := "(a*){2}";
  regex_23 := "(ab?)(b?a)";
  regex_24 := "(a|ab)(ba|a)";
  regex_25 := "(a|ab|ba)";
  regex_26 := "(a|ab|ba)(a|ab|ba)";
  regex_27 := "(a|ab|ba)*";
  regex_28 := "(aba|a*b)";
  regex_29 := "(aba|a*b)(aba|a*b)";
  regex_1029 := "(aba|a*b)(aba|a*b)(aba|a*b)";
  regex_30 := "(aba|a*b)*";
  regex_31 := "(aba|ab|a)";
  regex_32 := "(aba|ab|a)(aba|ab|a)";
  regex_1032 := "(aba|ab|a)(aba|ab|a)(aba|ab|a)";
  regex_33 := "(aba|ab|a)*";
  regex_34 := "(a(b)?)";
  regex_35 := "(a(b)?)(a(b)?)";
  regex_36 := "(a(b)?)+";
  regex_37 := "(.*)(.*)";
  regex_38 := ".*(.*)";
  regex_39 := "(a.*z|b.*y)";
  regex_40 := "(a.*z|b.*y)(a.*z|b.*y)";
  regex_41 := "(a.*z|b.*y)*";
  regex_42 := "(.|..)(.*)";
  regex_43 := "((..)*(...)*)";
  regex_44 := "((..)*(...)*)((..)*(...)*)";
  regex_45 := "((..)*(...)*)*";
  regex_83 := "(aa(b(b))?)+";
  regex_84 := "(a(b)?)+";
  regex_85 := "([ab]+)([bc]+)([cd]*)";
  regex_90 := "^(A([^B]*))?(B(.*))?";
  regex_91 := "^(A([^B]*))?(B(.*))?";
  regex_110 := "(^){0,3}";
  regex_111 := "(\$){0,3}";
  regex_112 := "(^){1,3}";
  regex_113 := "(\$){1,3}";
  regex_200 := "((s^)|(s)|(^)|(\$)|(^.))*";
  regex_201 := "s(()|^)e";
  regex_202 := "s(^|())e";
  regex_203 := "s(^|())e";
  regex_204 := "s()?e";
  regex_205 := "s(^)?e";
  regex_206 := "((s)|(e)|(a))*";
  regex_207 := "((s)|(e)|())*";
  regex_208 := "((b*)|c(c*))*";
  regex_209 := "(yyy|(x?)){2,4}";
  regex_210 := "(\$)|()";
  regex_211 := "\$()|^()";
  regex_212 := "^()|\$()";
  regex_213 := "(\$)?(.)";
  regex_214 := "(.|()|())*";
  regex_215 := "((a)|(b)){2,}";
  regex_216 := ".()|((.)?)";
  regex_217 := "(.|\$){2,}";
  regex_218 := "(.|\$){2,2}";
  regex_219 := "(.){2,}";
  regex_220 := "(a|())(b|())(c|())";
  regex_220 := "ab()c|ab()c()";
  regex_250 := "(b(c)|d(e))*";
  regex_251 := "(a(b)*)*";
  run: (this) = {
    std::cout << "Running totest:"<< std::endl;
    test(regex_01(), "01", "a+", "xaax", "(1,3)");
    test(regex_03(), "03", "(a?)((ab)?)", "ab", "(0,2)(0,0)(0,2)(0,2)");
    test(regex_04(), "04", "(a?)((ab)?)(b?)", "ab", "(0,2)(0,1)(1,1)(?,?)(1,2)");
    test(regex_05(), "05", "((a?)((ab)?))(b?)", "ab", "(0,2)(0,2)(0,0)(0,2)(0,2)(2,2)");
    test(regex_06(), "06", "(a?)(((ab)?)(b?))", "ab", "(0,2)(0,1)(1,2)(1,1)(?,?)(1,2)");
    test(regex_07(), "07", "(.?)", "x", "(0,1)(0,1)");
    test(regex_08(), "08", "(.?){1}", "x", "(0,1)(0,1)");
    test(regex_09(), "09", "(.?)(.?)", "x", "(0,1)(0,1)(1,1)");
    test(regex_10(), "10", "(.?){2}", "x", "(0,1)(1,1)");
    test(regex_11(), "11", "(.?)*", "x", "(0,1)(0,1)");
    test(regex_12(), "12", "(.?.?)", "xxx", "(0,2)(0,2)");
    test(regex_13(), "13", "(.?.?){1}", "xxx", "(0,2)(0,2)");
    test(regex_14(), "14", "(.?.?)(.?.?)", "xxx", "(0,3)(0,2)(2,3)");
    test(regex_15(), "15", "(.?.?){2}", "xxx", "(0,3)(2,3)");
    test(regex_16(), "16", "(.?.?)(.?.?)(.?.?)", "xxx", "(0,3)(0,2)(2,3)(3,3)");
    test(regex_17(), "17", "(.?.?){3}", "xxx", "(0,3)(3,3)");
    test(regex_18(), "18", "(.?.?)*", "xxx", "(0,3)(2,3)");
    test(regex_19(), "19", "a?((ab)?)(b?)", "ab", "(0,2)(1,1)(?,?)(1,2)");
    test(regex_20(), "20", "(a?)((ab)?)b?", "ab", "(0,2)(0,1)(1,1)(?,?)");
    test(regex_21(), "21", "a?((ab)?)b?", "ab", "(0,2)(1,1)(?,?)");
    test(regex_22(), "22", "(a*){2}", "xxxxx", "(0,0)(0,0)");
    test(regex_23(), "23", "(ab?)(b?a)", "aba", "(0,3)(0,2)(2,3)");
    test(regex_24(), "24", "(a|ab)(ba|a)", "aba", "(0,3)(0,2)(2,3)");
    test(regex_25(), "25", "(a|ab|ba)", "aba", "(0,2)(0,2)");
    test(regex_26(), "26", "(a|ab|ba)(a|ab|ba)", "aba", "(0,3)(0,2)(2,3)");
    test(regex_27(), "27", "(a|ab|ba)*", "aba", "(0,3)(2,3)");
    test(regex_28(), "28", "(aba|a*b)", "ababa", "(0,3)(0,3)");
    test(regex_29(), "29", "(aba|a*b)(aba|a*b)", "ababa", "(0,5)(0,2)(2,5)");
    test(regex_1029(), "1029", "(aba|a*b)(aba|a*b)(aba|a*b)", "ababa", "NOMATCH");
    test(regex_30(), "30", "(aba|a*b)*", "ababa", "(0,5)(2,5)");
    test(regex_31(), "31", "(aba|ab|a)", "ababa", "(0,3)(0,3)");
    test(regex_32(), "32", "(aba|ab|a)(aba|ab|a)", "ababa", "(0,5)(0,2)(2,5)");
    test(regex_1032(), "1032", "(aba|ab|a)(aba|ab|a)(aba|ab|a)", "ababa", "(0,5)(0,2)(2,4)(4,5)");
    test(regex_33(), "33", "(aba|ab|a)*", "ababa", "(0,5)(2,5)");
    test(regex_34(), "34", "(a(b)?)", "aba", "(0,2)(0,2)(1,2)");
    test(regex_35(), "35", "(a(b)?)(a(b)?)", "aba", "(0,3)(0,2)(1,2)(2,3)(?,?)");
    test(regex_36(), "36", "(a(b)?)+", "aba", "(0,3)(2,3)(?,?)");
    test(regex_37(), "37", "(.*)(.*)", "xx", "(0,2)(0,2)(2,2)");
    test(regex_38(), "38", ".*(.*)", "xx", "(0,2)(2,2)");
    test(regex_39(), "39", "(a.*z|b.*y)", "azbazby", "(0,5)(0,5)");
    test(regex_40(), "40", "(a.*z|b.*y)(a.*z|b.*y)", "azbazby", "(0,7)(0,5)(5,7)");
    test(regex_41(), "41", "(a.*z|b.*y)*", "azbazby", "(0,7)(5,7)");
    test(regex_42(), "42", "(.|..)(.*)", "ab", "(0,2)(0,2)(2,2)");
    test(regex_43(), "43", "((..)*(...)*)", "xxx", "(0,3)(0,3)(?,?)(0,3)");
    test(regex_44(), "44", "((..)*(...)*)((..)*(...)*)", "xxx", "(0,3)(0,3)(?,?)(0,3)(3,3)(?,?)(?,?)");
    test(regex_45(), "45", "((..)*(...)*)*", "xxx", "(0,3)(0,3)(?,?)(0,3)");
    test(regex_83(), "83", "(aa(b(b))?)+", "aabbaa", "(0,6)(4,6)(?,?)(?,?)");
    test(regex_84(), "84", "(a(b)?)+", "aba", "(0,3)(2,3)(?,?)");
    test(regex_85(), "85", "([ab]+)([bc]+)([cd]*)", "abcd", "(0,4)(0,2)(2,3)(3,4)");
    test(regex_90(), "90", "^(A([^B]*))?(B(.*))?", "Aa", "(0,2)(0,2)(1,2)(?,?)(?,?)");
    test(regex_91(), "91", "^(A([^B]*))?(B(.*))?", "Bb", "(0,2)(?,?)(?,?)(0,2)(1,2)");
    test(regex_110(), "110", "(^){0,3}", "a", "(0,0)(0,0)");
    test(regex_111(), "111", "(\\$){0,3}", "a", "(0,0)(?,?)");
    test(regex_112(), "112", "(^){1,3}", "a", "(0,0)(0,0)");
    test(regex_113(), "113", "(\\$){1,3}", "a", "(1,1)(1,1)");
    test(regex_200(), "200", "((s^)|(s)|(^)|(\\$)|(^.))*", "searchme", "(0,1)(0,1)(?,?)(0,1)(?,?)(?,?)(?,?)");
    test(regex_201(), "201", "s(()|^)e", "searchme", "(0,2)(1,1)(1,1)");
    test(regex_202(), "202", "s(^|())e", "searchme", "(0,2)(1,1)(1,1)");
    test(regex_203(), "203", "s(^|())e", "searchme", "(0,2)(1,1)(1,1)");
    test(regex_204(), "204", "s()?e", "searchme", "(0,2)(1,1)");
    test(regex_205(), "205", "s(^)?e", "searchme", "(0,2)(?,?)");
    test(regex_206(), "206", "((s)|(e)|(a))*", "searchme", "(0,3)(2,3)(?,?)(?,?)(2,3)");
    test(regex_207(), "207", "((s)|(e)|())*", "searchme", "(0,2)(1,2)(?,?)(1,2)(?,?)");
    test(regex_208(), "208", "((b*)|c(c*))*", "cbb", "(0,3)(1,3)(1,3)(?,?)");
    test(regex_209(), "209", "(yyy|(x?)){2,4}", "yyyyyy", "(0,6)(3,6)(?,?)");
    test(regex_210(), "210", "(\\$)|()", "xxx", "(0,0)(?,?)(0,0)");
    test(regex_211(), "211", "\\$()|^()", "ac\\n", "(0,0)(?,?)(0,0)");
    test(regex_212(), "212", "^()|\\$()", "ac\\n", "(0,0)(0,0)(?,?)");
    test(regex_213(), "213", "(\\$)?(.)", "__", "(0,1)(?,?)(0,1)");
    test(regex_214(), "214", "(.|()|())*", "c", "(0,1)(0,1)(?,?)(?,?)");
    test(regex_215(), "215", "((a)|(b)){2,}", "ab", "(0,2)(1,2)(?,?)(1,2)");
    test(regex_216(), "216", ".()|((.)?)", "NULL", "(0,0)(?,?)(0,0)(?,?)");
    test(regex_217(), "217", "(.|\\$){2,}", "xx", "(0,2)(1,2)");
    test(regex_218(), "218", "(.|\\$){2,2}", "xx", "(0,2)(1,2)");
    test(regex_219(), "219", "(.){2,}", "xx", "(0,2)(1,2)");
    test(regex_220(), "220", "(a|())(b|())(c|())", "abc", "(0,3)(0,1)(?,?)(1,2)(?,?)(2,3)(?,?)");
    test(regex_220(), "220", "ab()c|ab()c()", "abc", "(0,3)(2,2)(-1,-1)(-1,-1)");
    test(regex_250(), "250", "(b(c)|d(e))*", "bcde", "(0,4)(2,4)(-1,-1)(3,4)");
    test(regex_251(), "251", "(a(b)*)*", "aba", "(0,3)(2,3)(-1,-1)");
    std::cout << std::endl;
  }
}
test_osx_bsd_critical: @regex type = {
  regex_1 := "(()|.)(b)";
  regex_M1 := "(()|.)(b)";
  regex_2 := "(()|[ab])(b)";
  regex_M2 := "(()|[ab])(b)";
  regex_3 := "(()|[ab])+b";
  regex_M3 := "(()|[ab])+b";
  regex_11 := "(.|())(b)";
  regex_12 := "([ab]|())(b)";
  regex_14 := "([ab]|())+b";
  regex_M14 := "([ab]|())+b";
  regex_20 := "(.?)(b)";
  run: (this) = {
    std::cout << "Running osx_bsd_critical:"<< std::endl;
    test(regex_1(), "1", "(()|.)(b)", "ab", "(0,2)(0,1)(?,?)(1,2)");
    test(regex_M1(), "M1", "(()|.)(b)", "ab", "(1,2)(1,1)(1,1)(1,2)");
    test(regex_2(), "2", "(()|[ab])(b)", "ab", "(0,2)(0,1)(?,?)(1,2)");
    test(regex_M2(), "M2", "(()|[ab])(b)", "ab", "(1,2)(1,1)(1,1)(1,2)");
    test(regex_3(), "3", "(()|[ab])+b", "aaab", "(0,4)(2,3)(?,?)");
    test(regex_M3(), "M3", "(()|[ab])+b", "aaab", "(3,4)(3,3)(3,3)");
    test(regex_11(), "11", "(.|())(b)", "ab", "(0,2)(0,1)(?,?)(1,2)");
    test(regex_12(), "12", "([ab]|())(b)", "ab", "(0,2)(0,1)(?,?)(1,2)");
    test(regex_14(), "14", "([ab]|())+b", "aaab", "(0,4)(2,3)(?,?)");
    test(regex_M14(), "M14", "([ab]|())+b", "aaab", "(0,4)(3,3)(3,3)");
    test(regex_20(), "20", "(.?)(b)", "ab", "(0,2)(0,1)(1,2)");
    std::cout << std::endl;
  }
}
main: (args) = {
    test_basic3().run();
    test_class().run();
    test_left_assoc().run();
    test_right_assoc().run();
    test_forced_assoc().run();
    test_nullsub3().run();
    test_repetition2().run();
    test_totest().run();
    test_osx_bsd_critical().run();
}
