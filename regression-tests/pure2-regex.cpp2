create_result: (resultExpr: std::string, r) -> std::string = {
  result: std::string = "";

  get_next := :(iter) -> _ = {
		start := std::distance(resultExpr&$*.cbegin(), iter);
    firstDollar := resultExpr&$*.find("$", start);
    firstAt := resultExpr&$*.find("@", start);

		end := std::min(firstDollar, firstAt);
		if end != std::string::npos {
			return resultExpr&$*.cbegin() + end;
		}
		else {
			return resultExpr&$*.cend();
		}
  };
  extract_group_and_advance := :(inout iter) -> _ = {
    start := iter;

    while std::isdigit(iter*) next iter++ {}

    return std::stoi(std::string(start, iter));
  };
  extract_until := :(inout iter, to: char) -> _ = {
    start := iter;

    while (to != iter*) next iter++ {} // TODO: Without bracket: error: postfix unary * (dereference) cannot be immediately followed by a (, identifier, or literal - add whitespace before * here if you meant binary * (multiplication)

    return std::string(start, iter);
  };

  iter := resultExpr.begin();

  while iter != resultExpr.end() {
    next := get_next(iter);

    if next != iter {
      result += std::string(iter, next);
    }
    if next != resultExpr.end() {
      if next* == '$' {
        next++;

        if next* == '&' {
          next++;
          result += r.group(0);
        }
        else if next* == '-' || next* == '+' {
          is_start := next* == '-';
          next++;
          if next* == '{' {
            next++; // Skip {
            group := extract_until(next, '}');
            next++; // Skip }
            result += r.group(group);
          }
          else if next* == '[' {
            next++; // Skip [
            group := extract_group_and_advance(next);
            next++; // Skip ]

            if is_start {
              result += std::to_string(r.group_start(group));
            }
            else {
              result += std::to_string(r.group_end(group));
            }
          }
          else {
            // Return max group
            result += r.group(r.group_number() - 1);
          }
        }
        else if std::isdigit(next*) {
          group := extract_group_and_advance(next);
          result += r.group(group);
        }
        else {
          std::cerr << "Not implemented";
        }
      }
      else if next* == '@' {
        next++;
        
        if next* == '-'  || next* == '+' {
          i := 0;
          while i < cpp2::unsafe_narrow<int>(r.group_number()) next i++ {
            pos := 0;
            if next* == '-' {
              pos = r.group_start(i);
            }
            else {
              pos = r.group_end(i);
            }
            result +=  std::to_string(pos);
          }
        }
        else {
          std::cerr << "Not implemented";
        }
      }
      else {
        std::cerr << "Not implemented.";
      }
    }
    iter = next;
  }

  return result;
}

test: <M> (regex: M, id: int, regex_str: std::string, str: std::string, kind: std::string, resultExpr: std::string,
           resultExpected: std::string) = {
  
  warning: std::string = "";
  if regex.to_string() != regex_str {
    warning = "Warning: Parsed regex does not match.";
  }

  status: std::string = "OK";

  r := regex.search(str);

  if "y" == kind || "yM" == kind || "yS" == kind || "yB" == kind {
    if !r.matched {
      status = "Failure: Regex should apply.";
    }
    else {
      // Have a match check the result

      result := create_result(resultExpr, r);

      if result != resultExpected {
        status = "Failure: Result is wrong. (is: (result)$)";
      }
    }
  }
  else if "n" == kind {
    if r.matched {
      status = "Failure: Regex should not apply.";
    }
  } else {
    status = "Unknown kind '(kind)$'";
  }

  if !warning.empty() {
    warning += " ";
  }
  std::cout << "(id)$_(kind)$: (status)$ (warning)$regex: (regex_str)$ parsed_regex: (regex.to_string())$ str: (str)$ result_expr: (resultExpr)$ expected_results (resultExpected)$" << std::endl;
}


test_perl_tests_general: @regex type = {
  regex_0 := "abc";
  var_regex_0 : std::string = "abc";
  regex_1 := "abc";
  var_regex_1 : std::string = "abc";
  regex_2 := "abc";
  var_regex_2 : std::string = "abc";
  regex_3 := "abc";
  var_regex_3 : std::string = "abc";
  regex_4 := "abc";
  var_regex_4 : std::string = "abc";
  regex_5 := "abc";
  var_regex_5 : std::string = "abc";
  regex_6 := "abc";
  var_regex_6 : std::string = "abc";
  regex_7 := "abc";
  var_regex_7 : std::string = "abc";
  regex_8 := "abc";
  var_regex_8 : std::string = "abc";
  regex_9 := "abc";
  var_regex_9 : std::string = "abc";
  regex_10 := "abc";
  var_regex_10 : std::string = "abc";
  regex_11 := "abc";
  var_regex_11 : std::string = "abc";
  regex_12 := "ab*c";
  var_regex_12 : std::string = "ab*c";
  regex_13 := "ab*c";
  var_regex_13 : std::string = "ab*c";
  regex_14 := "ab*c";
  var_regex_14 : std::string = "ab*c";
  regex_15 := "ab*bc";
  var_regex_15 : std::string = "ab*bc";
  regex_16 := "ab*bc";
  var_regex_16 : std::string = "ab*bc";
  regex_17 := "ab*bc";
  var_regex_17 : std::string = "ab*bc";
  regex_18 := "ab*bc";
  var_regex_18 : std::string = "ab*bc";
  regex_19 := "ab*bc";
  var_regex_19 : std::string = "ab*bc";
  regex_20 := "ab*bc";
  var_regex_20 : std::string = "ab*bc";
  regex_21 := "ab*bc";
  var_regex_21 : std::string = "ab*bc";
  regex_22 := "ab*bc";
  var_regex_22 : std::string = "ab*bc";
  regex_23 := "ab*bc";
  var_regex_23 : std::string = "ab*bc";
  regex_24 := ".{1}";
  var_regex_24 : std::string = ".{1}";
  regex_25 := ".{1}";
  var_regex_25 : std::string = ".{1}";
  regex_26 := ".{1}";
  var_regex_26 : std::string = ".{1}";
  regex_27 := ".{3,4}";
  var_regex_27 : std::string = ".{3,4}";
  regex_28 := ".{3,4}";
  var_regex_28 : std::string = ".{3,4}";
  regex_29 := ".{3,4}";
  var_regex_29 : std::string = ".{3,4}";
  regex_30 := "\N{1}";
  var_regex_30 : std::string = "\\N{1}";
  regex_31 := "\N{1}";
  var_regex_31 : std::string = "\\N{1}";
  regex_32 := "\N{1}";
  var_regex_32 : std::string = "\\N{1}";
  regex_33 := "\N{3,4}";
  var_regex_33 : std::string = "\\N{3,4}";
  regex_34 := "\N{3,4}";
  var_regex_34 : std::string = "\\N{3,4}";
  regex_35 := "\N{3,4}";
  var_regex_35 : std::string = "\\N{3,4}";
  regex_36 := "\N{ 3 , 4 }";
  var_regex_36 : std::string = "\\N{ 3 , 4 }";
  regex_37 := "ab{0,}bc";
  var_regex_37 : std::string = "ab{0,}bc";
  regex_38 := "ab{0,}bc";
  var_regex_38 : std::string = "ab{0,}bc";
  regex_39 := "ab{0,}bc";
  var_regex_39 : std::string = "ab{0,}bc";
  regex_40 := "ab+bc";
  var_regex_40 : std::string = "ab+bc";
  regex_41 := "ab+bc";
  var_regex_41 : std::string = "ab+bc";
  regex_42 := "ab+bc";
  var_regex_42 : std::string = "ab+bc";
  regex_43 := "ab+bc";
  var_regex_43 : std::string = "ab+bc";
  regex_44 := "ab+bc";
  var_regex_44 : std::string = "ab+bc";
  regex_45 := "ab{1,}bc";
  var_regex_45 : std::string = "ab{1,}bc";
  regex_46 := "ab+bc";
  var_regex_46 : std::string = "ab+bc";
  regex_47 := "ab+bc";
  var_regex_47 : std::string = "ab+bc";
  regex_48 := "ab+bc";
  var_regex_48 : std::string = "ab+bc";
  regex_49 := "ab{1,}bc";
  var_regex_49 : std::string = "ab{1,}bc";
  regex_50 := "ab{1,}bc";
  var_regex_50 : std::string = "ab{1,}bc";
  regex_51 := "ab{1,}bc";
  var_regex_51 : std::string = "ab{1,}bc";
  regex_52 := "ab{1,3}bc";
  var_regex_52 : std::string = "ab{1,3}bc";
  regex_53 := "ab{1,3}bc";
  var_regex_53 : std::string = "ab{1,3}bc";
  regex_54 := "ab{1,3}bc";
  var_regex_54 : std::string = "ab{1,3}bc";
  regex_55 := "ab{3,4}bc";
  var_regex_55 : std::string = "ab{3,4}bc";
  regex_56 := "ab{3,4}bc";
  var_regex_56 : std::string = "ab{3,4}bc";
  regex_57 := "ab{3,4}bc";
  var_regex_57 : std::string = "ab{3,4}bc";
  regex_58 := "ab{4,5}bc";
  var_regex_58 : std::string = "ab{4,5}bc";
  regex_59 := "ab?bc";
  var_regex_59 : std::string = "ab?bc";
  regex_60 := "ab?bc";
  var_regex_60 : std::string = "ab?bc";
  regex_61 := "ab{0,1}bc";
  var_regex_61 : std::string = "ab{0,1}bc";
  regex_62 := "ab?bc";
  var_regex_62 : std::string = "ab?bc";
  regex_63 := "ab?c";
  var_regex_63 : std::string = "ab?c";
  regex_64 := "ab{0,1}c";
  var_regex_64 : std::string = "ab{0,1}c";
  regex_65 := "^abc\$";
  var_regex_65 : std::string = "^abc\$";
  regex_66 := "^abc\$";
  var_regex_66 : std::string = "^abc\$";
  regex_67 := "^abc";
  var_regex_67 : std::string = "^abc";
  regex_68 := "^abc\$";
  var_regex_68 : std::string = "^abc\$";
  regex_69 := "abc\$";
  var_regex_69 : std::string = "abc\$";
  regex_70 := "abc\$";
  var_regex_70 : std::string = "abc\$";
  regex_71 := "^";
  var_regex_71 : std::string = "^";
  regex_72 := "\$";
  var_regex_72 : std::string = "\$";
  regex_73 := "a.c";
  var_regex_73 : std::string = "a.c";
  regex_74 := "a.c";
  var_regex_74 : std::string = "a.c";
  regex_75 := "a\Nc";
  var_regex_75 : std::string = "a\\Nc";
  regex_76 := "a.*c";
  var_regex_76 : std::string = "a.*c";
  regex_77 := "a\N*c";
  var_regex_77 : std::string = "a\\N*c";
  regex_78 := "a.*c";
  var_regex_78 : std::string = "a.*c";
  regex_79 := "a\N*c";
  var_regex_79 : std::string = "a\\N*c";
  regex_80 := "a[bc]d";
  var_regex_80 : std::string = "a[bc]d";
  regex_81 := "a[bc]d";
  var_regex_81 : std::string = "a[bc]d";
  regex_82 := "a[b]d";
  var_regex_82 : std::string = "a[b]d";
  regex_83 := "[a][b][d]";
  var_regex_83 : std::string = "[a][b][d]";
  regex_84 := ".[b].";
  var_regex_84 : std::string = ".[b].";
  regex_85 := ".[b].";
  var_regex_85 : std::string = ".[b].";
  regex_86 := "a[b-d]e";
  var_regex_86 : std::string = "a[b-d]e";
  regex_87 := "a[b-d]e";
  var_regex_87 : std::string = "a[b-d]e";
  regex_88 := "a[b-d]";
  var_regex_88 : std::string = "a[b-d]";
  regex_89 := "a[-b]";
  var_regex_89 : std::string = "a[-b]";
  regex_90 := "a[b-]";
  var_regex_90 : std::string = "a[b-]";
  regex_91 := "a]";
  var_regex_91 : std::string = "a]";
  regex_92 := "a[]]b";
  var_regex_92 : std::string = "a[]]b";
  regex_93 := "a[^bc]d";
  var_regex_93 : std::string = "a[^bc]d";
  regex_94 := "a[^bc]d";
  var_regex_94 : std::string = "a[^bc]d";
  regex_95 := "a[^-b]c";
  var_regex_95 : std::string = "a[^-b]c";
  regex_96 := "a[^-b]c";
  var_regex_96 : std::string = "a[^-b]c";
  regex_97 := "a[^]b]c";
  var_regex_97 : std::string = "a[^]b]c";
  regex_98 := "a[^]b]c";
  var_regex_98 : std::string = "a[^]b]c";
  regex_99 := "\ba\b";
  var_regex_99 : std::string = "\ba\b";
  regex_100 := "\ba\b";
  var_regex_100 : std::string = "\ba\b";
  regex_101 := "\ba\b";
  var_regex_101 : std::string = "\ba\b";
  regex_102 := "\by\b";
  var_regex_102 : std::string = "\by\b";
  regex_103 := "\by\b";
  var_regex_103 : std::string = "\by\b";
  regex_104 := "\by\b";
  var_regex_104 : std::string = "\by\b";
  regex_105 := "\Ba\B";
  var_regex_105 : std::string = "\Ba\B";
  regex_106 := "\Ba\B";
  var_regex_106 : std::string = "\Ba\B";
  regex_107 := "\Ba\B";
  var_regex_107 : std::string = "\Ba\B";
  regex_108 := "\By\b";
  var_regex_108 : std::string = "\By\b";
  regex_109 := "\By\b";
  var_regex_109 : std::string = "\By\b";
  regex_110 := "\By\b";
  var_regex_110 : std::string = "\By\b";
  regex_111 := "\By\b";
  var_regex_111 : std::string = "\By\b";
  regex_112 := "\by\B";
  var_regex_112 : std::string = "\by\B";
  regex_113 := "\By\B";
  var_regex_113 : std::string = "\By\B";
  regex_114 := "\b";
  var_regex_114 : std::string = "\b";
  regex_115 := "\B";
  var_regex_115 : std::string = "\B";
  regex_116 := "\w";
  var_regex_116 : std::string = "\w";
  regex_117 := "\w";
  var_regex_117 : std::string = "\w";
  regex_118 := "\W";
  var_regex_118 : std::string = "\W";
  regex_119 := "\W";
  var_regex_119 : std::string = "\W";
  regex_120 := "a\sb";
  var_regex_120 : std::string = "a\sb";
  regex_121 := "a\sb";
  var_regex_121 : std::string = "a\sb";
  regex_122 := "a\Sb";
  var_regex_122 : std::string = "a\Sb";
  regex_123 := "a\Sb";
  var_regex_123 : std::string = "a\Sb";
  regex_124 := "\d";
  var_regex_124 : std::string = "\d";
  regex_125 := "\d";
  var_regex_125 : std::string = "\d";
  regex_126 := "\D";
  var_regex_126 : std::string = "\D";
  regex_127 := "\D";
  var_regex_127 : std::string = "\D";
  regex_128 := "[\w]";
  var_regex_128 : std::string = "[\w]";
  regex_129 := "[\w]";
  var_regex_129 : std::string = "[\w]";
  regex_130 := "[\W]";
  var_regex_130 : std::string = "[\W]";
  regex_131 := "[\W]";
  var_regex_131 : std::string = "[\W]";
  regex_132 := "a[\s]b";
  var_regex_132 : std::string = "a[\s]b";
  regex_133 := "a[\s]b";
  var_regex_133 : std::string = "a[\s]b";
  regex_134 := "a[\S]b";
  var_regex_134 : std::string = "a[\S]b";
  regex_135 := "a[\S]b";
  var_regex_135 : std::string = "a[\S]b";
  regex_136 := "[\d]";
  var_regex_136 : std::string = "[\d]";
  regex_137 := "[\d]";
  var_regex_137 : std::string = "[\d]";
  regex_138 := "[\D]";
  var_regex_138 : std::string = "[\D]";
  regex_139 := "[\D]";
  var_regex_139 : std::string = "[\D]";
  regex_140 := "ab|cd";
  var_regex_140 : std::string = "ab|cd";
  regex_141 := "ab|cd";
  var_regex_141 : std::string = "ab|cd";
  regex_142 := "()ef";
  var_regex_142 : std::string = "()ef";
  regex_143 := "()ef";
  var_regex_143 : std::string = "()ef";
  regex_144 := "()ef";
  var_regex_144 : std::string = "()ef";
  regex_145 := "()ef";
  var_regex_145 : std::string = "()ef";
  regex_146 := "()ef";
  var_regex_146 : std::string = "()ef";
  regex_147 := "\$b";
  var_regex_147 : std::string = "\$b";
  regex_148 := "a\(b";
  var_regex_148 : std::string = "a\(b";
  regex_149 := "a\(*b";
  var_regex_149 : std::string = "a\(*b";
  regex_150 := "a\(*b";
  var_regex_150 : std::string = "a\(*b";
  regex_151 := "a\\b";
  var_regex_151 : std::string = "a\\b";
  regex_152 := "((a))";
  var_regex_152 : std::string = "((a))";
  regex_153 := "((a))";
  var_regex_153 : std::string = "((a))";
  regex_154 := "((a))";
  var_regex_154 : std::string = "((a))";
  regex_155 := "(foo)(\g-2)";
  var_regex_155 : std::string = "(foo)(\g-2)";
  regex_156 := "(foo)(\g-2)(foo)(\g-2)";
  var_regex_156 : std::string = "(foo)(\g-2)(foo)(\g-2)";
  regex_157 := "(([abc]+) \g-1)(([abc]+) \g{-1})";
  var_regex_157 : std::string = "(([abc]+) \g-1)(([abc]+) \g{-1})";
  regex_158 := "(a)(b)(c)\g1\g2\g3";
  var_regex_158 : std::string = "(a)(b)(c)\g1\g2\g3";
  regex_159 := "abc";
  regex_159_mod := "i";
  var_regex_159 : std::string = "abc";
  regex_160 := "abc";
  regex_160_mod := "i";
  var_regex_160 : std::string = "abc";
  regex_161 := "abc";
  regex_161_mod := "i";
  var_regex_161 : std::string = "abc";
  regex_162 := "abc";
  regex_162_mod := "i";
  var_regex_162 : std::string = "abc";
  regex_163 := "abc";
  regex_163_mod := "i";
  var_regex_163 : std::string = "abc";
  regex_164 := "abc";
  regex_164_mod := "i";
  var_regex_164 : std::string = "abc";
  regex_165 := "ab*c";
  regex_165_mod := "i";
  var_regex_165 : std::string = "ab*c";
  regex_166 := "ab*bc";
  regex_166_mod := "i";
  var_regex_166 : std::string = "ab*bc";
  regex_167 := "ab*bc";
  regex_167_mod := "i";
  var_regex_167 : std::string = "ab*bc";
  regex_168 := "ab*?bc";
  regex_168_mod := "i";
  var_regex_168 : std::string = "ab*?bc";
  regex_169 := "ab{0,}?bc";
  regex_169_mod := "i";
  var_regex_169 : std::string = "ab{0,}?bc";
  regex_170 := "ab+?bc";
  regex_170_mod := "i";
  var_regex_170 : std::string = "ab+?bc";
  regex_171 := "ab+bc";
  regex_171_mod := "i";
  var_regex_171 : std::string = "ab+bc";
  regex_172 := "ab+bc";
  regex_172_mod := "i";
  var_regex_172 : std::string = "ab+bc";
  regex_173 := "ab{1,}bc";
  regex_173_mod := "i";
  var_regex_173 : std::string = "ab{1,}bc";
  regex_174 := "ab+bc";
  regex_174_mod := "i";
  var_regex_174 : std::string = "ab+bc";
  regex_175 := "ab{1,}?bc";
  regex_175_mod := "i";
  var_regex_175 : std::string = "ab{1,}?bc";
  regex_176 := "ab{1,3}?bc";
  regex_176_mod := "i";
  var_regex_176 : std::string = "ab{1,3}?bc";
  regex_177 := "ab{3,4}?bc";
  regex_177_mod := "i";
  var_regex_177 : std::string = "ab{3,4}?bc";
  regex_178 := "ab{4,5}?bc";
  regex_178_mod := "i";
  var_regex_178 : std::string = "ab{4,5}?bc";
  regex_179 := "ab??bc";
  regex_179_mod := "i";
  var_regex_179 : std::string = "ab??bc";
  regex_180 := "ab??bc";
  regex_180_mod := "i";
  var_regex_180 : std::string = "ab??bc";
  regex_181 := "ab{0,1}?bc";
  regex_181_mod := "i";
  var_regex_181 : std::string = "ab{0,1}?bc";
  regex_182 := "ab??bc";
  regex_182_mod := "i";
  var_regex_182 : std::string = "ab??bc";
  regex_183 := "ab??c";
  regex_183_mod := "i";
  var_regex_183 : std::string = "ab??c";
  regex_184 := "ab{0,1}?c";
  regex_184_mod := "i";
  var_regex_184 : std::string = "ab{0,1}?c";
  regex_185 := "^abc\$";
  regex_185_mod := "i";
  var_regex_185 : std::string = "^abc\$";
  regex_186 := "^abc\$";
  regex_186_mod := "i";
  var_regex_186 : std::string = "^abc\$";
  regex_187 := "^abc";
  regex_187_mod := "i";
  var_regex_187 : std::string = "^abc";
  regex_188 := "^abc\$";
  regex_188_mod := "i";
  var_regex_188 : std::string = "^abc\$";
  regex_189 := "abc\$";
  regex_189_mod := "i";
  var_regex_189 : std::string = "abc\$";
  regex_190 := "^";
  regex_190_mod := "i";
  var_regex_190 : std::string = "^";
  regex_191 := "\$";
  regex_191_mod := "i";
  var_regex_191 : std::string = "\$";
  regex_192 := "a.c";
  regex_192_mod := "i";
  var_regex_192 : std::string = "a.c";
  regex_193 := "a.c";
  regex_193_mod := "i";
  var_regex_193 : std::string = "a.c";
  regex_194 := "a\Nc";
  regex_194_mod := "i";
  var_regex_194 : std::string = "a\\Nc";
  regex_195 := "a.*?c";
  regex_195_mod := "i";
  var_regex_195 : std::string = "a.*?c";
  regex_196 := "a.*c";
  regex_196_mod := "i";
  var_regex_196 : std::string = "a.*c";
  regex_197 := "a[bc]d";
  regex_197_mod := "i";
  var_regex_197 : std::string = "a[bc]d";
  regex_198 := "a[bc]d";
  regex_198_mod := "i";
  var_regex_198 : std::string = "a[bc]d";
  regex_199 := "a[b-d]e";
  regex_199_mod := "i";
  var_regex_199 : std::string = "a[b-d]e";
  regex_200 := "a[b-d]e";
  regex_200_mod := "i";
  var_regex_200 : std::string = "a[b-d]e";
  regex_201 := "a[b-d]";
  regex_201_mod := "i";
  var_regex_201 : std::string = "a[b-d]";
  regex_202 := "a[-b]";
  regex_202_mod := "i";
  var_regex_202 : std::string = "a[-b]";
  regex_203 := "a[b-]";
  regex_203_mod := "i";
  var_regex_203 : std::string = "a[b-]";
  regex_204 := "a]";
  regex_204_mod := "i";
  var_regex_204 : std::string = "a]";
  regex_205 := "a[]]b";
  regex_205_mod := "i";
  var_regex_205 : std::string = "a[]]b";
  regex_206 := "a[^bc]d";
  regex_206_mod := "i";
  var_regex_206 : std::string = "a[^bc]d";
  regex_207 := "a[^bc]d";
  regex_207_mod := "i";
  var_regex_207 : std::string = "a[^bc]d";
  regex_208 := "a[^-b]c";
  regex_208_mod := "i";
  var_regex_208 : std::string = "a[^-b]c";
  regex_209 := "a[^-b]c";
  regex_209_mod := "i";
  var_regex_209 : std::string = "a[^-b]c";
  regex_210 := "a[^]b]c";
  regex_210_mod := "i";
  var_regex_210 : std::string = "a[^]b]c";
  regex_211 := "a[^]b]c";
  regex_211_mod := "i";
  var_regex_211 : std::string = "a[^]b]c";
  regex_212 := "ab|cd";
  regex_212_mod := "i";
  var_regex_212 : std::string = "ab|cd";
  regex_213 := "ab|cd";
  regex_213_mod := "i";
  var_regex_213 : std::string = "ab|cd";
  regex_214 := "()ef";
  regex_214_mod := "i";
  var_regex_214 : std::string = "()ef";
  regex_215 := "\$b";
  regex_215_mod := "i";
  var_regex_215 : std::string = "\$b";
  regex_216 := "a\(b";
  regex_216_mod := "i";
  var_regex_216 : std::string = "a\(b";
  regex_217 := "a\(*b";
  regex_217_mod := "i";
  var_regex_217 : std::string = "a\(*b";
  regex_218 := "a\(*b";
  regex_218_mod := "i";
  var_regex_218 : std::string = "a\(*b";
  regex_219 := "a\\b";
  regex_219_mod := "i";
  var_regex_219 : std::string = "a\\b";
  regex_220 := "((a))";
  regex_220_mod := "i";
  var_regex_220 : std::string = "((a))";
  regex_221 := "(a)b(c)";
  regex_221_mod := "i";
  var_regex_221 : std::string = "(a)b(c)";
  regex_222 := "a+b+c";
  regex_222_mod := "i";
  var_regex_222 : std::string = "a+b+c";
  regex_223 := "a{1,}b{1,}c";
  regex_223_mod := "i";
  var_regex_223 : std::string = "a{1,}b{1,}c";
  regex_224 := "a.+?c";
  regex_224_mod := "i";
  var_regex_224 : std::string = "a.+?c";
  regex_225 := "a.*?c";
  regex_225_mod := "i";
  var_regex_225 : std::string = "a.*?c";
  regex_226 := "a.{0,5}?c";
  regex_226_mod := "i";
  var_regex_226 : std::string = "a.{0,5}?c";
  regex_227 := "(a+|b)*";
  regex_227_mod := "i";
  var_regex_227 : std::string = "(a+|b)*";
  regex_228 := "(a+|b){0,}";
  regex_228_mod := "i";
  var_regex_228 : std::string = "(a+|b){0,}";
  regex_229 := "(a+|b)+";
  regex_229_mod := "i";
  var_regex_229 : std::string = "(a+|b)+";
  regex_230 := "(a+|b){1,}";
  regex_230_mod := "i";
  var_regex_230 : std::string = "(a+|b){1,}";
  regex_231 := "(a+|b)?";
  regex_231_mod := "i";
  var_regex_231 : std::string = "(a+|b)?";
  regex_232 := "(a+|b){0,1}";
  regex_232_mod := "i";
  var_regex_232 : std::string = "(a+|b){0,1}";
  regex_233 := "(a+|b){0,1}?";
  regex_233_mod := "i";
  var_regex_233 : std::string = "(a+|b){0,1}?";
  regex_234 := "[^ab]*";
  regex_234_mod := "i";
  var_regex_234 : std::string = "[^ab]*";
  regex_235 := "abc";
  regex_235_mod := "i";
  var_regex_235 : std::string = "abc";
  regex_236 := "a*";
  regex_236_mod := "i";
  var_regex_236 : std::string = "a*";
  regex_237 := "([abc])*d";
  regex_237_mod := "i";
  var_regex_237 : std::string = "([abc])*d";
  regex_238 := "([abc])*bcd";
  regex_238_mod := "i";
  var_regex_238 : std::string = "([abc])*bcd";
  regex_239 := "a|b|c|d|e";
  regex_239_mod := "i";
  var_regex_239 : std::string = "a|b|c|d|e";
  regex_240 := "(a|b|c|d|e)f";
  regex_240_mod := "i";
  var_regex_240 : std::string = "(a|b|c|d|e)f";
  regex_241 := "abcd*efg";
  regex_241_mod := "i";
  var_regex_241 : std::string = "abcd*efg";
  regex_242 := "ab*";
  regex_242_mod := "i";
  var_regex_242 : std::string = "ab*";
  regex_243 := "ab*";
  regex_243_mod := "i";
  var_regex_243 : std::string = "ab*";
  regex_244 := "(ab|cd)e";
  regex_244_mod := "i";
  var_regex_244 : std::string = "(ab|cd)e";
  regex_245 := "[abhgefdc]ij";
  regex_245_mod := "i";
  var_regex_245 : std::string = "[abhgefdc]ij";
  regex_246 := "^(ab|cd)e";
  regex_246_mod := "i";
  var_regex_246 : std::string = "^(ab|cd)e";
  regex_247 := "(abc|)ef";
  regex_247_mod := "i";
  var_regex_247 : std::string = "(abc|)ef";
  regex_248 := "(a|b)c*d";
  regex_248_mod := "i";
  var_regex_248 : std::string = "(a|b)c*d";
  regex_249 := "(ab|ab*)bc";
  regex_249_mod := "i";
  var_regex_249 : std::string = "(ab|ab*)bc";
  regex_250 := "a([bc]*)c*";
  regex_250_mod := "i";
  var_regex_250 : std::string = "a([bc]*)c*";
  regex_251 := "a([bc]*)(c*d)";
  regex_251_mod := "i";
  var_regex_251 : std::string = "a([bc]*)(c*d)";
  regex_252 := "a([bc]+)(c*d)";
  regex_252_mod := "i";
  var_regex_252 : std::string = "a([bc]+)(c*d)";
  regex_253 := "a([bc]*)(c+d)";
  regex_253_mod := "i";
  var_regex_253 : std::string = "a([bc]*)(c+d)";
  regex_254 := "a[bcd]*dcdcde";
  regex_254_mod := "i";
  var_regex_254 : std::string = "a[bcd]*dcdcde";
  regex_255 := "a[bcd]+dcdcde";
  regex_255_mod := "i";
  var_regex_255 : std::string = "a[bcd]+dcdcde";
  regex_256 := "(ab|a)b*c";
  regex_256_mod := "i";
  var_regex_256 : std::string = "(ab|a)b*c";
  regex_257 := "((a)(b)c)(d)";
  regex_257_mod := "i";
  var_regex_257 : std::string = "((a)(b)c)(d)";
  regex_258 := "[a-zA-Z_][a-zA-Z0-9_]*";
  regex_258_mod := "i";
  var_regex_258 : std::string = "[a-zA-Z_][a-zA-Z0-9_]*";
  regex_259 := "^a(bc+|b[eh])g|.h\$";
  regex_259_mod := "i";
  var_regex_259 : std::string = "^a(bc+|b[eh])g|.h\$";
  regex_260 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_260_mod := "i";
  var_regex_260 : std::string = "(bc+d\$|ef*g.|h?i(j|k))";
  regex_261 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_261_mod := "i";
  var_regex_261 : std::string = "(bc+d\$|ef*g.|h?i(j|k))";
  regex_262 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_262_mod := "i";
  var_regex_262 : std::string = "(bc+d\$|ef*g.|h?i(j|k))";
  regex_263 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_263_mod := "i";
  var_regex_263 : std::string = "(bc+d\$|ef*g.|h?i(j|k))";
  regex_264 := "(bc+d\$|ef*g.|h?i(j|k))";
  regex_264_mod := "i";
  var_regex_264 : std::string = "(bc+d\$|ef*g.|h?i(j|k))";
  regex_265 := "((((((((((a))))))))))";
  regex_265_mod := "i";
  var_regex_265 : std::string = "((((((((((a))))))))))";
  regex_266 := "((((((((((a))))))))))\10";
  regex_266_mod := "i";
  var_regex_266 : std::string = "((((((((((a))))))))))\10";
  regex_267 := "(((((((((a)))))))))";
  regex_267_mod := "i";
  var_regex_267 : std::string = "(((((((((a)))))))))";
  regex_268 := "multiple words of text";
  regex_268_mod := "i";
  var_regex_268 : std::string = "multiple words of text";
  regex_269 := "multiple words";
  regex_269_mod := "i";
  var_regex_269 : std::string = "multiple words";
  regex_270 := "(.*)c(.*)";
  regex_270_mod := "i";
  var_regex_270 : std::string = "(.*)c(.*)";
  regex_271 := "\((.*), (.*)\)";
  regex_271_mod := "i";
  var_regex_271 : std::string = "\((.*), (.*)\)";
  regex_272 := "[k]";
  regex_272_mod := "i";
  var_regex_272 : std::string = "[k]";
  regex_273 := "abcd";
  regex_273_mod := "i";
  var_regex_273 : std::string = "abcd";
  regex_274 := "a(bc)d";
  regex_274_mod := "i";
  var_regex_274 : std::string = "a(bc)d";
  regex_275 := "a[-]?c";
  regex_275_mod := "i";
  var_regex_275 : std::string = "a[-]?c";
  regex_276 := "(abc)\1";
  regex_276_mod := "i";
  var_regex_276 : std::string = "(abc)\1";
  regex_277 := "([a-c]*)\1";
  regex_277_mod := "i";
  var_regex_277 : std::string = "([a-c]*)\1";
  regex_278 := "a++a";
  var_regex_278 : std::string = "a++a";
  regex_279 := "a*+a";
  var_regex_279 : std::string = "a*+a";
  regex_280 := "a{1,5}+a";
  var_regex_280 : std::string = "a{1,5}+a";
  regex_281 := "a?+a";
  var_regex_281 : std::string = "a?+a";
  regex_282 := "a++b";
  var_regex_282 : std::string = "a++b";
  regex_283 := "a*+b";
  var_regex_283 : std::string = "a*+b";
  regex_284 := "a{1,5}+b";
  var_regex_284 : std::string = "a{1,5}+b";
  regex_285 := "a?+b";
  var_regex_285 : std::string = "a?+b";
  regex_286 := "fooa++a";
  var_regex_286 : std::string = "fooa++a";
  regex_287 := "fooa*+a";
  var_regex_287 : std::string = "fooa*+a";
  regex_288 := "fooa{1,5}+a";
  var_regex_288 : std::string = "fooa{1,5}+a";
  regex_289 := "fooa?+a";
  var_regex_289 : std::string = "fooa?+a";
  regex_290 := "fooa++b";
  var_regex_290 : std::string = "fooa++b";
  regex_291 := "fooa*+b";
  var_regex_291 : std::string = "fooa*+b";
  regex_292 := "fooa{1,5}+b";
  var_regex_292 : std::string = "fooa{1,5}+b";
  regex_293 := "fooa?+b";
  var_regex_293 : std::string = "fooa?+b";
  regex_294 := "(aA)++(aA)";
  var_regex_294 : std::string = "(aA)++(aA)";
  regex_295 := "(aA|bB)++(aA|bB)";
  var_regex_295 : std::string = "(aA|bB)++(aA|bB)";
  regex_296 := "(aA)*+(aA)";
  var_regex_296 : std::string = "(aA)*+(aA)";
  regex_297 := "(aA|bB)*+(aA|bB)";
  var_regex_297 : std::string = "(aA|bB)*+(aA|bB)";
  regex_298 := "(aA){1,5}+(aA)";
  var_regex_298 : std::string = "(aA){1,5}+(aA)";
  regex_299 := "(aA|bB){1,5}+(aA|bB)";
  var_regex_299 : std::string = "(aA|bB){1,5}+(aA|bB)";
  regex_300 := "(aA)?+(aA)";
  var_regex_300 : std::string = "(aA)?+(aA)";
  regex_301 := "(aA|bB)?+(aA|bB)";
  var_regex_301 : std::string = "(aA|bB)?+(aA|bB)";
  regex_302 := "(aA)++b";
  var_regex_302 : std::string = "(aA)++b";
  regex_303 := "(aA|bB)++b";
  var_regex_303 : std::string = "(aA|bB)++b";
  regex_304 := "(aA)*+b";
  var_regex_304 : std::string = "(aA)*+b";
  regex_305 := "(aA|bB)*+b";
  var_regex_305 : std::string = "(aA|bB)*+b";
  regex_306 := "(aA){1,5}+b";
  var_regex_306 : std::string = "(aA){1,5}+b";
  regex_307 := "(aA|bB){1,5}+b";
  var_regex_307 : std::string = "(aA|bB){1,5}+b";
  regex_308 := "(aA)?+b";
  var_regex_308 : std::string = "(aA)?+b";
  regex_309 := "(aA|bB)?+b";
  var_regex_309 : std::string = "(aA|bB)?+b";
  regex_310 := "foo(aA)++(aA)";
  var_regex_310 : std::string = "foo(aA)++(aA)";
  regex_311 := "foo(aA|bB)++(aA|bB)";
  var_regex_311 : std::string = "foo(aA|bB)++(aA|bB)";
  regex_312 := "foo(aA)*+(aA)";
  var_regex_312 : std::string = "foo(aA)*+(aA)";
  regex_313 := "foo(aA|bB)*+(aA|bB)";
  var_regex_313 : std::string = "foo(aA|bB)*+(aA|bB)";
  regex_314 := "foo(aA){1,5}+(aA)";
  var_regex_314 : std::string = "foo(aA){1,5}+(aA)";
  regex_315 := "foo(aA|bB){1,5}+(aA|bB)";
  var_regex_315 : std::string = "foo(aA|bB){1,5}+(aA|bB)";
  regex_316 := "foo(aA)?+(aA)";
  var_regex_316 : std::string = "foo(aA)?+(aA)";
  regex_317 := "foo(aA|bB)?+(aA|bB)";
  var_regex_317 : std::string = "foo(aA|bB)?+(aA|bB)";
  regex_318 := "foo(aA)++b";
  var_regex_318 : std::string = "foo(aA)++b";
  regex_319 := "foo(aA|bB)++b";
  var_regex_319 : std::string = "foo(aA|bB)++b";
  regex_320 := "foo(aA)*+b";
  var_regex_320 : std::string = "foo(aA)*+b";
  regex_321 := "foo(aA|bB)*+b";
  var_regex_321 : std::string = "foo(aA|bB)*+b";
  regex_322 := "foo(aA){1,5}+b";
  var_regex_322 : std::string = "foo(aA){1,5}+b";
  regex_323 := "foo(aA|bB){1,5}+b";
  var_regex_323 : std::string = "foo(aA|bB){1,5}+b";
  regex_324 := "foo(aA)?+b";
  var_regex_324 : std::string = "foo(aA)?+b";
  regex_325 := "foo(aA|bB)?+b";
  var_regex_325 : std::string = "foo(aA|bB)?+b";
  regex_326 := "foo(\h+)bar";
  var_regex_326 : std::string = "foo(\h+)bar";
  regex_327 := "(\H+)(\h)";
  var_regex_327 : std::string = "(\H+)(\h)";
  regex_328 := "(\h+)(\H)";
  var_regex_328 : std::string = "(\h+)(\H)";
  regex_329 := "foo(\h)bar";
  var_regex_329 : std::string = "foo(\h)bar";
  regex_330 := "(\H)(\h)";
  var_regex_330 : std::string = "(\H)(\h)";
  regex_331 := "(\h)(\H)";
  var_regex_331 : std::string = "(\h)(\H)";
  regex_332 := "foo(\v+)bar";
  var_regex_332 : std::string = "foo(\v+)bar";
  regex_333 := "(\V+)(\v)";
  var_regex_333 : std::string = "(\V+)(\v)";
  regex_334 := "(\v+)(\V)";
  var_regex_334 : std::string = "(\v+)(\V)";
  regex_335 := "foo(\v)bar";
  var_regex_335 : std::string = "foo(\v)bar";
  regex_336 := "(\V)(\v)";
  var_regex_336 : std::string = "(\V)(\v)";
  regex_337 := "(\v)(\V)";
  var_regex_337 : std::string = "(\v)(\V)";
  regex_338 := "(?:(?i)a)b";
  var_regex_338 : std::string = "(?:(?i)a)b";
  regex_339 := "((?i)a)b";
  var_regex_339 : std::string = "((?i)a)b";
  regex_340 := "(?:(?i)a)b";
  var_regex_340 : std::string = "(?:(?i)a)b";
  regex_341 := "((?i)a)b";
  var_regex_341 : std::string = "((?i)a)b";
  regex_342 := "(?:(?i)a)b";
  var_regex_342 : std::string = "(?:(?i)a)b";
  regex_343 := "((?i)a)b";
  var_regex_343 : std::string = "((?i)a)b";
  regex_344 := "(?i:a)b";
  var_regex_344 : std::string = "(?i:a)b";
  regex_345 := "((?i:a))b";
  var_regex_345 : std::string = "((?i:a))b";
  regex_346 := "(?i:a)b";
  var_regex_346 : std::string = "(?i:a)b";
  regex_347 := "((?i:a))b";
  var_regex_347 : std::string = "((?i:a))b";
  regex_348 := "(?i:a)b";
  var_regex_348 : std::string = "(?i:a)b";
  regex_349 := "((?i:a))b";
  var_regex_349 : std::string = "((?i:a))b";
  regex_350 := "(?:(?-i)a)b";
  regex_350_mod := "i";
  var_regex_350 : std::string = "(?:(?-i)a)b";
  regex_351 := "((?-i)a)b";
  regex_351_mod := "i";
  var_regex_351 : std::string = "((?-i)a)b";
  regex_352 := "(?:(?-i)a)b";
  regex_352_mod := "i";
  var_regex_352 : std::string = "(?:(?-i)a)b";
  regex_353 := "((?-i)a)b";
  regex_353_mod := "i";
  var_regex_353 : std::string = "((?-i)a)b";
  regex_354 := "(?:(?-i)a)b";
  regex_354_mod := "i";
  var_regex_354 : std::string = "(?:(?-i)a)b";
  regex_355 := "((?-i)a)b";
  regex_355_mod := "i";
  var_regex_355 : std::string = "((?-i)a)b";
  regex_356 := "(?:(?-i)a)b";
  regex_356_mod := "i";
  var_regex_356 : std::string = "(?:(?-i)a)b";
  regex_357 := "((?-i)a)b";
  regex_357_mod := "i";
  var_regex_357 : std::string = "((?-i)a)b";
  regex_358 := "(?:(?-i)a)b";
  regex_358_mod := "i";
  var_regex_358 : std::string = "(?:(?-i)a)b";
  regex_359 := "((?-i)a)b";
  regex_359_mod := "i";
  var_regex_359 : std::string = "((?-i)a)b";
  regex_360 := "(?-i:a)b";
  regex_360_mod := "i";
  var_regex_360 : std::string = "(?-i:a)b";
  regex_361 := "((?-i:a))b";
  regex_361_mod := "i";
  var_regex_361 : std::string = "((?-i:a))b";
  regex_362 := "(?-i:a)b";
  regex_362_mod := "i";
  var_regex_362 : std::string = "(?-i:a)b";
  regex_363 := "((?-i:a))b";
  regex_363_mod := "i";
  var_regex_363 : std::string = "((?-i:a))b";
  regex_364 := "(?-i:a)b";
  regex_364_mod := "i";
  var_regex_364 : std::string = "(?-i:a)b";
  regex_365 := "((?-i:a))b";
  regex_365_mod := "i";
  var_regex_365 : std::string = "((?-i:a))b";
  regex_366 := "(?-i:a)b";
  regex_366_mod := "i";
  var_regex_366 : std::string = "(?-i:a)b";
  regex_367 := "((?-i:a))b";
  regex_367_mod := "i";
  var_regex_367 : std::string = "((?-i:a))b";
  regex_368 := "(?-i:a)b";
  regex_368_mod := "i";
  var_regex_368 : std::string = "(?-i:a)b";
  regex_369 := "((?-i:a))b";
  regex_369_mod := "i";
  var_regex_369 : std::string = "((?-i:a))b";
  regex_370 := "((?-i:a.))b";
  regex_370_mod := "i";
  var_regex_370 : std::string = "((?-i:a.))b";
  regex_371 := "((?-i:a\N))b";
  regex_371_mod := "i";
  var_regex_371 : std::string = "((?-i:a\\N))b";
  regex_372 := "((?s-i:a.))b";
  regex_372_mod := "i";
  var_regex_372 : std::string = "((?s-i:a.))b";
  regex_373 := "((?s-i:a\N))b";
  regex_373_mod := "i";
  var_regex_373 : std::string = "((?s-i:a\\N))b";
  regex_374 := "((?s-i:a.))b";
  regex_374_mod := "i";
  var_regex_374 : std::string = "((?s-i:a.))b";
  regex_375 := "((?s-i:a\N))b";
  regex_375_mod := "i";
  var_regex_375 : std::string = "((?s-i:a\\N))b";
  regex_376 := "^(?:a?b?)*\$";
  var_regex_376 : std::string = "^(?:a?b?)*\$";
  regex_377 := "((?s)^a(.))((?m)^b\$)";
  var_regex_377 : std::string = "((?s)^a(.))((?m)^b\$)";
  regex_378 := "((?m)^b\$)";
  var_regex_378 : std::string = "((?m)^b\$)";
  regex_379 := "(?m)^b";
  var_regex_379 : std::string = "(?m)^b";
  regex_380 := "(?m)^(b)";
  var_regex_380 : std::string = "(?m)^(b)";
  regex_381 := "((?m)^b)";
  var_regex_381 : std::string = "((?m)^b)";
  regex_382 := "\n((?m)^b)";
  var_regex_382 : std::string = "\n((?m)^b)";
  regex_383 := "^b";
  var_regex_383 : std::string = "^b";
  regex_384 := "()^b";
  var_regex_384 : std::string = "()^b";
  regex_385 := "((?m)^b)";
  var_regex_385 : std::string = "((?m)^b)";
  regex_386 := "\Z";
  var_regex_386 : std::string = "\Z";
  regex_387 := "\z";
  var_regex_387 : std::string = "\z";
  regex_388 := "\$";
  var_regex_388 : std::string = "\$";
  regex_389 := "\Z";
  var_regex_389 : std::string = "\Z";
  regex_390 := "\z";
  var_regex_390 : std::string = "\z";
  regex_391 := "\$";
  var_regex_391 : std::string = "\$";
  regex_392 := "\Z";
  var_regex_392 : std::string = "\Z";
  regex_393 := "\z";
  var_regex_393 : std::string = "\z";
  regex_394 := "\$";
  var_regex_394 : std::string = "\$";
  regex_395 := "\Z";
  regex_395_mod := "m";
  var_regex_395 : std::string = "\Z";
  regex_396 := "\z";
  regex_396_mod := "m";
  var_regex_396 : std::string = "\z";
  regex_397 := "\$";
  regex_397_mod := "m";
  var_regex_397 : std::string = "\$";
  regex_398 := "\Z";
  regex_398_mod := "m";
  var_regex_398 : std::string = "\Z";
  regex_399 := "\z";
  regex_399_mod := "m";
  var_regex_399 : std::string = "\z";
  regex_400 := "\$";
  regex_400_mod := "m";
  var_regex_400 : std::string = "\$";
  regex_401 := "\Z";
  regex_401_mod := "m";
  var_regex_401 : std::string = "\Z";
  regex_402 := "\z";
  regex_402_mod := "m";
  var_regex_402 : std::string = "\z";
  regex_403 := "\$";
  regex_403_mod := "m";
  var_regex_403 : std::string = "\$";
  regex_404 := "a\Z";
  var_regex_404 : std::string = "a\Z";
  regex_405 := "a\z";
  var_regex_405 : std::string = "a\z";
  regex_406 := "a\$";
  var_regex_406 : std::string = "a\$";
  regex_407 := "a\Z";
  var_regex_407 : std::string = "a\Z";
  regex_408 := "a\z";
  var_regex_408 : std::string = "a\z";
  regex_409 := "a\$";
  var_regex_409 : std::string = "a\$";
  regex_410 := "a\Z";
  var_regex_410 : std::string = "a\Z";
  regex_411 := "a\z";
  var_regex_411 : std::string = "a\z";
  regex_412 := "a\$";
  var_regex_412 : std::string = "a\$";
  regex_413 := "a\Z";
  regex_413_mod := "m";
  var_regex_413 : std::string = "a\Z";
  regex_414 := "a\z";
  regex_414_mod := "m";
  var_regex_414 : std::string = "a\z";
  regex_415 := "a\$";
  regex_415_mod := "m";
  var_regex_415 : std::string = "a\$";
  regex_416 := "a\Z";
  regex_416_mod := "m";
  var_regex_416 : std::string = "a\Z";
  regex_417 := "a\z";
  regex_417_mod := "m";
  var_regex_417 : std::string = "a\z";
  regex_418 := "a\$";
  regex_418_mod := "m";
  var_regex_418 : std::string = "a\$";
  regex_419 := "a\Z";
  regex_419_mod := "m";
  var_regex_419 : std::string = "a\Z";
  regex_420 := "a\z";
  regex_420_mod := "m";
  var_regex_420 : std::string = "a\z";
  regex_421 := "a\$";
  regex_421_mod := "m";
  var_regex_421 : std::string = "a\$";
  regex_422 := "aa\Z";
  var_regex_422 : std::string = "aa\Z";
  regex_423 := "aa\z";
  var_regex_423 : std::string = "aa\z";
  regex_424 := "aa\$";
  var_regex_424 : std::string = "aa\$";
  regex_425 := "aa\Z";
  var_regex_425 : std::string = "aa\Z";
  regex_426 := "aa\z";
  var_regex_426 : std::string = "aa\z";
  regex_427 := "aa\$";
  var_regex_427 : std::string = "aa\$";
  regex_428 := "aa\Z";
  var_regex_428 : std::string = "aa\Z";
  regex_429 := "aa\z";
  var_regex_429 : std::string = "aa\z";
  regex_430 := "aa\$";
  var_regex_430 : std::string = "aa\$";
  regex_431 := "aa\Z";
  regex_431_mod := "m";
  var_regex_431 : std::string = "aa\Z";
  regex_432 := "aa\z";
  regex_432_mod := "m";
  var_regex_432 : std::string = "aa\z";
  regex_433 := "aa\$";
  regex_433_mod := "m";
  var_regex_433 : std::string = "aa\$";
  regex_434 := "aa\Z";
  regex_434_mod := "m";
  var_regex_434 : std::string = "aa\Z";
  regex_435 := "aa\z";
  regex_435_mod := "m";
  var_regex_435 : std::string = "aa\z";
  regex_436 := "aa\$";
  regex_436_mod := "m";
  var_regex_436 : std::string = "aa\$";
  regex_437 := "aa\Z";
  regex_437_mod := "m";
  var_regex_437 : std::string = "aa\Z";
  regex_438 := "aa\z";
  regex_438_mod := "m";
  var_regex_438 : std::string = "aa\z";
  regex_439 := "aa\$";
  regex_439_mod := "m";
  var_regex_439 : std::string = "aa\$";
  regex_440 := "aa\Z";
  var_regex_440 : std::string = "aa\Z";
  regex_441 := "aa\z";
  var_regex_441 : std::string = "aa\z";
  regex_442 := "aa\$";
  var_regex_442 : std::string = "aa\$";
  regex_443 := "aa\Z";
  var_regex_443 : std::string = "aa\Z";
  regex_444 := "aa\z";
  var_regex_444 : std::string = "aa\z";
  regex_445 := "aa\$";
  var_regex_445 : std::string = "aa\$";
  regex_446 := "aa\Z";
  var_regex_446 : std::string = "aa\Z";
  regex_447 := "aa\z";
  var_regex_447 : std::string = "aa\z";
  regex_448 := "aa\$";
  var_regex_448 : std::string = "aa\$";
  regex_449 := "aa\Z";
  regex_449_mod := "m";
  var_regex_449 : std::string = "aa\Z";
  regex_450 := "aa\z";
  regex_450_mod := "m";
  var_regex_450 : std::string = "aa\z";
  regex_451 := "aa\$";
  regex_451_mod := "m";
  var_regex_451 : std::string = "aa\$";
  regex_452 := "aa\Z";
  regex_452_mod := "m";
  var_regex_452 : std::string = "aa\Z";
  regex_453 := "aa\z";
  regex_453_mod := "m";
  var_regex_453 : std::string = "aa\z";
  regex_454 := "aa\$";
  regex_454_mod := "m";
  var_regex_454 : std::string = "aa\$";
  regex_455 := "aa\Z";
  regex_455_mod := "m";
  var_regex_455 : std::string = "aa\Z";
  regex_456 := "aa\z";
  regex_456_mod := "m";
  var_regex_456 : std::string = "aa\z";
  regex_457 := "aa\$";
  regex_457_mod := "m";
  var_regex_457 : std::string = "aa\$";
  regex_458 := "aa\Z";
  var_regex_458 : std::string = "aa\Z";
  regex_459 := "aa\z";
  var_regex_459 : std::string = "aa\z";
  regex_460 := "aa\$";
  var_regex_460 : std::string = "aa\$";
  regex_461 := "aa\Z";
  var_regex_461 : std::string = "aa\Z";
  regex_462 := "aa\z";
  var_regex_462 : std::string = "aa\z";
  regex_463 := "aa\$";
  var_regex_463 : std::string = "aa\$";
  regex_464 := "aa\Z";
  var_regex_464 : std::string = "aa\Z";
  regex_465 := "aa\z";
  var_regex_465 : std::string = "aa\z";
  regex_466 := "aa\$";
  var_regex_466 : std::string = "aa\$";
  regex_467 := "aa\Z";
  regex_467_mod := "m";
  var_regex_467 : std::string = "aa\Z";
  regex_468 := "aa\z";
  regex_468_mod := "m";
  var_regex_468 : std::string = "aa\z";
  regex_469 := "aa\$";
  regex_469_mod := "m";
  var_regex_469 : std::string = "aa\$";
  regex_470 := "aa\Z";
  regex_470_mod := "m";
  var_regex_470 : std::string = "aa\Z";
  regex_471 := "aa\z";
  regex_471_mod := "m";
  var_regex_471 : std::string = "aa\z";
  regex_472 := "aa\$";
  regex_472_mod := "m";
  var_regex_472 : std::string = "aa\$";
  regex_473 := "aa\Z";
  regex_473_mod := "m";
  var_regex_473 : std::string = "aa\Z";
  regex_474 := "aa\z";
  regex_474_mod := "m";
  var_regex_474 : std::string = "aa\z";
  regex_475 := "aa\$";
  regex_475_mod := "m";
  var_regex_475 : std::string = "aa\$";
  regex_476 := "ab\Z";
  var_regex_476 : std::string = "ab\Z";
  regex_477 := "ab\z";
  var_regex_477 : std::string = "ab\z";
  regex_478 := "ab\$";
  var_regex_478 : std::string = "ab\$";
  regex_479 := "ab\Z";
  var_regex_479 : std::string = "ab\Z";
  regex_480 := "ab\z";
  var_regex_480 : std::string = "ab\z";
  regex_481 := "ab\$";
  var_regex_481 : std::string = "ab\$";
  regex_482 := "ab\Z";
  var_regex_482 : std::string = "ab\Z";
  regex_483 := "ab\z";
  var_regex_483 : std::string = "ab\z";
  regex_484 := "ab\$";
  var_regex_484 : std::string = "ab\$";
  regex_485 := "ab\Z";
  regex_485_mod := "m";
  var_regex_485 : std::string = "ab\Z";
  regex_486 := "ab\z";
  regex_486_mod := "m";
  var_regex_486 : std::string = "ab\z";
  regex_487 := "ab\$";
  regex_487_mod := "m";
  var_regex_487 : std::string = "ab\$";
  regex_488 := "ab\Z";
  regex_488_mod := "m";
  var_regex_488 : std::string = "ab\Z";
  regex_489 := "ab\z";
  regex_489_mod := "m";
  var_regex_489 : std::string = "ab\z";
  regex_490 := "ab\$";
  regex_490_mod := "m";
  var_regex_490 : std::string = "ab\$";
  regex_491 := "ab\Z";
  regex_491_mod := "m";
  var_regex_491 : std::string = "ab\Z";
  regex_492 := "ab\z";
  regex_492_mod := "m";
  var_regex_492 : std::string = "ab\z";
  regex_493 := "ab\$";
  regex_493_mod := "m";
  var_regex_493 : std::string = "ab\$";
  regex_494 := "ab\Z";
  var_regex_494 : std::string = "ab\Z";
  regex_495 := "ab\z";
  var_regex_495 : std::string = "ab\z";
  regex_496 := "ab\$";
  var_regex_496 : std::string = "ab\$";
  regex_497 := "ab\Z";
  var_regex_497 : std::string = "ab\Z";
  regex_498 := "ab\z";
  var_regex_498 : std::string = "ab\z";
  regex_499 := "ab\$";
  var_regex_499 : std::string = "ab\$";
  regex_500 := "ab\Z";
  var_regex_500 : std::string = "ab\Z";
  regex_501 := "ab\z";
  var_regex_501 : std::string = "ab\z";
  regex_502 := "ab\$";
  var_regex_502 : std::string = "ab\$";
  regex_503 := "ab\Z";
  regex_503_mod := "m";
  var_regex_503 : std::string = "ab\Z";
  regex_504 := "ab\z";
  regex_504_mod := "m";
  var_regex_504 : std::string = "ab\z";
  regex_505 := "ab\$";
  regex_505_mod := "m";
  var_regex_505 : std::string = "ab\$";
  regex_506 := "ab\Z";
  regex_506_mod := "m";
  var_regex_506 : std::string = "ab\Z";
  regex_507 := "ab\z";
  regex_507_mod := "m";
  var_regex_507 : std::string = "ab\z";
  regex_508 := "ab\$";
  regex_508_mod := "m";
  var_regex_508 : std::string = "ab\$";
  regex_509 := "ab\Z";
  regex_509_mod := "m";
  var_regex_509 : std::string = "ab\Z";
  regex_510 := "ab\z";
  regex_510_mod := "m";
  var_regex_510 : std::string = "ab\z";
  regex_511 := "ab\$";
  regex_511_mod := "m";
  var_regex_511 : std::string = "ab\$";
  regex_512 := "ab\Z";
  var_regex_512 : std::string = "ab\Z";
  regex_513 := "ab\z";
  var_regex_513 : std::string = "ab\z";
  regex_514 := "ab\$";
  var_regex_514 : std::string = "ab\$";
  regex_515 := "ab\Z";
  var_regex_515 : std::string = "ab\Z";
  regex_516 := "ab\z";
  var_regex_516 : std::string = "ab\z";
  regex_517 := "ab\$";
  var_regex_517 : std::string = "ab\$";
  regex_518 := "ab\Z";
  var_regex_518 : std::string = "ab\Z";
  regex_519 := "ab\z";
  var_regex_519 : std::string = "ab\z";
  regex_520 := "ab\$";
  var_regex_520 : std::string = "ab\$";
  regex_521 := "ab\Z";
  regex_521_mod := "m";
  var_regex_521 : std::string = "ab\Z";
  regex_522 := "ab\z";
  regex_522_mod := "m";
  var_regex_522 : std::string = "ab\z";
  regex_523 := "ab\$";
  regex_523_mod := "m";
  var_regex_523 : std::string = "ab\$";
  regex_524 := "ab\Z";
  regex_524_mod := "m";
  var_regex_524 : std::string = "ab\Z";
  regex_525 := "ab\z";
  regex_525_mod := "m";
  var_regex_525 : std::string = "ab\z";
  regex_526 := "ab\$";
  regex_526_mod := "m";
  var_regex_526 : std::string = "ab\$";
  regex_527 := "ab\Z";
  regex_527_mod := "m";
  var_regex_527 : std::string = "ab\Z";
  regex_528 := "ab\z";
  regex_528_mod := "m";
  var_regex_528 : std::string = "ab\z";
  regex_529 := "ab\$";
  regex_529_mod := "m";
  var_regex_529 : std::string = "ab\$";
  regex_530 := "abb\Z";
  var_regex_530 : std::string = "abb\Z";
  regex_531 := "abb\z";
  var_regex_531 : std::string = "abb\z";
  regex_532 := "abb\$";
  var_regex_532 : std::string = "abb\$";
  regex_533 := "abb\Z";
  var_regex_533 : std::string = "abb\Z";
  regex_534 := "abb\z";
  var_regex_534 : std::string = "abb\z";
  regex_535 := "abb\$";
  var_regex_535 : std::string = "abb\$";
  regex_536 := "abb\Z";
  var_regex_536 : std::string = "abb\Z";
  regex_537 := "abb\z";
  var_regex_537 : std::string = "abb\z";
  regex_538 := "abb\$";
  var_regex_538 : std::string = "abb\$";
  regex_539 := "abb\Z";
  regex_539_mod := "m";
  var_regex_539 : std::string = "abb\Z";
  regex_540 := "abb\z";
  regex_540_mod := "m";
  var_regex_540 : std::string = "abb\z";
  regex_541 := "abb\$";
  regex_541_mod := "m";
  var_regex_541 : std::string = "abb\$";
  regex_542 := "abb\Z";
  regex_542_mod := "m";
  var_regex_542 : std::string = "abb\Z";
  regex_543 := "abb\z";
  regex_543_mod := "m";
  var_regex_543 : std::string = "abb\z";
  regex_544 := "abb\$";
  regex_544_mod := "m";
  var_regex_544 : std::string = "abb\$";
  regex_545 := "abb\Z";
  regex_545_mod := "m";
  var_regex_545 : std::string = "abb\Z";
  regex_546 := "abb\z";
  regex_546_mod := "m";
  var_regex_546 : std::string = "abb\z";
  regex_547 := "abb\$";
  regex_547_mod := "m";
  var_regex_547 : std::string = "abb\$";
  regex_548 := "abb\Z";
  var_regex_548 : std::string = "abb\Z";
  regex_549 := "abb\z";
  var_regex_549 : std::string = "abb\z";
  regex_550 := "abb\$";
  var_regex_550 : std::string = "abb\$";
  regex_551 := "abb\Z";
  var_regex_551 : std::string = "abb\Z";
  regex_552 := "abb\z";
  var_regex_552 : std::string = "abb\z";
  regex_553 := "abb\$";
  var_regex_553 : std::string = "abb\$";
  regex_554 := "abb\Z";
  var_regex_554 : std::string = "abb\Z";
  regex_555 := "abb\z";
  var_regex_555 : std::string = "abb\z";
  regex_556 := "abb\$";
  var_regex_556 : std::string = "abb\$";
  regex_557 := "abb\Z";
  regex_557_mod := "m";
  var_regex_557 : std::string = "abb\Z";
  regex_558 := "abb\z";
  regex_558_mod := "m";
  var_regex_558 : std::string = "abb\z";
  regex_559 := "abb\$";
  regex_559_mod := "m";
  var_regex_559 : std::string = "abb\$";
  regex_560 := "abb\Z";
  regex_560_mod := "m";
  var_regex_560 : std::string = "abb\Z";
  regex_561 := "abb\z";
  regex_561_mod := "m";
  var_regex_561 : std::string = "abb\z";
  regex_562 := "abb\$";
  regex_562_mod := "m";
  var_regex_562 : std::string = "abb\$";
  regex_563 := "abb\Z";
  regex_563_mod := "m";
  var_regex_563 : std::string = "abb\Z";
  regex_564 := "abb\z";
  regex_564_mod := "m";
  var_regex_564 : std::string = "abb\z";
  regex_565 := "abb\$";
  regex_565_mod := "m";
  var_regex_565 : std::string = "abb\$";
  regex_566 := "abb\Z";
  var_regex_566 : std::string = "abb\Z";
  regex_567 := "abb\z";
  var_regex_567 : std::string = "abb\z";
  regex_568 := "abb\$";
  var_regex_568 : std::string = "abb\$";
  regex_569 := "abb\Z";
  var_regex_569 : std::string = "abb\Z";
  regex_570 := "abb\z";
  var_regex_570 : std::string = "abb\z";
  regex_571 := "abb\$";
  var_regex_571 : std::string = "abb\$";
  regex_572 := "abb\Z";
  var_regex_572 : std::string = "abb\Z";
  regex_573 := "abb\z";
  var_regex_573 : std::string = "abb\z";
  regex_574 := "abb\$";
  var_regex_574 : std::string = "abb\$";
  regex_575 := "abb\Z";
  regex_575_mod := "m";
  var_regex_575 : std::string = "abb\Z";
  regex_576 := "abb\z";
  regex_576_mod := "m";
  var_regex_576 : std::string = "abb\z";
  regex_577 := "abb\$";
  regex_577_mod := "m";
  var_regex_577 : std::string = "abb\$";
  regex_578 := "abb\Z";
  regex_578_mod := "m";
  var_regex_578 : std::string = "abb\Z";
  regex_579 := "abb\z";
  regex_579_mod := "m";
  var_regex_579 : std::string = "abb\z";
  regex_580 := "abb\$";
  regex_580_mod := "m";
  var_regex_580 : std::string = "abb\$";
  regex_581 := "abb\Z";
  regex_581_mod := "m";
  var_regex_581 : std::string = "abb\Z";
  regex_582 := "abb\z";
  regex_582_mod := "m";
  var_regex_582 : std::string = "abb\z";
  regex_583 := "abb\$";
  regex_583_mod := "m";
  var_regex_583 : std::string = "abb\$";
  regex_584 := "\Aa\$";
  regex_584_mod := "m";
  var_regex_584 : std::string = "\Aa\$";
  regex_585 := "(?i:.[b].)";
  var_regex_585 : std::string = "(?i:.[b].)";
  regex_586 := "(?i:\N[b]\N)";
  var_regex_586 : std::string = "(?i:\\N[b]\\N)";
  regex_587 := "\N {1}";
  regex_587_mod := "x";
  var_regex_587 : std::string = "\\N {1}";
  regex_588 := "\N {1}";
  regex_588_mod := "x";
  var_regex_588 : std::string = "\\N {1}";
  regex_589 := "\N {1}";
  regex_589_mod := "x";
  var_regex_589 : std::string = "\\N {1}";
  regex_590 := "\N {3,4}";
  regex_590_mod := "x";
  var_regex_590 : std::string = "\\N {3,4}";
  regex_591 := "\N {3,4}";
  regex_591_mod := "x";
  var_regex_591 : std::string = "\\N {3,4}";
  regex_592 := "\N {3,4}";
  regex_592_mod := "x";
  var_regex_592 : std::string = "\\N {3,4}";
  regex_593 := "a\N c";
  regex_593_mod := "x";
  var_regex_593 : std::string = "a\\N c";
  regex_594 := "a\N *c";
  regex_594_mod := "x";
  var_regex_594 : std::string = "a\\N *c";
  regex_595 := "a\N *c";
  regex_595_mod := "x";
  var_regex_595 : std::string = "a\\N *c";
  regex_596 := "[a b]";
  regex_596_mod := "x";
  var_regex_596 : std::string = "[a b]";
  regex_597 := "[a b]";
  regex_597_mod := "xx";
  var_regex_597 : std::string = "[a b]";
  regex_598 := "[a\ b]";
  regex_598_mod := "xx";
  var_regex_598 : std::string = "[a\ b]";
  regex_599 := "[ ^ a b ]";
  regex_599_mod := "xx";
  var_regex_599 : std::string = "[ ^ a b ]";
  regex_600 := "[ ^ a b ]";
  regex_600_mod := "xx";
  var_regex_600 : std::string = "[ ^ a b ]";
  regex_601 := "[ ^ a b ]";
  regex_601_mod := "xx";
  var_regex_601 : std::string = "[ ^ a b ]";
  regex_602 := "(?x:[a b])";
  regex_602_mod := "xx";
  var_regex_602 : std::string = "(?x:[a b])";
  regex_603 := "(?xx:[a b])";
  regex_603_mod := "x";
  var_regex_603 : std::string = "(?xx:[a b])";
  regex_604 := "(?x)[a b]";
  regex_604_mod := "xx";
  var_regex_604 : std::string = "(?x)[a b]";
  regex_605 := "(?xx)[a b]";
  regex_605_mod := "x";
  var_regex_605 : std::string = "(?xx)[a b]";
  regex_606 := "(?-x:[a b])";
  regex_606_mod := "xx";
  var_regex_606 : std::string = "(?-x:[a b])";
  regex_607 := "\N {1}";
  regex_607_mod := "x";
  var_regex_607 : std::string = "\\N {1}";
  regex_608 := "\N {1}";
  regex_608_mod := "x";
  var_regex_608 : std::string = "\\N {1}";
  regex_609 := "\N {1}";
  regex_609_mod := "x";
  var_regex_609 : std::string = "\\N {1}";
  regex_610 := "\N {3,4}";
  regex_610_mod := "x";
  var_regex_610 : std::string = "\\N {3,4}";
  regex_611 := "\N {3,4}";
  regex_611_mod := "x";
  var_regex_611 : std::string = "\\N {3,4}";
  regex_612 := "\N {3,4}";
  regex_612_mod := "x";
  var_regex_612 : std::string = "\\N {3,4}";
  regex_613 := "a\N c";
  regex_613_mod := "x";
  var_regex_613 : std::string = "a\\N c";
  regex_614 := "a\N *c";
  regex_614_mod := "x";
  var_regex_614 : std::string = "a\\N *c";
  regex_615 := "a\N *c";
  regex_615_mod := "x";
  var_regex_615 : std::string = "a\\N *c";
  regex_616 := "[#]";
  var_regex_616 : std::string = "[#]";
  regex_617 := "[#]b";
  var_regex_617 : std::string = "[#]b";
  regex_618 := "[#]";
  regex_618_mod := "x";
  var_regex_618 : std::string = "[#]";
  regex_619 := "[#]b";
  regex_619_mod := "x";
  var_regex_619 : std::string = "[#]b";
  regex_620 := "(?'n'foo) \g{n}";
  var_regex_620 : std::string = "(?'n'foo) \g{n}";
  regex_621 := "(?'n'foo) \g{ n }";
  var_regex_621 : std::string = "(?'n'foo) \g{ n }";
  regex_622 := "(?'n'foo) \g{n}";
  var_regex_622 : std::string = "(?'n'foo) \g{n}";
  regex_623 := "(?<n>foo) \g{n}";
  var_regex_623 : std::string = "(?<n>foo) \g{n}";
  regex_624 := "(?<n>foo) \g{n}";
  var_regex_624 : std::string = "(?<n>foo) \g{n}";
  regex_625 := "(?<as>as) (\w+) \g{as} (\w+)";
  var_regex_625 : std::string = "(?<as>as) (\w+) \g{as} (\w+)";
  regex_626 := "(?'n'foo) \k<n>";
  var_regex_626 : std::string = "(?'n'foo) \k<n>";
  regex_627 := "(?'n'foo) \k<n>";
  var_regex_627 : std::string = "(?'n'foo) \k<n>";
  regex_628 := "(?<n>foo) \k'n'";
  var_regex_628 : std::string = "(?<n>foo) \k'n'";
  regex_629 := "(?<n>foo) \k'n'";
  var_regex_629 : std::string = "(?<n>foo) \k'n'";
  regex_630 := "(?'a1'foo) \k'a1'";
  var_regex_630 : std::string = "(?'a1'foo) \k'a1'";
  regex_631 := "(?<a1>foo) \k<a1>";
  var_regex_631 : std::string = "(?<a1>foo) \k<a1>";
  regex_632 := "(?'_'foo) \k'_'";
  var_regex_632 : std::string = "(?'_'foo) \k'_'";
  regex_633 := "(?<_>foo) \k<_>";
  var_regex_633 : std::string = "(?<_>foo) \k<_>";
  regex_634 := "(?'_0_'foo) \k'_0_'";
  var_regex_634 : std::string = "(?'_0_'foo) \k'_0_'";
  regex_635 := "(?<_0_>foo) \k<_0_>";
  var_regex_635 : std::string = "(?<_0_>foo) \k<_0_>";
  regex_636 := "(?<as>as) (\w+) \k<as> (\w+)";
  var_regex_636 : std::string = "(?<as>as) (\w+) \k<as> (\w+)";
  regex_637 := "(?<as>as) (\w+) \k{as} (\w+)";
  var_regex_637 : std::string = "(?<as>as) (\w+) \k{as} (\w+)";
  regex_638 := "(?<as>as) (\w+) \k'as' (\w+)";
  var_regex_638 : std::string = "(?<as>as) (\w+) \k'as' (\w+)";
  regex_639 := "(?<as>as) (\w+) \k{ as } (\w+)";
  var_regex_639 : std::string = "(?<as>as) (\w+) \k{ as } (\w+)";
  regex_640 := "^a(?#xxx){3}c";
  var_regex_640 : std::string = "^a(?#xxx){3}c";
  regex_641 := "^a (?#xxx) (?#yyy) {3}c";
  regex_641_mod := "x";
  var_regex_641 : std::string = "^a (?#xxx) (?#yyy) {3}c";
  regex_642 := "(?|(a))";
  var_regex_642 : std::string = "(?|(a))";
  regex_643 := "(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)";
  var_regex_643 : std::string = "(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)";
  regex_644 := "(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)";
  var_regex_644 : std::string = "(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)";
  regex_645 := "(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)";
  var_regex_645 : std::string = "(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)";
  regex_646 := "(?|(?|(a)|(b))|(?|(c)|(d)))";
  var_regex_646 : std::string = "(?|(?|(a)|(b))|(?|(c)|(d)))";
  regex_647 := "(?|(?|(a)|(b))|(?|(c)|(d)))";
  var_regex_647 : std::string = "(?|(?|(a)|(b))|(?|(c)|(d)))";
  regex_648 := "(?|(?|(a)|(b))|(?|(c)|(d)))";
  var_regex_648 : std::string = "(?|(?|(a)|(b))|(?|(c)|(d)))";
  regex_649 := "(?|(?|(a)|(b))|(?|(c)|(d)))";
  var_regex_649 : std::string = "(?|(?|(a)|(b))|(?|(c)|(d)))";
  regex_650 := "(.)(?|(.)(.)x|(.)d)(.)";
  var_regex_650 : std::string = "(.)(?|(.)(.)x|(.)d)(.)";
  regex_651 := "(\N)(?|(\N)(\N)x|(\N)d)(\N)";
  var_regex_651 : std::string = "(\\N)(?|(\\N)(\\N)x|(\\N)d)(\\N)";
  regex_652 := "(?|(?<foo>x))";
  var_regex_652 : std::string = "(?|(?<foo>x))";
  regex_653 := "(?|(?<foo>x)|(?<bar>y))";
  var_regex_653 : std::string = "(?|(?<foo>x)|(?<bar>y))";
  regex_654 := "(?|(?<bar>y)|(?<foo>x))";
  var_regex_654 : std::string = "(?|(?<bar>y)|(?<foo>x))";
  regex_655 := "(?<bar>)(?|(?<foo>x))";
  var_regex_655 : std::string = "(?<bar>)(?|(?<foo>x))";
  regex_656 := "foo\Kbar";
  var_regex_656 : std::string = "foo\Kbar";
  regex_657 := "foo\t\n\r\f\a\ebar";
  var_regex_657 : std::string = "foo\t\n\r\f\a\ebar";
  regex_658 := "(foo)";
  regex_658_mod := "n";
  var_regex_658 : std::string = "(foo)";
  regex_659 := "(?-n)(foo)(?n)(bar)";
  regex_659_mod := "n";
  var_regex_659 : std::string = "(?-n)(foo)(?n)(bar)";
  regex_660 := "(?-n:(foo)(?n:(bar)))";
  regex_660_mod := "n";
  var_regex_660 : std::string = "(?-n:(foo)(?n:(bar)))";
  regex_661 := "foo # Match foo";
  regex_661_mod := "x";
  var_regex_661 : std::string = "foo # Match foo";
  regex_662 := "\x41\x42";
  var_regex_662 : std::string = "\x41\x42";
  regex_663 := "\101\o{102}";
  var_regex_663 : std::string = "\101\o{102}";
  run: (this) = {
    std::cout << "Running perl_tests_general:"<< std::endl;
    test(regex_0, 0, "abc", "abc", "y", "$&", "abc");
    test(regex_1, 1, "abc", "abc", "y", "$-[0]", "0");
    test(regex_2, 2, "abc", "abc", "y", "$+[0]", "3");
    test(regex_3, 3, "abc", "xbc", "n", "-", "-");
    test(regex_4, 4, "abc", "axc", "n", "-", "-");
    test(regex_5, 5, "abc", "abx", "n", "-", "-");
    test(regex_6, 6, "abc", "xabcy", "y", "$&", "abc");
    test(regex_7, 7, "abc", "xabcy", "y", "$-[0]", "1");
    test(regex_8, 8, "abc", "xabcy", "y", "$+[0]", "4");
    test(regex_9, 9, "abc", "ababc", "y", "$&", "abc");
    test(regex_10, 10, "abc", "ababc", "y", "$-[0]", "2");
    test(regex_11, 11, "abc", "ababc", "y", "$+[0]", "5");
    test(regex_12, 12, "ab*c", "abc", "y", "$&", "abc");
    test(regex_13, 13, "ab*c", "abc", "y", "$-[0]", "0");
    test(regex_14, 14, "ab*c", "abc", "y", "$+[0]", "3");
    test(regex_15, 15, "ab*bc", "abc", "y", "$&", "abc");
    test(regex_16, 16, "ab*bc", "abc", "y", "$-[0]", "0");
    test(regex_17, 17, "ab*bc", "abc", "y", "$+[0]", "3");
    test(regex_18, 18, "ab*bc", "abbc", "y", "$&", "abbc");
    test(regex_19, 19, "ab*bc", "abbc", "y", "$-[0]", "0");
    test(regex_20, 20, "ab*bc", "abbc", "y", "$+[0]", "4");
    test(regex_21, 21, "ab*bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_22, 22, "ab*bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_23, 23, "ab*bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_24, 24, ".{1}", "abbbbc", "y", "$&", "a");
    test(regex_25, 25, ".{1}", "abbbbc", "y", "$-[0]", "0");
    test(regex_26, 26, ".{1}", "abbbbc", "y", "$+[0]", "1");
    test(regex_27, 27, ".{3,4}", "abbbbc", "y", "$&", "abbb");
    test(regex_28, 28, ".{3,4}", "abbbbc", "y", "$-[0]", "0");
    test(regex_29, 29, ".{3,4}", "abbbbc", "y", "$+[0]", "4");
    test(regex_30, 30, "\\\\N{1}", "abbbbc", "y", "$&", "a");
    test(regex_31, 31, "\\\\N{1}", "abbbbc", "y", "$-[0]", "0");
    test(regex_32, 32, "\\\\N{1}", "abbbbc", "y", "$+[0]", "1");
    test(regex_33, 33, "\\\\N{3,4}", "abbbbc", "y", "$&", "abbb");
    test(regex_34, 34, "\\\\N{3,4}", "abbbbc", "y", "$-[0]", "0");
    test(regex_35, 35, "\\\\N{3,4}", "abbbbc", "y", "$+[0]", "4");
    test(regex_36, 36, "\\\\N{ 3 , 4 }", "abbbbc", "y", "$+[0]", "4");
    test(regex_37, 37, "ab{0,}bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_38, 38, "ab{0,}bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_39, 39, "ab{0,}bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_40, 40, "ab+bc", "abbc", "y", "$&", "abbc");
    test(regex_41, 41, "ab+bc", "abbc", "y", "$-[0]", "0");
    test(regex_42, 42, "ab+bc", "abbc", "y", "$+[0]", "4");
    test(regex_43, 43, "ab+bc", "abc", "n", "-", "-");
    test(regex_44, 44, "ab+bc", "abq", "n", "-", "-");
    test(regex_45, 45, "ab{1,}bc", "abq", "n", "-", "-");
    test(regex_46, 46, "ab+bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_47, 47, "ab+bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_48, 48, "ab+bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_49, 49, "ab{1,}bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_50, 50, "ab{1,}bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_51, 51, "ab{1,}bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_52, 52, "ab{1,3}bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_53, 53, "ab{1,3}bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_54, 54, "ab{1,3}bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_55, 55, "ab{3,4}bc", "abbbbc", "y", "$&", "abbbbc");
    test(regex_56, 56, "ab{3,4}bc", "abbbbc", "y", "$-[0]", "0");
    test(regex_57, 57, "ab{3,4}bc", "abbbbc", "y", "$+[0]", "6");
    test(regex_58, 58, "ab{4,5}bc", "abbbbc", "n", "-", "-");
    test(regex_59, 59, "ab?bc", "abbc", "y", "$&", "abbc");
    test(regex_60, 60, "ab?bc", "abc", "y", "$&", "abc");
    test(regex_61, 61, "ab{0,1}bc", "abc", "y", "$&", "abc");
    test(regex_62, 62, "ab?bc", "abbbbc", "n", "-", "-");
    test(regex_63, 63, "ab?c", "abc", "y", "$&", "abc");
    test(regex_64, 64, "ab{0,1}c", "abc", "y", "$&", "abc");
    test(regex_65, 65, "^abc\\$", "abc", "y", "$&", "abc");
    test(regex_66, 66, "^abc\\$", "abcc", "n", "-", "-");
    test(regex_67, 67, "^abc", "abcc", "y", "$&", "abc");
    test(regex_68, 68, "^abc\\$", "aabc", "n", "-", "-");
    test(regex_69, 69, "abc\\$", "aabc", "y", "$&", "abc");
    test(regex_70, 70, "abc\\$", "aabcd", "n", "-", "-");
    test(regex_71, 71, "^", "abc", "y", "$&", "");
    test(regex_72, 72, "\\$", "abc", "y", "$&", "");
    test(regex_73, 73, "a.c", "abc", "y", "$&", "abc");
    test(regex_74, 74, "a.c", "axc", "y", "$&", "axc");
    test(regex_75, 75, "a\\\\Nc", "abc", "y", "$&", "abc");
    test(regex_76, 76, "a.*c", "axyzc", "y", "$&", "axyzc");
    test(regex_77, 77, "a\\\\N*c", "axyzc", "y", "$&", "axyzc");
    test(regex_78, 78, "a.*c", "axyzd", "n", "-", "-");
    test(regex_79, 79, "a\\\\N*c", "axyzd", "n", "-", "-");
    test(regex_80, 80, "a[bc]d", "abc", "n", "-", "-");
    test(regex_81, 81, "a[bc]d", "abd", "y", "$&", "abd");
    test(regex_82, 82, "a[b]d", "abd", "y", "$&", "abd");
    test(regex_83, 83, "[a][b][d]", "abd", "y", "$&", "abd");
    test(regex_84, 84, ".[b].", "abd", "y", "$&", "abd");
    test(regex_85, 85, ".[b].", "aBd", "n", "-", "-");
    test(regex_86, 86, "a[b-d]e", "abd", "n", "-", "-");
    test(regex_87, 87, "a[b-d]e", "ace", "y", "$&", "ace");
    test(regex_88, 88, "a[b-d]", "aac", "y", "$&", "ac");
    test(regex_89, 89, "a[-b]", "a-", "y", "$&", "a-");
    test(regex_90, 90, "a[b-]", "a-", "y", "$&", "a-");
    test(regex_91, 91, "a]", "a]", "y", "$&", "a]");
    test(regex_92, 92, "a[]]b", "a]b", "y", "$&", "a]b");
    test(regex_93, 93, "a[^bc]d", "aed", "y", "$&", "aed");
    test(regex_94, 94, "a[^bc]d", "abd", "n", "-", "-");
    test(regex_95, 95, "a[^-b]c", "adc", "y", "$&", "adc");
    test(regex_96, 96, "a[^-b]c", "a-c", "n", "-", "-");
    test(regex_97, 97, "a[^]b]c", "a]c", "n", "-", "-");
    test(regex_98, 98, "a[^]b]c", "adc", "y", "$&", "adc");
    test(regex_99, 99, "\\ba\\b", "a-", "y", "-", "-");
    test(regex_100, 100, "\\ba\\b", "-a", "y", "-", "-");
    test(regex_101, 101, "\\ba\\b", "-a-", "y", "-", "-");
    test(regex_102, 102, "\\by\\b", "xy", "n", "-", "-");
    test(regex_103, 103, "\\by\\b", "yz", "n", "-", "-");
    test(regex_104, 104, "\\by\\b", "xyz", "n", "-", "-");
    test(regex_105, 105, "\\Ba\\B", "a-", "n", "-", "-");
    test(regex_106, 106, "\\Ba\\B", "-a", "n", "-", "-");
    test(regex_107, 107, "\\Ba\\B", "-a-", "n", "-", "-");
    test(regex_108, 108, "\\By\\b", "xy", "y", "-", "-");
    test(regex_109, 109, "\\By\\b", "xy", "y", "$-[0]", "1");
    test(regex_110, 110, "\\By\\b", "xy", "y", "$+[0]", "2");
    test(regex_111, 111, "\\By\\b", "xy", "y", "-", "-");
    test(regex_112, 112, "\\by\\B", "yz", "y", "-", "-");
    test(regex_113, 113, "\\By\\B", "xyz", "y", "-", "-");
    test(regex_114, 114, "\\b", "", "n", "-", "-");
    test(regex_115, 115, "\\B", "", "y", "-", "-");
    test(regex_116, 116, "\\w", "a", "y", "-", "-");
    test(regex_117, 117, "\\w", "-", "n", "-", "-");
    test(regex_118, 118, "\\W", "a", "n", "-", "-");
    test(regex_119, 119, "\\W", "-", "y", "-", "-");
    test(regex_120, 120, "a\\sb", "a b", "y", "-", "-");
    test(regex_121, 121, "a\\sb", "a-b", "n", "-", "-");
    test(regex_122, 122, "a\\Sb", "a b", "n", "-", "-");
    test(regex_123, 123, "a\\Sb", "a-b", "y", "-", "-");
    test(regex_124, 124, "\\d", "1", "y", "-", "-");
    test(regex_125, 125, "\\d", "-", "n", "-", "-");
    test(regex_126, 126, "\\D", "1", "n", "-", "-");
    test(regex_127, 127, "\\D", "-", "y", "-", "-");
    test(regex_128, 128, "[\\w]", "a", "y", "-", "-");
    test(regex_129, 129, "[\\w]", "-", "n", "-", "-");
    test(regex_130, 130, "[\\W]", "a", "n", "-", "-");
    test(regex_131, 131, "[\\W]", "-", "y", "-", "-");
    test(regex_132, 132, "a[\\s]b", "a b", "y", "-", "-");
    test(regex_133, 133, "a[\\s]b", "a-b", "n", "-", "-");
    test(regex_134, 134, "a[\\S]b", "a b", "n", "-", "-");
    test(regex_135, 135, "a[\\S]b", "a-b", "y", "-", "-");
    test(regex_136, 136, "[\\d]", "1", "y", "-", "-");
    test(regex_137, 137, "[\\d]", "-", "n", "-", "-");
    test(regex_138, 138, "[\\D]", "1", "n", "-", "-");
    test(regex_139, 139, "[\\D]", "-", "y", "-", "-");
    test(regex_140, 140, "ab|cd", "abc", "y", "$&", "ab");
    test(regex_141, 141, "ab|cd", "abcd", "y", "$&", "ab");
    test(regex_142, 142, "()ef", "def", "y", "$&-$1", "ef-");
    test(regex_143, 143, "()ef", "def", "y", "$-[0]", "1");
    test(regex_144, 144, "()ef", "def", "y", "$+[0]", "3");
    test(regex_145, 145, "()ef", "def", "y", "$-[1]", "1");
    test(regex_146, 146, "()ef", "def", "y", "$+[1]", "1");
    test(regex_147, 147, "\\$b", "b", "n", "-", "-");
    test(regex_148, 148, "a\\(b", "a(b", "y", "$&-$1", "a(b-");
    test(regex_149, 149, "a\\(*b", "ab", "y", "$&", "ab");
    test(regex_150, 150, "a\\(*b", "a((b", "y", "$&", "a((b");
    test(regex_151, 151, "a\\\\b", "a\\b", "y", "$&", "a\\b");
    test(regex_152, 152, "((a))", "abc", "y", "$&-$1-$2", "a-a-a");
    test(regex_153, 153, "((a))", "abc", "y", "$-[0]-$-[1]-$-[2]", "0-0-0");
    test(regex_154, 154, "((a))", "abc", "y", "$+[0]-$+[1]-$+[2]", "1-1-1");
    test(regex_155, 155, "(foo)(\\g-2)", "foofoo", "y", "$1-$2", "foo-foo");
    test(regex_156, 156, "(foo)(\\g-2)(foo)(\\g-2)", "foofoofoofoo", "y", "$1-$2-$3-$4", "foo-foo-foo-foo");
    test(regex_157, 157, "(([abc]+) \\g-1)(([abc]+) \\g{-1})", "abc abccba cba", "y", "$2-$4", "abc-cba");
    test(regex_158, 158, "(a)(b)(c)\\g1\\g2\\g3", "abcabc", "y", "$1$2$3", "abc");
    test(regex_159, 159, "abc", "ABC", "y", "$&", "ABC");
    test(regex_160, 160, "abc", "XBC", "n", "-", "-");
    test(regex_161, 161, "abc", "AXC", "n", "-", "-");
    test(regex_162, 162, "abc", "ABX", "n", "-", "-");
    test(regex_163, 163, "abc", "XABCY", "y", "$&", "ABC");
    test(regex_164, 164, "abc", "ABABC", "y", "$&", "ABC");
    test(regex_165, 165, "ab*c", "ABC", "y", "$&", "ABC");
    test(regex_166, 166, "ab*bc", "ABC", "y", "$&", "ABC");
    test(regex_167, 167, "ab*bc", "ABBC", "y", "$&", "ABBC");
    test(regex_168, 168, "ab*?bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_169, 169, "ab{0,}?bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_170, 170, "ab+?bc", "ABBC", "y", "$&", "ABBC");
    test(regex_171, 171, "ab+bc", "ABC", "n", "-", "-");
    test(regex_172, 172, "ab+bc", "ABQ", "n", "-", "-");
    test(regex_173, 173, "ab{1,}bc", "ABQ", "n", "-", "-");
    test(regex_174, 174, "ab+bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_175, 175, "ab{1,}?bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_176, 176, "ab{1,3}?bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_177, 177, "ab{3,4}?bc", "ABBBBC", "y", "$&", "ABBBBC");
    test(regex_178, 178, "ab{4,5}?bc", "ABBBBC", "n", "-", "-");
    test(regex_179, 179, "ab??bc", "ABBC", "y", "$&", "ABBC");
    test(regex_180, 180, "ab??bc", "ABC", "y", "$&", "ABC");
    test(regex_181, 181, "ab{0,1}?bc", "ABC", "y", "$&", "ABC");
    test(regex_182, 182, "ab??bc", "ABBBBC", "n", "-", "-");
    test(regex_183, 183, "ab??c", "ABC", "y", "$&", "ABC");
    test(regex_184, 184, "ab{0,1}?c", "ABC", "y", "$&", "ABC");
    test(regex_185, 185, "^abc\\$", "ABC", "y", "$&", "ABC");
    test(regex_186, 186, "^abc\\$", "ABCC", "n", "-", "-");
    test(regex_187, 187, "^abc", "ABCC", "y", "$&", "ABC");
    test(regex_188, 188, "^abc\\$", "AABC", "n", "-", "-");
    test(regex_189, 189, "abc\\$", "AABC", "y", "$&", "ABC");
    test(regex_190, 190, "^", "ABC", "y", "$&", "");
    test(regex_191, 191, "\\$", "ABC", "y", "$&", "");
    test(regex_192, 192, "a.c", "ABC", "y", "$&", "ABC");
    test(regex_193, 193, "a.c", "AXC", "y", "$&", "AXC");
    test(regex_194, 194, "a\\\\Nc", "ABC", "y", "$&", "ABC");
    test(regex_195, 195, "a.*?c", "AXYZC", "y", "$&", "AXYZC");
    test(regex_196, 196, "a.*c", "AXYZD", "n", "-", "-");
    test(regex_197, 197, "a[bc]d", "ABC", "n", "-", "-");
    test(regex_198, 198, "a[bc]d", "ABD", "y", "$&", "ABD");
    test(regex_199, 199, "a[b-d]e", "ABD", "n", "-", "-");
    test(regex_200, 200, "a[b-d]e", "ACE", "y", "$&", "ACE");
    test(regex_201, 201, "a[b-d]", "AAC", "y", "$&", "AC");
    test(regex_202, 202, "a[-b]", "A-", "y", "$&", "A-");
    test(regex_203, 203, "a[b-]", "A-", "y", "$&", "A-");
    test(regex_204, 204, "a]", "A]", "y", "$&", "A]");
    test(regex_205, 205, "a[]]b", "A]B", "y", "$&", "A]B");
    test(regex_206, 206, "a[^bc]d", "AED", "y", "$&", "AED");
    test(regex_207, 207, "a[^bc]d", "ABD", "n", "-", "-");
    test(regex_208, 208, "a[^-b]c", "ADC", "y", "$&", "ADC");
    test(regex_209, 209, "a[^-b]c", "A-C", "n", "-", "-");
    test(regex_210, 210, "a[^]b]c", "A]C", "n", "-", "-");
    test(regex_211, 211, "a[^]b]c", "ADC", "y", "$&", "ADC");
    test(regex_212, 212, "ab|cd", "ABC", "y", "$&", "AB");
    test(regex_213, 213, "ab|cd", "ABCD", "y", "$&", "AB");
    test(regex_214, 214, "()ef", "DEF", "y", "$&-$1", "EF-");
    test(regex_215, 215, "\\$b", "B", "n", "-", "-");
    test(regex_216, 216, "a\\(b", "A(B", "y", "$&-$1", "A(B-");
    test(regex_217, 217, "a\\(*b", "AB", "y", "$&", "AB");
    test(regex_218, 218, "a\\(*b", "A((B", "y", "$&", "A((B");
    test(regex_219, 219, "a\\\\b", "A\\B", "y", "$&", "A\\B");
    test(regex_220, 220, "((a))", "ABC", "y", "$&-$1-$2", "A-A-A");
    test(regex_221, 221, "(a)b(c)", "ABC", "y", "$&-$1-$2", "ABC-A-C");
    test(regex_222, 222, "a+b+c", "AABBABC", "y", "$&", "ABC");
    test(regex_223, 223, "a{1,}b{1,}c", "AABBABC", "y", "$&", "ABC");
    test(regex_224, 224, "a.+?c", "ABCABC", "y", "$&", "ABC");
    test(regex_225, 225, "a.*?c", "ABCABC", "y", "$&", "ABC");
    test(regex_226, 226, "a.{0,5}?c", "ABCABC", "y", "$&", "ABC");
    test(regex_227, 227, "(a+|b)*", "AB", "y", "$&-$1", "AB-B");
    test(regex_228, 228, "(a+|b){0,}", "AB", "y", "$&-$1", "AB-B");
    test(regex_229, 229, "(a+|b)+", "AB", "y", "$&-$1", "AB-B");
    test(regex_230, 230, "(a+|b){1,}", "AB", "y", "$&-$1", "AB-B");
    test(regex_231, 231, "(a+|b)?", "AB", "y", "$&-$1", "A-A");
    test(regex_232, 232, "(a+|b){0,1}", "AB", "y", "$&-$1", "A-A");
    test(regex_233, 233, "(a+|b){0,1}?", "AB", "y", "$&-$1", "-");
    test(regex_234, 234, "[^ab]*", "CDE", "y", "$&", "CDE");
    test(regex_235, 235, "abc", "", "n", "-", "-");
    test(regex_236, 236, "a*", "", "y", "$&", "");
    test(regex_237, 237, "([abc])*d", "ABBBCD", "y", "$&-$1", "ABBBCD-C");
    test(regex_238, 238, "([abc])*bcd", "ABCD", "y", "$&-$1", "ABCD-A");
    test(regex_239, 239, "a|b|c|d|e", "E", "y", "$&", "E");
    test(regex_240, 240, "(a|b|c|d|e)f", "EF", "y", "$&-$1", "EF-E");
    test(regex_241, 241, "abcd*efg", "ABCDEFG", "y", "$&", "ABCDEFG");
    test(regex_242, 242, "ab*", "XABYABBBZ", "y", "$&", "AB");
    test(regex_243, 243, "ab*", "XAYABBBZ", "y", "$&", "A");
    test(regex_244, 244, "(ab|cd)e", "ABCDE", "y", "$&-$1", "CDE-CD");
    test(regex_245, 245, "[abhgefdc]ij", "HIJ", "y", "$&", "HIJ");
    test(regex_246, 246, "^(ab|cd)e", "ABCDE", "n", "x$1y", "XY");
    test(regex_247, 247, "(abc|)ef", "ABCDEF", "y", "$&-$1", "EF-");
    test(regex_248, 248, "(a|b)c*d", "ABCD", "y", "$&-$1", "BCD-B");
    test(regex_249, 249, "(ab|ab*)bc", "ABC", "y", "$&-$1", "ABC-A");
    test(regex_250, 250, "a([bc]*)c*", "ABC", "y", "$&-$1", "ABC-BC");
    test(regex_251, 251, "a([bc]*)(c*d)", "ABCD", "y", "$&-$1-$2", "ABCD-BC-D");
    test(regex_252, 252, "a([bc]+)(c*d)", "ABCD", "y", "$&-$1-$2", "ABCD-BC-D");
    test(regex_253, 253, "a([bc]*)(c+d)", "ABCD", "y", "$&-$1-$2", "ABCD-B-CD");
    test(regex_254, 254, "a[bcd]*dcdcde", "ADCDCDE", "y", "$&", "ADCDCDE");
    test(regex_255, 255, "a[bcd]+dcdcde", "ADCDCDE", "n", "-", "-");
    test(regex_256, 256, "(ab|a)b*c", "ABC", "y", "$&-$1", "ABC-AB");
    test(regex_257, 257, "((a)(b)c)(d)", "ABCD", "y", "$1-$2-$3-$4", "ABC-A-B-D");
    test(regex_258, 258, "[a-zA-Z_][a-zA-Z0-9_]*", "ALPHA", "y", "$&", "ALPHA");
    test(regex_259, 259, "^a(bc+|b[eh])g|.h\\$", "ABH", "y", "$&-$1", "BH-");
    test(regex_260, 260, "(bc+d\\$|ef*g.|h?i(j|k))", "EFFGZ", "y", "$&-$1-$2", "EFFGZ-EFFGZ-");
    test(regex_261, 261, "(bc+d\\$|ef*g.|h?i(j|k))", "IJ", "y", "$&-$1-$2", "IJ-IJ-J");
    test(regex_262, 262, "(bc+d\\$|ef*g.|h?i(j|k))", "EFFG", "n", "-", "-");
    test(regex_263, 263, "(bc+d\\$|ef*g.|h?i(j|k))", "BCDD", "n", "-", "-");
    test(regex_264, 264, "(bc+d\\$|ef*g.|h?i(j|k))", "REFFGZ", "y", "$&-$1-$2", "EFFGZ-EFFGZ-");
    test(regex_265, 265, "((((((((((a))))))))))", "A", "y", "$10", "A");
    test(regex_266, 266, "((((((((((a))))))))))\\10", "AA", "y", "$&", "AA");
    test(regex_267, 267, "(((((((((a)))))))))", "A", "y", "$&", "A");
    test(regex_268, 268, "multiple words of text", "UH-UH", "n", "-", "-");
    test(regex_269, 269, "multiple words", "MULTIPLE WORDS, YEAH", "y", "$&", "MULTIPLE WORDS");
    test(regex_270, 270, "(.*)c(.*)", "ABCDE", "y", "$&-$1-$2", "ABCDE-AB-DE");
    test(regex_271, 271, "\\((.*), (.*)\\)", "(A, B)", "y", "($2, $1)", "(B, A)");
    test(regex_272, 272, "[k]", "AB", "n", "-", "-");
    test(regex_273, 273, "abcd", "ABCD", "y", "$&", "ABCD");
    test(regex_274, 274, "a(bc)d", "ABCD", "y", "$1", "BC");
    test(regex_275, 275, "a[-]?c", "AC", "y", "$&", "AC");
    test(regex_276, 276, "(abc)\\1", "ABCABC", "y", "$1", "ABC");
    test(regex_277, 277, "([a-c]*)\\1", "ABCABC", "y", "$1", "ABC");
    test(regex_278, 278, "a++a", "aaaaa", "n", "-", "-");
    test(regex_279, 279, "a*+a", "aaaaa", "n", "-", "-");
    test(regex_280, 280, "a{1,5}+a", "aaaaa", "n", "-", "-");
    test(regex_281, 281, "a?+a", "ab", "n", "-", "-");
    test(regex_282, 282, "a++b", "aaaaab", "y", "$&", "aaaaab");
    test(regex_283, 283, "a*+b", "aaaaab", "y", "$&", "aaaaab");
    test(regex_284, 284, "a{1,5}+b", "aaaaab", "y", "$&", "aaaaab");
    test(regex_285, 285, "a?+b", "ab", "y", "$&", "ab");
    test(regex_286, 286, "fooa++a", "fooaaaaa", "n", "-", "-");
    test(regex_287, 287, "fooa*+a", "fooaaaaa", "n", "-", "-");
    test(regex_288, 288, "fooa{1,5}+a", "fooaaaaa", "n", "-", "-");
    test(regex_289, 289, "fooa?+a", "fooab", "n", "-", "-");
    test(regex_290, 290, "fooa++b", "fooaaaaab", "y", "$&", "fooaaaaab");
    test(regex_291, 291, "fooa*+b", "fooaaaaab", "y", "$&", "fooaaaaab");
    test(regex_292, 292, "fooa{1,5}+b", "fooaaaaab", "y", "$&", "fooaaaaab");
    test(regex_293, 293, "fooa?+b", "fooab", "y", "$&", "fooab");
    test(regex_294, 294, "(aA)++(aA)", "aAaAaAaAaA", "n", "-", "aAaAaAaAaA");
    test(regex_295, 295, "(aA|bB)++(aA|bB)", "aAaAbBaAbB", "n", "-", "aAaAbBaAbB");
    test(regex_296, 296, "(aA)*+(aA)", "aAaAaAaAaA", "n", "-", "aAaAaAaAaA");
    test(regex_297, 297, "(aA|bB)*+(aA|bB)", "aAaAbBaAaA", "n", "-", "aAaAbBaAaA");
    test(regex_298, 298, "(aA){1,5}+(aA)", "aAaAaAaAaA", "n", "-", "aAaAaAaAaA");
    test(regex_299, 299, "(aA|bB){1,5}+(aA|bB)", "aAaAbBaAaA", "n", "-", "aAaAbBaAaA");
    test(regex_300, 300, "(aA)?+(aA)", "aAb", "n", "-", "aAb");
    test(regex_301, 301, "(aA|bB)?+(aA|bB)", "bBb", "n", "-", "bBb");
    test(regex_302, 302, "(aA)++b", "aAaAaAaAaAb", "y", "$&", "aAaAaAaAaAb");
    test(regex_303, 303, "(aA|bB)++b", "aAbBaAaAbBb", "y", "$&", "aAbBaAaAbBb");
    test(regex_304, 304, "(aA)*+b", "aAaAaAaAaAb", "y", "$&", "aAaAaAaAaAb");
    test(regex_305, 305, "(aA|bB)*+b", "bBbBbBbBbBb", "y", "$&", "bBbBbBbBbBb");
    test(regex_306, 306, "(aA){1,5}+b", "aAaAaAaAaAb", "y", "$&", "aAaAaAaAaAb");
    test(regex_307, 307, "(aA|bB){1,5}+b", "bBaAbBaAbBb", "y", "$&", "bBaAbBaAbBb");
    test(regex_308, 308, "(aA)?+b", "aAb", "y", "$&", "aAb");
    test(regex_309, 309, "(aA|bB)?+b", "bBb", "y", "$&", "bBb");
    test(regex_310, 310, "foo(aA)++(aA)", "fooaAaAaAaAaA", "n", "-", "fooaAaAaAaAaA");
    test(regex_311, 311, "foo(aA|bB)++(aA|bB)", "foobBbBbBaAaA", "n", "-", "foobBbBbBaAaA");
    test(regex_312, 312, "foo(aA)*+(aA)", "fooaAaAaAaAaA", "n", "-", "fooaAaAaAaAaA");
    test(regex_313, 313, "foo(aA|bB)*+(aA|bB)", "foobBaAbBaAaA", "n", "-", "foobBaAbBaAaA");
    test(regex_314, 314, "foo(aA){1,5}+(aA)", "fooaAaAaAaAaA", "n", "-", "fooaAaAaAaAaA");
    test(regex_315, 315, "foo(aA|bB){1,5}+(aA|bB)", "fooaAbBbBaAaA", "n", "-", "fooaAbBbBaAaA");
    test(regex_316, 316, "foo(aA)?+(aA)", "fooaAb", "n", "-", "fooaAb");
    test(regex_317, 317, "foo(aA|bB)?+(aA|bB)", "foobBb", "n", "-", "foobBb");
    test(regex_318, 318, "foo(aA)++b", "fooaAaAaAaAaAb", "y", "$&", "fooaAaAaAaAaAb");
    test(regex_319, 319, "foo(aA|bB)++b", "foobBaAbBaAbBb", "y", "$&", "foobBaAbBaAbBb");
    test(regex_320, 320, "foo(aA)*+b", "fooaAaAaAaAaAb", "y", "$&", "fooaAaAaAaAaAb");
    test(regex_321, 321, "foo(aA|bB)*+b", "foobBbBaAaAaAb", "y", "$&", "foobBbBaAaAaAb");
    test(regex_322, 322, "foo(aA){1,5}+b", "fooaAaAaAaAaAb", "y", "$&", "fooaAaAaAaAaAb");
    test(regex_323, 323, "foo(aA|bB){1,5}+b", "foobBaAaAaAaAb", "y", "$&", "foobBaAaAaAaAb");
    test(regex_324, 324, "foo(aA)?+b", "fooaAb", "y", "$&", "fooaAb");
    test(regex_325, 325, "foo(aA|bB)?+b", "foobBb", "y", "$&", "foobBb");
    test(regex_326, 326, "foo(\\h+)bar", "foo\tbar", "y", "$1", "\t");
    test(regex_327, 327, "(\\H+)(\\h)", "foo\tbar", "y", "$1-$2", "foo-\t");
    test(regex_328, 328, "(\\h+)(\\H)", "foo\tbar", "y", "$1-$2", "\t-b");
    test(regex_329, 329, "foo(\\h)bar", "foo\tbar", "y", "$1", "\t");
    test(regex_330, 330, "(\\H)(\\h)", "foo\tbar", "y", "$1-$2", "o-\t");
    test(regex_331, 331, "(\\h)(\\H)", "foo\tbar", "y", "$1-$2", "\t-b");
    test(regex_332, 332, "foo(\\v+)bar", "foo\r\n\r\n\nbar", "y", "$1", "\r\n\r\n\n");
    test(regex_333, 333, "(\\V+)(\\v)", "foo\r\n\r\n\nbar", "y", "$1-$2", "foo-\r");
    test(regex_334, 334, "(\\v+)(\\V)", "foo\r\n\r\n\nbar", "y", "$1-$2", "\r\n\r\n\n-b");
    test(regex_335, 335, "foo(\\v)bar", "foo\rbar", "y", "$1", "\r");
    test(regex_336, 336, "(\\V)(\\v)", "foo\rbar", "y", "$1-$2", "o-\r");
    test(regex_337, 337, "(\\v)(\\V)", "foo\rbar", "y", "$1-$2", "\r-b");
    test(regex_338, 338, "(?:(?i)a)b", "ab", "y", "$&", "ab");
    test(regex_339, 339, "((?i)a)b", "ab", "y", "$&:$1", "ab:a");
    test(regex_340, 340, "(?:(?i)a)b", "Ab", "y", "$&", "Ab");
    test(regex_341, 341, "((?i)a)b", "Ab", "y", "$&:$1", "Ab:A");
    test(regex_342, 342, "(?:(?i)a)b", "aB", "n", "-", "-");
    test(regex_343, 343, "((?i)a)b", "aB", "n", "-", "-");
    test(regex_344, 344, "(?i:a)b", "ab", "y", "$&", "ab");
    test(regex_345, 345, "((?i:a))b", "ab", "y", "$&:$1", "ab:a");
    test(regex_346, 346, "(?i:a)b", "Ab", "y", "$&", "Ab");
    test(regex_347, 347, "((?i:a))b", "Ab", "y", "$&:$1", "Ab:A");
    test(regex_348, 348, "(?i:a)b", "aB", "n", "-", "-");
    test(regex_349, 349, "((?i:a))b", "aB", "n", "-", "-");
    test(regex_350, 350, "(?:(?-i)a)b", "ab", "y", "$&", "ab");
    test(regex_351, 351, "((?-i)a)b", "ab", "y", "$&:$1", "ab:a");
    test(regex_352, 352, "(?:(?-i)a)b", "aB", "y", "$&", "aB");
    test(regex_353, 353, "((?-i)a)b", "aB", "y", "$&:$1", "aB:a");
    test(regex_354, 354, "(?:(?-i)a)b", "Ab", "n", "-", "-");
    test(regex_355, 355, "((?-i)a)b", "Ab", "n", "-", "-");
    test(regex_356, 356, "(?:(?-i)a)b", "aB", "y", "$&", "aB");
    test(regex_357, 357, "((?-i)a)b", "aB", "y", "$1", "a");
    test(regex_358, 358, "(?:(?-i)a)b", "AB", "n", "-", "-");
    test(regex_359, 359, "((?-i)a)b", "AB", "n", "-", "-");
    test(regex_360, 360, "(?-i:a)b", "ab", "y", "$&", "ab");
    test(regex_361, 361, "((?-i:a))b", "ab", "y", "$&:$1", "ab:a");
    test(regex_362, 362, "(?-i:a)b", "aB", "y", "$&", "aB");
    test(regex_363, 363, "((?-i:a))b", "aB", "y", "$&:$1", "aB:a");
    test(regex_364, 364, "(?-i:a)b", "Ab", "n", "-", "-");
    test(regex_365, 365, "((?-i:a))b", "Ab", "n", "-", "-");
    test(regex_366, 366, "(?-i:a)b", "aB", "y", "$&", "aB");
    test(regex_367, 367, "((?-i:a))b", "aB", "y", "$1", "a");
    test(regex_368, 368, "(?-i:a)b", "AB", "n", "-", "-");
    test(regex_369, 369, "((?-i:a))b", "AB", "n", "-", "-");
    test(regex_370, 370, "((?-i:a.))b", "a\nB", "n", "-", "-");
    test(regex_371, 371, "((?-i:a\\\\N))b", "a\nB", "n", "-", "-");
    test(regex_372, 372, "((?s-i:a.))b", "a\nB", "y", "$1", "a\n");
    test(regex_373, 373, "((?s-i:a\\\\N))b", "a\nB", "n", "-", "-");
    test(regex_374, 374, "((?s-i:a.))b", "B\nB", "n", "-", "-");
    test(regex_375, 375, "((?s-i:a\\\\N))b", "B\nB", "n", "-", "-");
    test(regex_376, 376, "^(?:a?b?)*\\$", "a--", "n", "-", "-");
    test(regex_377, 377, "((?s)^a(.))((?m)^b\\$)", "a\nb\nc\n", "y", "$1;$2;$3", "a\n;\n;b");
    test(regex_378, 378, "((?m)^b\\$)", "a\nb\nc\n", "y", "$1", "b");
    test(regex_379, 379, "(?m)^b", "a\nb\n", "y", "$&", "b");
    test(regex_380, 380, "(?m)^(b)", "a\nb\n", "y", "$1", "b");
    test(regex_381, 381, "((?m)^b)", "a\nb\n", "y", "$1", "b");
    test(regex_382, 382, "\\n((?m)^b)", "a\nb\n", "y", "$1", "b");
    test(regex_383, 383, "^b", "a\nb\nc\n", "n", "-", "-");
    test(regex_384, 384, "()^b", "a\nb\nc\n", "n", "-", "-");
    test(regex_385, 385, "((?m)^b)", "a\nb\nc\n", "y", "$1", "b");
    test(regex_386, 386, "\\Z", "a\nb\n", "y", "$-[0]", "3");
    test(regex_387, 387, "\\z", "a\nb\n", "y", "$-[0]", "4");
    test(regex_388, 388, "\\$", "a\nb\n", "y", "$-[0]", "3");
    test(regex_389, 389, "\\Z", "b\na\n", "y", "$-[0]", "3");
    test(regex_390, 390, "\\z", "b\na\n", "y", "$-[0]", "4");
    test(regex_391, 391, "\\$", "b\na\n", "y", "$-[0]", "3");
    test(regex_392, 392, "\\Z", "b\na", "y", "$-[0]", "3");
    test(regex_393, 393, "\\z", "b\na", "y", "$-[0]", "3");
    test(regex_394, 394, "\\$", "b\na", "y", "$-[0]", "3");
    test(regex_395, 395, "\\Z", "a\nb\n", "y", "$-[0]", "3");
    test(regex_396, 396, "\\z", "a\nb\n", "y", "$-[0]", "4");
    test(regex_397, 397, "\\$", "a\nb\n", "y", "$-[0]", "1");
    test(regex_398, 398, "\\Z", "b\na\n", "y", "$-[0]", "3");
    test(regex_399, 399, "\\z", "b\na\n", "y", "$-[0]", "4");
    test(regex_400, 400, "\\$", "b\na\n", "y", "$-[0]", "1");
    test(regex_401, 401, "\\Z", "b\na", "y", "$-[0]", "3");
    test(regex_402, 402, "\\z", "b\na", "y", "$-[0]", "3");
    test(regex_403, 403, "\\$", "b\na", "y", "$-[0]", "1");
    test(regex_404, 404, "a\\Z", "a\nb\n", "n", "-", "-");
    test(regex_405, 405, "a\\z", "a\nb\n", "n", "-", "-");
    test(regex_406, 406, "a\\$", "a\nb\n", "n", "-", "-");
    test(regex_407, 407, "a\\Z", "b\na\n", "y", "$-[0]", "2");
    test(regex_408, 408, "a\\z", "b\na\n", "n", "-", "-");
    test(regex_409, 409, "a\\$", "b\na\n", "y", "$-[0]", "2");
    test(regex_410, 410, "a\\Z", "b\na", "y", "$-[0]", "2");
    test(regex_411, 411, "a\\z", "b\na", "y", "$-[0]", "2");
    test(regex_412, 412, "a\\$", "b\na", "y", "$-[0]", "2");
    test(regex_413, 413, "a\\Z", "a\nb\n", "n", "-", "-");
    test(regex_414, 414, "a\\z", "a\nb\n", "n", "-", "-");
    test(regex_415, 415, "a\\$", "a\nb\n", "y", "$-[0]", "0");
    test(regex_416, 416, "a\\Z", "b\na\n", "y", "$-[0]", "2");
    test(regex_417, 417, "a\\z", "b\na\n", "n", "-", "-");
    test(regex_418, 418, "a\\$", "b\na\n", "y", "$-[0]", "2");
    test(regex_419, 419, "a\\Z", "b\na", "y", "$-[0]", "2");
    test(regex_420, 420, "a\\z", "b\na", "y", "$-[0]", "2");
    test(regex_421, 421, "a\\$", "b\na", "y", "$-[0]", "2");
    test(regex_422, 422, "aa\\Z", "aa\nb\n", "n", "-", "-");
    test(regex_423, 423, "aa\\z", "aa\nb\n", "n", "-", "-");
    test(regex_424, 424, "aa\\$", "aa\nb\n", "n", "-", "-");
    test(regex_425, 425, "aa\\Z", "b\naa\n", "y", "$-[0]", "2");
    test(regex_426, 426, "aa\\z", "b\naa\n", "n", "-", "-");
    test(regex_427, 427, "aa\\$", "b\naa\n", "y", "$-[0]", "2");
    test(regex_428, 428, "aa\\Z", "b\naa", "y", "$-[0]", "2");
    test(regex_429, 429, "aa\\z", "b\naa", "y", "$-[0]", "2");
    test(regex_430, 430, "aa\\$", "b\naa", "y", "$-[0]", "2");
    test(regex_431, 431, "aa\\Z", "aa\nb\n", "n", "-", "-");
    test(regex_432, 432, "aa\\z", "aa\nb\n", "n", "-", "-");
    test(regex_433, 433, "aa\\$", "aa\nb\n", "y", "$-[0]", "0");
    test(regex_434, 434, "aa\\Z", "b\naa\n", "y", "$-[0]", "2");
    test(regex_435, 435, "aa\\z", "b\naa\n", "n", "-", "-");
    test(regex_436, 436, "aa\\$", "b\naa\n", "y", "$-[0]", "2");
    test(regex_437, 437, "aa\\Z", "b\naa", "y", "$-[0]", "2");
    test(regex_438, 438, "aa\\z", "b\naa", "y", "$-[0]", "2");
    test(regex_439, 439, "aa\\$", "b\naa", "y", "$-[0]", "2");
    test(regex_440, 440, "aa\\Z", "ac\nb\n", "n", "-", "-");
    test(regex_441, 441, "aa\\z", "ac\nb\n", "n", "-", "-");
    test(regex_442, 442, "aa\\$", "ac\nb\n", "n", "-", "-");
    test(regex_443, 443, "aa\\Z", "b\nac\n", "n", "-", "-");
    test(regex_444, 444, "aa\\z", "b\nac\n", "n", "-", "-");
    test(regex_445, 445, "aa\\$", "b\nac\n", "n", "-", "-");
    test(regex_446, 446, "aa\\Z", "b\nac", "n", "-", "-");
    test(regex_447, 447, "aa\\z", "b\nac", "n", "-", "-");
    test(regex_448, 448, "aa\\$", "b\nac", "n", "-", "-");
    test(regex_449, 449, "aa\\Z", "ac\nb\n", "n", "-", "-");
    test(regex_450, 450, "aa\\z", "ac\nb\n", "n", "-", "-");
    test(regex_451, 451, "aa\\$", "ac\nb\n", "n", "-", "-");
    test(regex_452, 452, "aa\\Z", "b\nac\n", "n", "-", "-");
    test(regex_453, 453, "aa\\z", "b\nac\n", "n", "-", "-");
    test(regex_454, 454, "aa\\$", "b\nac\n", "n", "-", "-");
    test(regex_455, 455, "aa\\Z", "b\nac", "n", "-", "-");
    test(regex_456, 456, "aa\\z", "b\nac", "n", "-", "-");
    test(regex_457, 457, "aa\\$", "b\nac", "n", "-", "-");
    test(regex_458, 458, "aa\\Z", "ca\nb\n", "n", "-", "-");
    test(regex_459, 459, "aa\\z", "ca\nb\n", "n", "-", "-");
    test(regex_460, 460, "aa\\$", "ca\nb\n", "n", "-", "-");
    test(regex_461, 461, "aa\\Z", "b\nca\n", "n", "-", "-");
    test(regex_462, 462, "aa\\z", "b\nca\n", "n", "-", "-");
    test(regex_463, 463, "aa\\$", "b\nca\n", "n", "-", "-");
    test(regex_464, 464, "aa\\Z", "b\nca", "n", "-", "-");
    test(regex_465, 465, "aa\\z", "b\nca", "n", "-", "-");
    test(regex_466, 466, "aa\\$", "b\nca", "n", "-", "-");
    test(regex_467, 467, "aa\\Z", "ca\nb\n", "n", "-", "-");
    test(regex_468, 468, "aa\\z", "ca\nb\n", "n", "-", "-");
    test(regex_469, 469, "aa\\$", "ca\nb\n", "n", "-", "-");
    test(regex_470, 470, "aa\\Z", "b\nca\n", "n", "-", "-");
    test(regex_471, 471, "aa\\z", "b\nca\n", "n", "-", "-");
    test(regex_472, 472, "aa\\$", "b\nca\n", "n", "-", "-");
    test(regex_473, 473, "aa\\Z", "b\nca", "n", "-", "-");
    test(regex_474, 474, "aa\\z", "b\nca", "n", "-", "-");
    test(regex_475, 475, "aa\\$", "b\nca", "n", "-", "-");
    test(regex_476, 476, "ab\\Z", "ab\nb\n", "n", "-", "-");
    test(regex_477, 477, "ab\\z", "ab\nb\n", "n", "-", "-");
    test(regex_478, 478, "ab\\$", "ab\nb\n", "n", "-", "-");
    test(regex_479, 479, "ab\\Z", "b\nab\n", "y", "$-[0]", "2");
    test(regex_480, 480, "ab\\z", "b\nab\n", "n", "-", "-");
    test(regex_481, 481, "ab\\$", "b\nab\n", "y", "$-[0]", "2");
    test(regex_482, 482, "ab\\Z", "b\nab", "y", "$-[0]", "2");
    test(regex_483, 483, "ab\\z", "b\nab", "y", "$-[0]", "2");
    test(regex_484, 484, "ab\\$", "b\nab", "y", "$-[0]", "2");
    test(regex_485, 485, "ab\\Z", "ab\nb\n", "n", "-", "-");
    test(regex_486, 486, "ab\\z", "ab\nb\n", "n", "-", "-");
    test(regex_487, 487, "ab\\$", "ab\nb\n", "y", "$-[0]", "0");
    test(regex_488, 488, "ab\\Z", "b\nab\n", "y", "$-[0]", "2");
    test(regex_489, 489, "ab\\z", "b\nab\n", "n", "-", "-");
    test(regex_490, 490, "ab\\$", "b\nab\n", "y", "$-[0]", "2");
    test(regex_491, 491, "ab\\Z", "b\nab", "y", "$-[0]", "2");
    test(regex_492, 492, "ab\\z", "b\nab", "y", "$-[0]", "2");
    test(regex_493, 493, "ab\\$", "b\nab", "y", "$-[0]", "2");
    test(regex_494, 494, "ab\\Z", "ac\nb\n", "n", "-", "-");
    test(regex_495, 495, "ab\\z", "ac\nb\n", "n", "-", "-");
    test(regex_496, 496, "ab\\$", "ac\nb\n", "n", "-", "-");
    test(regex_497, 497, "ab\\Z", "b\nac\n", "n", "-", "-");
    test(regex_498, 498, "ab\\z", "b\nac\n", "n", "-", "-");
    test(regex_499, 499, "ab\\$", "b\nac\n", "n", "-", "-");
    test(regex_500, 500, "ab\\Z", "b\nac", "n", "-", "-");
    test(regex_501, 501, "ab\\z", "b\nac", "n", "-", "-");
    test(regex_502, 502, "ab\\$", "b\nac", "n", "-", "-");
    test(regex_503, 503, "ab\\Z", "ac\nb\n", "n", "-", "-");
    test(regex_504, 504, "ab\\z", "ac\nb\n", "n", "-", "-");
    test(regex_505, 505, "ab\\$", "ac\nb\n", "n", "-", "-");
    test(regex_506, 506, "ab\\Z", "b\nac\n", "n", "-", "-");
    test(regex_507, 507, "ab\\z", "b\nac\n", "n", "-", "-");
    test(regex_508, 508, "ab\\$", "b\nac\n", "n", "-", "-");
    test(regex_509, 509, "ab\\Z", "b\nac", "n", "-", "-");
    test(regex_510, 510, "ab\\z", "b\nac", "n", "-", "-");
    test(regex_511, 511, "ab\\$", "b\nac", "n", "-", "-");
    test(regex_512, 512, "ab\\Z", "ca\nb\n", "n", "-", "-");
    test(regex_513, 513, "ab\\z", "ca\nb\n", "n", "-", "-");
    test(regex_514, 514, "ab\\$", "ca\nb\n", "n", "-", "-");
    test(regex_515, 515, "ab\\Z", "b\nca\n", "n", "-", "-");
    test(regex_516, 516, "ab\\z", "b\nca\n", "n", "-", "-");
    test(regex_517, 517, "ab\\$", "b\nca\n", "n", "-", "-");
    test(regex_518, 518, "ab\\Z", "b\nca", "n", "-", "-");
    test(regex_519, 519, "ab\\z", "b\nca", "n", "-", "-");
    test(regex_520, 520, "ab\\$", "b\nca", "n", "-", "-");
    test(regex_521, 521, "ab\\Z", "ca\nb\n", "n", "-", "-");
    test(regex_522, 522, "ab\\z", "ca\nb\n", "n", "-", "-");
    test(regex_523, 523, "ab\\$", "ca\nb\n", "n", "-", "-");
    test(regex_524, 524, "ab\\Z", "b\nca\n", "n", "-", "-");
    test(regex_525, 525, "ab\\z", "b\nca\n", "n", "-", "-");
    test(regex_526, 526, "ab\\$", "b\nca\n", "n", "-", "-");
    test(regex_527, 527, "ab\\Z", "b\nca", "n", "-", "-");
    test(regex_528, 528, "ab\\z", "b\nca", "n", "-", "-");
    test(regex_529, 529, "ab\\$", "b\nca", "n", "-", "-");
    test(regex_530, 530, "abb\\Z", "abb\nb\n", "n", "-", "-");
    test(regex_531, 531, "abb\\z", "abb\nb\n", "n", "-", "-");
    test(regex_532, 532, "abb\\$", "abb\nb\n", "n", "-", "-");
    test(regex_533, 533, "abb\\Z", "b\nabb\n", "y", "$-[0]", "2");
    test(regex_534, 534, "abb\\z", "b\nabb\n", "n", "-", "-");
    test(regex_535, 535, "abb\\$", "b\nabb\n", "y", "$-[0]", "2");
    test(regex_536, 536, "abb\\Z", "b\nabb", "y", "$-[0]", "2");
    test(regex_537, 537, "abb\\z", "b\nabb", "y", "$-[0]", "2");
    test(regex_538, 538, "abb\\$", "b\nabb", "y", "$-[0]", "2");
    test(regex_539, 539, "abb\\Z", "abb\nb\n", "n", "-", "-");
    test(regex_540, 540, "abb\\z", "abb\nb\n", "n", "-", "-");
    test(regex_541, 541, "abb\\$", "abb\nb\n", "y", "$-[0]", "0");
    test(regex_542, 542, "abb\\Z", "b\nabb\n", "y", "$-[0]", "2");
    test(regex_543, 543, "abb\\z", "b\nabb\n", "n", "-", "-");
    test(regex_544, 544, "abb\\$", "b\nabb\n", "y", "$-[0]", "2");
    test(regex_545, 545, "abb\\Z", "b\nabb", "y", "$-[0]", "2");
    test(regex_546, 546, "abb\\z", "b\nabb", "y", "$-[0]", "2");
    test(regex_547, 547, "abb\\$", "b\nabb", "y", "$-[0]", "2");
    test(regex_548, 548, "abb\\Z", "ac\nb\n", "n", "-", "-");
    test(regex_549, 549, "abb\\z", "ac\nb\n", "n", "-", "-");
    test(regex_550, 550, "abb\\$", "ac\nb\n", "n", "-", "-");
    test(regex_551, 551, "abb\\Z", "b\nac\n", "n", "-", "-");
    test(regex_552, 552, "abb\\z", "b\nac\n", "n", "-", "-");
    test(regex_553, 553, "abb\\$", "b\nac\n", "n", "-", "-");
    test(regex_554, 554, "abb\\Z", "b\nac", "n", "-", "-");
    test(regex_555, 555, "abb\\z", "b\nac", "n", "-", "-");
    test(regex_556, 556, "abb\\$", "b\nac", "n", "-", "-");
    test(regex_557, 557, "abb\\Z", "ac\nb\n", "n", "-", "-");
    test(regex_558, 558, "abb\\z", "ac\nb\n", "n", "-", "-");
    test(regex_559, 559, "abb\\$", "ac\nb\n", "n", "-", "-");
    test(regex_560, 560, "abb\\Z", "b\nac\n", "n", "-", "-");
    test(regex_561, 561, "abb\\z", "b\nac\n", "n", "-", "-");
    test(regex_562, 562, "abb\\$", "b\nac\n", "n", "-", "-");
    test(regex_563, 563, "abb\\Z", "b\nac", "n", "-", "-");
    test(regex_564, 564, "abb\\z", "b\nac", "n", "-", "-");
    test(regex_565, 565, "abb\\$", "b\nac", "n", "-", "-");
    test(regex_566, 566, "abb\\Z", "ca\nb\n", "n", "-", "-");
    test(regex_567, 567, "abb\\z", "ca\nb\n", "n", "-", "-");
    test(regex_568, 568, "abb\\$", "ca\nb\n", "n", "-", "-");
    test(regex_569, 569, "abb\\Z", "b\nca\n", "n", "-", "-");
    test(regex_570, 570, "abb\\z", "b\nca\n", "n", "-", "-");
    test(regex_571, 571, "abb\\$", "b\nca\n", "n", "-", "-");
    test(regex_572, 572, "abb\\Z", "b\nca", "n", "-", "-");
    test(regex_573, 573, "abb\\z", "b\nca", "n", "-", "-");
    test(regex_574, 574, "abb\\$", "b\nca", "n", "-", "-");
    test(regex_575, 575, "abb\\Z", "ca\nb\n", "n", "-", "-");
    test(regex_576, 576, "abb\\z", "ca\nb\n", "n", "-", "-");
    test(regex_577, 577, "abb\\$", "ca\nb\n", "n", "-", "-");
    test(regex_578, 578, "abb\\Z", "b\nca\n", "n", "-", "-");
    test(regex_579, 579, "abb\\z", "b\nca\n", "n", "-", "-");
    test(regex_580, 580, "abb\\$", "b\nca\n", "n", "-", "-");
    test(regex_581, 581, "abb\\Z", "b\nca", "n", "-", "-");
    test(regex_582, 582, "abb\\z", "b\nca", "n", "-", "-");
    test(regex_583, 583, "abb\\$", "b\nca", "n", "-", "-");
    test(regex_584, 584, "\\Aa\\$", "a\n\n", "y", "$&", "a");
    test(regex_585, 585, "(?i:.[b].)", "abd", "y", "$&", "abd");
    test(regex_586, 586, "(?i:\\\\N[b]\\\\N)", "abd", "y", "$&", "abd");
    test(regex_587, 587, "\\\\N {1}", "abbbbc", "y", "$&", "a");
    test(regex_588, 588, "\\\\N {1}", "abbbbc", "y", "$-[0]", "0");
    test(regex_589, 589, "\\\\N {1}", "abbbbc", "y", "$+[0]", "1");
    test(regex_590, 590, "\\\\N {3,4}", "abbbbc", "y", "$&", "abbb");
    test(regex_591, 591, "\\\\N {3,4}", "abbbbc", "y", "$-[0]", "0");
    test(regex_592, 592, "\\\\N {3,4}", "abbbbc", "y", "$+[0]", "4");
    test(regex_593, 593, "a\\\\N c", "abc", "y", "$&", "abc");
    test(regex_594, 594, "a\\\\N *c", "axyzc", "y", "$&", "axyzc");
    test(regex_595, 595, "a\\\\N *c", "axyzd", "n", "-", "-");
    test(regex_596, 596, "[a b]", " ", "yS", "$&", " ");
    test(regex_597, 597, "[a b]", " ", "n", "-", "-");
    test(regex_598, 598, "[a\\ b]", " ", "y", "$&", " ");
    test(regex_599, 599, "[ ^ a b ]", "a", "n", "-", "-");
    test(regex_600, 600, "[ ^ a b ]", "b", "n", "-", "-");
    test(regex_601, 601, "[ ^ a b ]", "A", "y", "$&", "A");
    test(regex_602, 602, "(?x:[a b])", " ", "yS", "$&", " ");
    test(regex_603, 603, "(?xx:[a b])", " ", "n", "-", "-");
    test(regex_604, 604, "(?x)[a b]", " ", "yS", "$&", " ");
    test(regex_605, 605, "(?xx)[a b]", " ", "n", "-", "-");
    test(regex_606, 606, "(?-x:[a b])", " ", "yS", "$&", " ");
    test(regex_607, 607, "\\\\N {1}", "abbbbc", "y", "$&", "a");
    test(regex_608, 608, "\\\\N {1}", "abbbbc", "y", "$-[0]", "0");
    test(regex_609, 609, "\\\\N {1}", "abbbbc", "y", "$+[0]", "1");
    test(regex_610, 610, "\\\\N {3,4}", "abbbbc", "y", "$&", "abbb");
    test(regex_611, 611, "\\\\N {3,4}", "abbbbc", "y", "$-[0]", "0");
    test(regex_612, 612, "\\\\N {3,4}", "abbbbc", "y", "$+[0]", "4");
    test(regex_613, 613, "a\\\\N c", "abc", "y", "$&", "abc");
    test(regex_614, 614, "a\\\\N *c", "axyzc", "y", "$&", "axyzc");
    test(regex_615, 615, "a\\\\N *c", "axyzd", "n", "-", "-");
    test(regex_616, 616, "[#]", "a#b", "y", "$&", "#");
    test(regex_617, 617, "[#]b", "a#b", "y", "$&", "#b");
    test(regex_618, 618, "[#]", "a#b", "y", "$&", "#");
    test(regex_619, 619, "[#]b", "a#b", "y", "$&", "#b");
    test(regex_620, 620, "(?'n'foo) \\g{n}", "..foo foo..", "y", "$1", "foo");
    test(regex_621, 621, "(?'n'foo) \\g{ n }", "..foo foo..", "y", "$1", "foo");
    test(regex_622, 622, "(?'n'foo) \\g{n}", "..foo foo..", "yM", "$+{n}", "foo");
    test(regex_623, 623, "(?<n>foo) \\g{n}", "..foo foo..", "y", "$1", "foo");
    test(regex_624, 624, "(?<n>foo) \\g{n}", "..foo foo..", "yM", "$+{n}", "foo");
    test(regex_625, 625, "(?<as>as) (\\w+) \\g{as} (\\w+)", "as easy as pie", "y", "$1-$2-$3", "as-easy-pie");
    test(regex_626, 626, "(?'n'foo) \\k<n>", "..foo foo..", "y", "$1", "foo");
    test(regex_627, 627, "(?'n'foo) \\k<n>", "..foo foo..", "yM", "$+{n}", "foo");
    test(regex_628, 628, "(?<n>foo) \\k'n'", "..foo foo..", "y", "$1", "foo");
    test(regex_629, 629, "(?<n>foo) \\k'n'", "..foo foo..", "yM", "$+{n}", "foo");
    test(regex_630, 630, "(?'a1'foo) \\k'a1'", "..foo foo..", "yM", "$+{a1}", "foo");
    test(regex_631, 631, "(?<a1>foo) \\k<a1>", "..foo foo..", "yM", "$+{a1}", "foo");
    test(regex_632, 632, "(?'_'foo) \\k'_'", "..foo foo..", "yM", "$+{_}", "foo");
    test(regex_633, 633, "(?<_>foo) \\k<_>", "..foo foo..", "yM", "$+{_}", "foo");
    test(regex_634, 634, "(?'_0_'foo) \\k'_0_'", "..foo foo..", "yM", "$+{_0_}", "foo");
    test(regex_635, 635, "(?<_0_>foo) \\k<_0_>", "..foo foo..", "yM", "$+{_0_}", "foo");
    test(regex_636, 636, "(?<as>as) (\\w+) \\k<as> (\\w+)", "as easy as pie", "y", "$1-$2-$3", "as-easy-pie");
    test(regex_637, 637, "(?<as>as) (\\w+) \\k{as} (\\w+)", "as easy as pie", "y", "$1-$2-$3", "as-easy-pie");
    test(regex_638, 638, "(?<as>as) (\\w+) \\k'as' (\\w+)", "as easy as pie", "y", "$1-$2-$3", "as-easy-pie");
    test(regex_639, 639, "(?<as>as) (\\w+) \\k{ as } (\\w+)", "as easy as pie", "y", "$1-$2-$3", "as-easy-pie");
    test(regex_640, 640, "^a(?#xxx){3}c", "aaac", "y", "$&", "aaac");
    test(regex_641, 641, "^a (?#xxx) (?#yyy) {3}c", "aaac", "y", "$&", "aaac");
    test(regex_642, 642, "(?|(a))", "a", "y", "$1-$+", "a-a");
    test(regex_643, 643, "(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)", "d!o!da", "y", "$1-$2-$3", "!o!-o-a");
    test(regex_644, 644, "(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)", "aabc", "y", "$1-$2-$3", "a--c");
    test(regex_645, 645, "(?|a(.)b|d(.(o).)d|i(.)(.)j)(.)", "ixyjp", "y", "$1-$2-$3", "x-y-p");
    test(regex_646, 646, "(?|(?|(a)|(b))|(?|(c)|(d)))", "a", "y", "$1", "a");
    test(regex_647, 647, "(?|(?|(a)|(b))|(?|(c)|(d)))", "b", "y", "$1", "b");
    test(regex_648, 648, "(?|(?|(a)|(b))|(?|(c)|(d)))", "c", "y", "$1", "c");
    test(regex_649, 649, "(?|(?|(a)|(b))|(?|(c)|(d)))", "d", "y", "$1", "d");
    test(regex_650, 650, "(.)(?|(.)(.)x|(.)d)(.)", "abcde", "y", "$1-$2-$3-$4-$5-", "b-c--e--");
    test(regex_651, 651, "(\\\\N)(?|(\\\\N)(\\\\N)x|(\\\\N)d)(\\\\N)", "abcde", "y", "$1-$2-$3-$4-$5-", "b-c--e--");
    test(regex_652, 652, "(?|(?<foo>x))", "x", "yM", "$+{foo}", "x");
    test(regex_653, 653, "(?|(?<foo>x)|(?<bar>y))", "x", "yM", "$+{foo}", "x");
    test(regex_654, 654, "(?|(?<bar>y)|(?<foo>x))", "x", "yM", "$+{foo}", "x");
    test(regex_655, 655, "(?<bar>)(?|(?<foo>x))", "x", "yM", "$+{foo}", "x");
    test(regex_656, 656, "foo\\Kbar", "foobar", "y", "$&", "bar");
    test(regex_657, 657, "foo\\t\\n\\r\\f\\a\\ebar", "foo\t\n\r\f\a\ebar", "y", "$&", "foo\t\n\r\f\a\ebar");
    test(regex_658, 658, "(foo)", "foobar", "y", "$&-$1", "foo-");
    test(regex_659, 659, "(?-n)(foo)(?n)(bar)", "foobar", "y", "$&-$1-$2", "foobar-foo-");
    test(regex_660, 660, "(?-n:(foo)(?n:(bar)))", "foobar", "y", "$&-$1-$2", "foobar-foo-");
    test(regex_661, 661, "foo # Match foo", "foobar", "y", "$&", "foo");
    test(regex_662, 662, "\\x41\\x42", "AB", "y", "$&", "AB");
    test(regex_663, 663, "\\101\\o{102}", "AB", "y", "$&", "AB");
    std::cout << std::endl;
  }
}
test_perl_tests_lookahead: @regex type = {
  regex_0 := "a(?!b).";
  var_regex_0 : std::string = "a(?!b).";
  regex_1 := "(?=)a";
  var_regex_1 : std::string = "(?=)a";
  regex_2 := "a(?=d).";
  var_regex_2 : std::string = "a(?=d).";
  regex_3 := "a(?=c|d).";
  var_regex_3 : std::string = "a(?=c|d).";
  regex_4 := "^(?:b|a(?=(.)))*\1";
  var_regex_4 : std::string = "^(?:b|a(?=(.)))*\1";
  regex_5 := "(?=(a+?))(\1ab)";
  var_regex_5 : std::string = "(?=(a+?))(\1ab)";
  regex_6 := "^(?=(a+?))\1ab";
  var_regex_6 : std::string = "^(?=(a+?))\1ab";
  regex_7 := "(?=(a+?))(\1ab)";
  var_regex_7 : std::string = "(?=(a+?))(\1ab)";
  regex_8 := "^(?=(a+?))\1ab";
  var_regex_8 : std::string = "^(?=(a+?))\1ab";
  regex_9 := "(.*)(?=c)";
  var_regex_9 : std::string = "(.*)(?=c)";
  regex_10 := "(.*)(?=c)c";
  var_regex_10 : std::string = "(.*)(?=c)c";
  regex_11 := "(.*)(?=b|c)";
  var_regex_11 : std::string = "(.*)(?=b|c)";
  regex_12 := "(.*)(?=b|c)c";
  var_regex_12 : std::string = "(.*)(?=b|c)c";
  regex_13 := "(.*)(?=c|b)";
  var_regex_13 : std::string = "(.*)(?=c|b)";
  regex_14 := "(.*)(?=c|b)c";
  var_regex_14 : std::string = "(.*)(?=c|b)c";
  regex_15 := "(.*)(?=[bc])";
  var_regex_15 : std::string = "(.*)(?=[bc])";
  regex_16 := "(.*)(?=[bc])c";
  var_regex_16 : std::string = "(.*)(?=[bc])c";
  regex_17 := "(.*?)(?=c)";
  var_regex_17 : std::string = "(.*?)(?=c)";
  regex_18 := "(.*?)(?=c)c";
  var_regex_18 : std::string = "(.*?)(?=c)c";
  regex_19 := "(.*?)(?=b|c)";
  var_regex_19 : std::string = "(.*?)(?=b|c)";
  regex_20 := "(.*?)(?=b|c)c";
  var_regex_20 : std::string = "(.*?)(?=b|c)c";
  regex_21 := "(.*?)(?=c|b)";
  var_regex_21 : std::string = "(.*?)(?=c|b)";
  regex_22 := "(.*?)(?=c|b)c";
  var_regex_22 : std::string = "(.*?)(?=c|b)c";
  regex_23 := "(.*?)(?=[bc])";
  var_regex_23 : std::string = "(.*?)(?=[bc])";
  regex_24 := "(.*?)(?=[bc])c";
  var_regex_24 : std::string = "(.*?)(?=[bc])c";
  regex_25 := "^(a*?)(?!(aa|aaaa)*\$)(?=a\z)";
  var_regex_25 : std::string = "^(a*?)(?!(aa|aaaa)*\$)(?=a\z)";
  regex_26 := "a(?!b(?!c))(..)";
  var_regex_26 : std::string = "a(?!b(?!c))(..)";
  regex_27 := "a(?!b(?=a))(..)";
  var_regex_27 : std::string = "a(?!b(?=a))(..)";
  regex_28 := "X(\w+)(?=\s)|X(\w+)";
  var_regex_28 : std::string = "X(\w+)(?=\s)|X(\w+)";
  regex_29 := "^a*(?=b)b";
  var_regex_29 : std::string = "^a*(?=b)b";
  regex_30 := "(?!\A)x";
  regex_30_mod := "m";
  var_regex_30 : std::string = "(?!\A)x";
  regex_31 := "^(o)(?!.*\1)";
  regex_31_mod := "i";
  var_regex_31 : std::string = "^(o)(?!.*\1)";
  regex_32 := ".*a(?!(b|cd)*e).*f";
  var_regex_32 : std::string = ".*a(?!(b|cd)*e).*f";
  regex_33 := "^(a*?)(?!(aa|aaaa)*\$)";
  var_regex_33 : std::string = "^(a*?)(?!(aa|aaaa)*\$)";
  regex_34 := "(?!)+?|(.{2,4})";
  var_regex_34 : std::string = "(?!)+?|(.{2,4})";
  regex_35 := "^(a*?)(?!(a{6}|a{5})*\$)";
  var_regex_35 : std::string = "^(a*?)(?!(a{6}|a{5})*\$)";
  regex_36 := "a(?!b(?!c(?!d(?!e))))...(.)";
  var_regex_36 : std::string = "a(?!b(?!c(?!d(?!e))))...(.)";
  regex_37 := "X(?!b+(?!(c+)*(?!(c+)*d))).*X";
  var_regex_37 : std::string = "X(?!b+(?!(c+)*(?!(c+)*d))).*X";
  regex_38 := "((?s).)c(?!.)";
  var_regex_38 : std::string = "((?s).)c(?!.)";
  regex_39 := "((?s).)c(?!.)";
  var_regex_39 : std::string = "((?s).)c(?!.)";
  regex_40 := "((?s)b.)c(?!.)";
  var_regex_40 : std::string = "((?s)b.)c(?!.)";
  regex_41 := "((?s)b.)c(?!.)";
  var_regex_41 : std::string = "((?s)b.)c(?!.)";
  regex_42 := "((?s)b.)c(?!\N)";
  var_regex_42 : std::string = "((?s)b.)c(?!\\N)";
  regex_43 := "(b.)c(?!\N)";
  regex_43_mod := "s";
  var_regex_43 : std::string = "(b.)c(?!\\N)";
  regex_44 := "a*(?!)";
  var_regex_44 : std::string = "a*(?!)";
  run: (this) = {
    std::cout << "Running perl_tests_lookahead:"<< std::endl;
    test(regex_0, 0, "a(?!b).", "abad", "y", "$&", "ad");
    test(regex_1, 1, "(?=)a", "a", "y", "$&", "a");
    test(regex_2, 2, "a(?=d).", "abad", "y", "$&", "ad");
    test(regex_3, 3, "a(?=c|d).", "abad", "y", "$&", "ad");
    test(regex_4, 4, "^(?:b|a(?=(.)))*\\1", "abc", "y", "$&", "ab");
    test(regex_5, 5, "(?=(a+?))(\\1ab)", "aaab", "y", "$2", "aab");
    test(regex_6, 6, "^(?=(a+?))\\1ab", "aaab", "n", "-", "-");
    test(regex_7, 7, "(?=(a+?))(\\1ab)", "aaab", "y", "$2", "aab");
    test(regex_8, 8, "^(?=(a+?))\\1ab", "aaab", "n", "-", "-");
    test(regex_9, 9, "(.*)(?=c)", "abcd", "y", "$1", "ab");
    test(regex_10, 10, "(.*)(?=c)c", "abcd", "yB", "$1", "ab");
    test(regex_11, 11, "(.*)(?=b|c)", "abcd", "y", "$1", "ab");
    test(regex_12, 12, "(.*)(?=b|c)c", "abcd", "y", "$1", "ab");
    test(regex_13, 13, "(.*)(?=c|b)", "abcd", "y", "$1", "ab");
    test(regex_14, 14, "(.*)(?=c|b)c", "abcd", "y", "$1", "ab");
    test(regex_15, 15, "(.*)(?=[bc])", "abcd", "y", "$1", "ab");
    test(regex_16, 16, "(.*)(?=[bc])c", "abcd", "yB", "$1", "ab");
    test(regex_17, 17, "(.*?)(?=c)", "abcd", "y", "$1", "ab");
    test(regex_18, 18, "(.*?)(?=c)c", "abcd", "yB", "$1", "ab");
    test(regex_19, 19, "(.*?)(?=b|c)", "abcd", "y", "$1", "a");
    test(regex_20, 20, "(.*?)(?=b|c)c", "abcd", "y", "$1", "ab");
    test(regex_21, 21, "(.*?)(?=c|b)", "abcd", "y", "$1", "a");
    test(regex_22, 22, "(.*?)(?=c|b)c", "abcd", "y", "$1", "ab");
    test(regex_23, 23, "(.*?)(?=[bc])", "abcd", "y", "$1", "a");
    test(regex_24, 24, "(.*?)(?=[bc])c", "abcd", "yB", "$1", "ab");
    test(regex_25, 25, "^(a*?)(?!(aa|aaaa)*\\$)(?=a\\z)", "aaaaaaaa", "y", "$1", "aaaaaaa");
    test(regex_26, 26, "a(?!b(?!c))(..)", "abababc", "y", "$1", "bc");
    test(regex_27, 27, "a(?!b(?=a))(..)", "abababc", "y", "$1", "bc");
    test(regex_28, 28, "X(\\w+)(?=\\s)|X(\\w+)", "Xab", "y", "[$1-$2]", "[-ab]");
    test(regex_29, 29, "^a*(?=b)b", "ab", "y", "$&", "ab");
    test(regex_30, 30, "(?!\\A)x", "a\nxb\n", "y", "-", "-");
    test(regex_31, 31, "^(o)(?!.*\\1)", "Oo", "n", "-", "-");
    test(regex_32, 32, ".*a(?!(b|cd)*e).*f", "......abef", "n", "-", "-");
    test(regex_33, 33, "^(a*?)(?!(aa|aaaa)*\\$)", "aaaaaaaaaaaaaaaaaaaa", "y", "$1", "a");
    test(regex_34, 34, "(?!)+?|(.{2,4})", "abcde", "y", "$1", "abcd");
    test(regex_35, 35, "^(a*?)(?!(a{6}|a{5})*\\$)", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "y", "$+[1]", "12");
    test(regex_36, 36, "a(?!b(?!c(?!d(?!e))))...(.)", "abxabcdxabcde", "y", "$1", "e");
    test(regex_37, 37, "X(?!b+(?!(c+)*(?!(c+)*d))).*X", "aXbbbbbbbcccccccccccccaaaX", "y", "-", "-");
    test(regex_38, 38, "((?s).)c(?!.)", "a\nb\nc\n", "y", "$1", "\n");
    test(regex_39, 39, "((?s).)c(?!.)", "a\nb\nc\n", "y", "$1:$&", "\n:\nc");
    test(regex_40, 40, "((?s)b.)c(?!.)", "a\nb\nc\n", "y", "$1", "b\n");
    test(regex_41, 41, "((?s)b.)c(?!.)", "a\nb\nc\n", "y", "$1:$&", "b\n:b\nc");
    test(regex_42, 42, "((?s)b.)c(?!\\\\N)", "a\nb\nc\n", "y", "$1:$&", "b\n:b\nc");
    test(regex_43, 43, "(b.)c(?!\\\\N)", "a\nb\nc\n", "y", "$1:$&", "b\n:b\nc");
    test(regex_44, 44, "a*(?!)", "aaaab", "n", "-", "-");
    std::cout << std::endl;
  }
}
main: (args) = {
    test_perl_tests_general().run();
    test_perl_tests_lookahead().run();
}
